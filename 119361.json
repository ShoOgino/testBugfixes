{"path":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","commits":[{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"*:*\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1","date":1410446084,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"*:* OR test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"*:*\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9288360587a76ce709dc905e79a457ffa30fe876","date":1434634073,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"*:* OR test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"*:* OR test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"*:* OR test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"569aade36ab5d95a5e6b8fca9676ce35657ba6b6","date":1454328039,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    SolrInfoMBean info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    NamedList stats = info.getStatistics();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    info  = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n    stats = info.getStatistics();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\",\n        \"//result/doc[6]/float[@name='id'][.='5.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='4.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='4.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='2.0']\", //Boosted during rerank.\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='5.0']\",\n        \"//result/doc[6]/float[@name='id'][.='3.0']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\", //Elevated\n        \"//result/doc[2]/float[@name='id'][.='1.0']\", //Elevated\n        \"//result/doc[3]/float[@name='id'][.='6.0']\",\n        \"//result/doc[4]/float[@name='id'][.='5.0']\",\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='2.0']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='6.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='3.0']\",\n        \"//result/doc[5]/float[@name='id'][.='2.0']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\",\n        \"//result/doc[5]/float[@name='id'][.='1.0']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\",\n        \"//result/doc[4]/float[@name='id'][.='2.0']\", // reranked out of orig order\n        \"//result/doc[5]/float[@name='id'][.='3.0']\",\n        \"//result/doc[6]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='2.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReRankQParserPlugin#testReRankQueries().mjava","sourceNew":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testReRankQueries() throws Exception {\n\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", \"group_s\", \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=200}\");\n    params.add(\"q\", \"term_s:YYYY\");\n    params.add(\"rqq\", \"{!edismax bf=$bff}*:*\");\n    params.add(\"bff\", \"field(test_ti)\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\",\n        \"//result/doc[6]/str[@name='id'][.='5']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test with sort by score.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc\");\n    params.add(\"df\", \"text\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with compound sort.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"sort\", \"score desc,test_ti asc\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with elevation\n\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=50}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"{!edismax bq=$bqq2}*:*\");\n    params.add(\"bqq2\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n\n    );\n\n\n    //Test TermQuery rqq\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"df\", \"text\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='4']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test Elevation\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,4\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n    //Test Elevation swapped\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\",\"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='2']\", //Boosted during rerank.\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='5']\",\n        \"//result/doc[6]/str[@name='id'][.='3']\"\n    );\n\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=4 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\", //Elevated\n        \"//result/doc[2]/str[@name='id'][.='1']\", //Elevated\n        \"//result/doc[3]/str[@name='id'][.='6']\",\n        \"//result/doc[4]/str[@name='id'][.='5']\",\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='2']\"  //Not in reRankeDocs\n    );\n\n    //Test Elevation with start beyond the rerank docs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\"  //Was not in reRankDocs\n    );\n\n    //Test Elevation with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}nada\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"10\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"4,1\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n\n\n    //Pass in reRankDocs lower then the length being collected.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=1 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=0 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=2 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:4^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"10\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='6']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n    //Test reRankWeight of 0, reranking will have no effect.\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=0}\");\n    params.add(\"q\", \"{!edismax bq=$bqq1}*:*\");\n    params.add(\"bqq1\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"test_ti:50^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='3']\",\n        \"//result/doc[5]/str[@name='id'][.='2']\"\n    );\n\n    MetricsMap metrics = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    Map<String,Object> stats = metrics.getValue();\n\n    long inserts = (Long) stats.get(\"inserts\");\n\n    assertTrue(inserts > 0);\n\n    //Test range query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n\n    stats = metrics.getValue();\n\n    long inserts1 = (Long) stats.get(\"inserts\");\n\n    //Last query was added to the cache\n    assertTrue(inserts1 > inserts);\n\n    //Run same query and see if it was cached. This tests the query result cache hit with rewritten queries\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    params.add(\"q\", \"test_ti:[0 TO 2000]\");\n    params.add(\"rqq\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/str[@name='id'][.='1']\"\n    );\n\n    stats = metrics.getValue();\n    long inserts2 = (Long) stats.get(\"inserts\");\n    //Last query was NOT added to the cache\n    assertTrue(inserts1 == inserts2);\n\n\n    //Test range query embedded in larger query\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6}\");\n    // function query for predictible scores (relative to id) independent of similarity\n    params.add(\"q\", \"{!func}id_i\");\n    // constant score for each clause (unique per doc) for predictible scores independent of similarity\n    // NOTE: biased in favor of doc id == 2\n    params.add(\"rqq\", \"id:1^=10 id:2^=40 id:3^=30 id:4^=40 id:5^=50 id:6^=60\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"6\");\n\n    assertQ(req(params), \"*[count(//doc)=6]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='5']\",\n        \"//result/doc[3]/str[@name='id'][.='4']\",\n        \"//result/doc[4]/str[@name='id'][.='2']\", // reranked out of orig order\n        \"//result/doc[5]/str[@name='id'][.='3']\",\n        \"//result/doc[6]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test with start beyond reRankDocs\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\"\n    );\n\n\n    //Test ReRankDocs > docs returned\n\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=6 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"0\");\n    params.add(\"rows\", \"1\");\n\n    assertQ(req(params), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\"\n    );\n\n\n\n    //Test with zero results\n    params = new ModifiableSolrParams();\n    params.add(\"rq\", \"{!\"+ReRankQParserPlugin.NAME+\" \"+ReRankQParserPlugin.RERANK_QUERY+\"=$rqq \"+ReRankQParserPlugin.RERANK_DOCS+\"=3 \"+ReRankQParserPlugin.RERANK_WEIGHT+\"=2}\");\n    params.add(\"q\", \"term_s:NNNN\");\n    params.add(\"rqq\", \"id:1^1000\");\n    params.add(\"fl\", \"id,score\");\n    params.add(\"start\", \"4\");\n    params.add(\"rows\", \"5\");\n\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"43564cbb30b064675027cfb569564e8531096e97":["28288370235ed02234a64753cdbf0c6ec096304a","bfc52860e6d13d034226a760813c59d984c6817a"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["9288360587a76ce709dc905e79a457ffa30fe876"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["1a144790859eb303122988cd315215ff30f449d2"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["49dd2950028d6b59839f54d3801d77f769fa22ef","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"28288370235ed02234a64753cdbf0c6ec096304a":["1a144790859eb303122988cd315215ff30f449d2","a71f63026529f3c1f03cfdd664910873ab2369ae"],"9288360587a76ce709dc905e79a457ffa30fe876":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1a144790859eb303122988cd315215ff30f449d2"],"bfc52860e6d13d034226a760813c59d984c6817a":["28288370235ed02234a64753cdbf0c6ec096304a"],"1a144790859eb303122988cd315215ff30f449d2":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","569aade36ab5d95a5e6b8fca9676ce35657ba6b6"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"569aade36ab5d95a5e6b8fca9676ce35657ba6b6":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3","816521ebaad5add9cb96bb88c577394e2938c40b"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"28288370235ed02234a64753cdbf0c6ec096304a":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["1a144790859eb303122988cd315215ff30f449d2"],"9288360587a76ce709dc905e79a457ffa30fe876":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"1a144790859eb303122988cd315215ff30f449d2":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["9288360587a76ce709dc905e79a457ffa30fe876"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}