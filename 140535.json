{"path":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","commits":[{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.parseInt(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.parseInt(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.parseInt(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.valueOf(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/mlt/CloudMLTQParserTest#testUnstoredAndUnanalyzedFieldsAreIgnored().mjava","sourceNew":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.parseInt(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    \n    Arrays.sort(actualIds);\n    Arrays.sort(expectedIds);\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","sourceOld":"  @Test\n  public void testUnstoredAndUnanalyzedFieldsAreIgnored() throws Exception {\n\n    // Assert that {!mlt}id does not throw an exception i.e. implicitly, only fields that are stored + have explicit\n    // analyzer are used for MLT Query construction.\n    QueryResponse queryResponse = cluster.getSolrClient().query(COLLECTION, new SolrQuery(\"{!mlt}20\"));\n    SolrDocumentList solrDocuments = queryResponse.getResults();\n    int[] actualIds = new int[solrDocuments.size()];\n    int[] expectedIds = new int[]{13, 14, 15, 16, 22, 24, 32, 18, 19, 21};\n    int i = 0;\n    StringBuilder sb = new StringBuilder();\n    for (SolrDocument solrDocument : solrDocuments) {\n      actualIds[i++] =  Integer.parseInt(String.valueOf(solrDocument.getFieldValue(\"id\")));\n      sb.append(actualIds[i-1]).append(\", \");\n    }\n    assertArrayEquals(expectedIds, actualIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["d470c8182e92b264680e34081b75e70a9f2b3c89","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}