{"path":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n        analyzer = fieldType.getQueryAnalyzer();\n      } else {\n        log.warning(\"No fieldType: \" + fieldTypeName\n                + \" found for dictionary: \" + name);\n        analyzer = new WhitespaceAnalyzer();\n\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75a1d96274371d7e4cf859ebf69f72ada2e353","date":1214265552,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n        analyzer = fieldType.getQueryAnalyzer();\n      } else {\n        log.warning(\"No fieldType: \" + fieldTypeName\n                + \" found for dictionary: \" + name + \".  Using WhitespaceAnalzyer.\");\n        analyzer = new WhitespaceAnalyzer();\n\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n        analyzer = fieldType.getQueryAnalyzer();\n      } else {\n        log.warning(\"No fieldType: \" + fieldTypeName\n                + \" found for dictionary: \" + name);\n        analyzer = new WhitespaceAnalyzer();\n\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","date":1216996119,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n        analyzer = fieldType.getQueryAnalyzer();\n      } else {\n        log.warning(\"No fieldType: \" + fieldTypeName\n                + \" found for dictionary: \" + name + \".  Using WhitespaceAnalzyer.\");\n        analyzer = new WhitespaceAnalyzer();\n\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574","6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.log(Level.SEVERE, \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da3286fdf3396ccadc19425239915445bd235c4e","date":1244467917,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    IndexSearcher searcher = null;\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    } finally {\n      try {\n        if (searcher != null)\n          searcher.close();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","pathOld":"src/java/org/apache/solr/spelling/FileBasedSpellChecker#loadExternalFileDictionary(IndexSchema,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader loader) {\n    try {\n\n      // Get the field's analyzer\n      if (fieldTypeName != null\n              && schema.getFieldTypeNoEx(fieldTypeName) != null) {\n        FieldType fieldType = schema.getFieldTypes()\n                .get(fieldTypeName);\n        // Do index-time analysis using the given fieldType's analyzer\n        RAMDirectory ramDir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(ramDir, fieldType.getAnalyzer(),\n                true, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        List<String> lines = loader.getLines(sourceLocation, characterEncoding);\n\n        for (String s : lines) {\n          Document d = new Document();\n          d.add(new Field(WORD_FIELD_NAME, s, Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(d);\n        }\n        writer.optimize();\n        writer.close();\n\n        dictionary = new HighFrequencyDictionary(IndexReader.open(ramDir),\n                WORD_FIELD_NAME, 0.0f);\n      } else {\n        // check if character encoding is defined\n        if (characterEncoding == null) {\n          dictionary = new PlainTextDictionary(loader.openResource(sourceLocation));\n        } else {\n          dictionary = new PlainTextDictionary(new InputStreamReader(loader.openResource(sourceLocation), characterEncoding));\n        }\n      }\n\n\n    } catch (IOException e) {\n      log.error( \"Unable to load spellings\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["da3286fdf3396ccadc19425239915445bd235c4e"],"da3286fdf3396ccadc19425239915445bd235c4e":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"da3286fdf3396ccadc19425239915445bd235c4e":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["da3286fdf3396ccadc19425239915445bd235c4e"],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}