{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","commits":[{"id":"551db74111df22d4f6684319479c9f3d5f7ddf23","date":1394018258,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized TopScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized topScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized TopScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized topScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new Collector() {\n        boolean sawFive;\n        @Override\n        public void setNextReader(AtomicReaderContext context) {\n        }\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public void setScorer(Scorer scorer) {\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.shutdown();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.shutdown();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.shutdown();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.shutdown();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9359ad4a5596673c3154ffa1133458f00e124234","date":1428012026,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq.build(), new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq, new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq.build(), new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public org.apache.lucene.search.ScoreMode scoreMode() {\n          return org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq.build(), new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testInsideBooleanQuery().mjava","sourceNew":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq.build(), new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public org.apache.lucene.search.ScoreMode scoreMode() {\n          return org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  /** LUCENE-5487: verify a join query inside a SHOULD BQ\n   *  will still use the join query's optimized BulkScorers */\n  public void testInsideBooleanQuery() throws Exception {\n    final String idField = \"id\";\n    final String toField = \"productId\";\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    // 0\n    Document doc = new Document();\n    doc.add(new TextField(\"description\", \"random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name1\", Field.Store.NO));\n    doc.add(new TextField(idField, \"7\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"7\")));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"2\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"2\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"3\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"3\")));\n    doc.add(new TextField(toField, \"7\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    doc.add(new TextField(\"description\", \"more random text\", Field.Store.NO));\n    doc.add(new TextField(\"name\", \"name2\", Field.Store.NO));\n    doc.add(new TextField(idField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit();\n\n    // 4\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"10.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"5\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"5\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    doc.add(new TextField(\"price\", \"20.0\", Field.Store.NO));\n    doc.add(new TextField(idField, \"6\", Field.Store.NO));\n    doc.add(new SortedDocValuesField(idField, new BytesRef(\"6\")));\n    doc.add(new TextField(toField, \"0\", Field.Store.NO));\n    w.addDocument(doc);\n\n    w.forceMerge(1);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    // Search for product\n    Query joinQuery =\n        JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term(\"description\", \"random\")), indexSearcher, ScoreMode.Avg);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(joinQuery, BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"id\", \"3\")), BooleanClause.Occur.SHOULD);\n\n    indexSearcher.search(bq.build(), new SimpleCollector() {\n        boolean sawFive;\n        @Override\n        public void collect(int docID) {\n          // Hairy / evil (depends on how BooleanScorer\n          // stores temporarily collected docIDs by\n          // appending to head of linked list):\n          if (docID == 5) {\n            sawFive = true;\n          } else if (docID == 1) {\n            assertFalse(\"optimized bulkScorer was not used for join query embedded in boolean query!\", sawFive);\n          }\n        }\n\n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9359ad4a5596673c3154ffa1133458f00e124234":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","9fc47cb7b4346802411bb432f501ed0673d7119e"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9359ad4a5596673c3154ffa1133458f00e124234"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["781239fc84d36be12b84e4d3e2618f5f07a182e3","9359ad4a5596673c3154ffa1133458f00e124234"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["551db74111df22d4f6684319479c9f3d5f7ddf23"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae73da626f97850c922c42736f808d0378e165f0"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"]},"commit2Childs":{"9359ad4a5596673c3154ffa1133458f00e124234":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["9359ad4a5596673c3154ffa1133458f00e124234","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["551db74111df22d4f6684319479c9f3d5f7ddf23","acf00221f44c5f08ccea014f2492b53af15ecd66"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}