{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}