{"path":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","sourceNew":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateMathParser.parseMath(null, val );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateUtil.parseDate(val);\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueAugmenterFactory#getObjectFrom(String,String).mjava","sourceNew":"  public static Object getObjectFrom(String val, String type) {\n    if (type != null) {\n      try {\n        if (\"int\".equals(type)) return Integer.valueOf(val);\n        if (\"double\".equals(type)) return Double.valueOf(val);\n        if (\"float\".equals(type)) return Float.valueOf(val);\n        if (\"date\".equals(type)) return DateMathParser.parseMath(null, val);\n      } catch (Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n                \"Unable to parse \" + type + \"=\" + val, ex);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  public static Object getObjectFrom( String val, String type )\n  {\n    if( type != null ) {\n      try {\n        if( \"int\".equals( type ) ) return Integer.valueOf( val );\n        if( \"double\".equals( type ) ) return Double.valueOf( val );\n        if( \"float\".equals( type ) ) return Float.valueOf( val );\n        if( \"date\".equals( type ) ) return DateMathParser.parseMath(null, val );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST,\n            \"Unable to parse \"+type+\"=\"+val, ex );\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}