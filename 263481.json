{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldEquals(String,StorableField,StorableField).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldEquals(String,StorableField,StorableField).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(StorableField,StorableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredFieldEquals(String info, StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldEquals(String,IndexableField,IndexableField).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldEquals(String,StorableField,StorableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredFieldEquals(String info, IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredFieldEquals(String info, StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}