{"path":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"/dev/null","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    synchronized(knownImplClasses) {\n      LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n      return foundInterfaces;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"/dev/null","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    synchronized(knownImplClasses) {\n      LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n      return foundInterfaces;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"/dev/null","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    synchronized(knownImplClasses) {\n      LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n      return foundInterfaces;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb1ee331628e5e48978d05663ce7cd8c8fe2a471","date":1324228266,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","sourceOld":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    synchronized(knownImplClasses) {\n      LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n      return foundInterfaces;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#getAttributeInterfaces(Class[#-extends-AttributeImpl]).mjava","sourceNew":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","sourceOld":"  static LinkedList<WeakReference<Class<? extends Attribute>>> getAttributeInterfaces(final Class<? extends AttributeImpl> clazz) {\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces = knownImplClasses.get(clazz);\n    if (foundInterfaces == null) {\n      // we have the slight chance that another thread may do the same, but who cares?\n      foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>();\n      // find all interfaces that this attribute instance implements\n      // and that extend the Attribute interface\n      Class<?> actClazz = clazz;\n      do {\n        for (Class<?> curInterface : actClazz.getInterfaces()) {\n          if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n            foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n          }\n        }\n        actClazz = actClazz.getSuperclass();\n      } while (actClazz != null);\n      knownImplClasses.put(clazz, foundInterfaces);\n    }\n    return foundInterfaces;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}