{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues).mjava","sourceNew":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * stats.idf.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, stats.idf, fieldNormExpl);\n  }\n\n","sourceOld":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms != null && norms.advanceExact(doc)) {\n      norm = decodeNormValue(norms.longValue());\n    } else {\n      norm = 1f;\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * stats.idf.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, stats.idf, fieldNormExpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"/dev/null","sourceNew":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * stats.idf.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, stats.idf, fieldNormExpl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, fieldNormExpl);\n  }\n\n","sourceOld":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * stats.idf.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, stats.idf, fieldNormExpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f82a9bd302914a72572934ddb0a4ee15edfe4c6","date":1509493555,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#explainField(int,Explanation,IDFStats,NumericDocValues,float[]).mjava","sourceNew":null,"sourceOld":"  private Explanation explainField(int doc, Explanation freq, IDFStats stats, NumericDocValues norms, float[] normTable) throws IOException {\n    Explanation tfExplanation = Explanation.match(tf(freq.getValue()), \"tf(freq=\"+freq.getValue()+\"), with freq of:\", freq);\n    float norm;\n    if (norms == null) {\n      norm = 1f;\n    } else if (norms.advanceExact(doc) == false) {\n      norm = 0f;\n    } else {\n      norm = normTable[(int) (norms.longValue() & 0xFF)];\n    }\n    \n    Explanation fieldNormExpl = Explanation.match(\n        norm,\n        \"fieldNorm(doc=\" + doc + \")\");\n\n    return Explanation.match(\n        tfExplanation.getValue() * fieldNormExpl.getValue(),\n        \"fieldWeight in \" + doc + \", product of:\",\n        tfExplanation, fieldNormExpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}