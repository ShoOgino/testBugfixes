{"path":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","sourceNew":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","sourceOld":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f83654246556082000bded885bde27a521bb31","date":1353427179,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","sourceNew":null,"sourceOld":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","sourceNew":null,"sourceOld":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f83654246556082000bded885bde27a521bb31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","95f83654246556082000bded885bde27a521bb31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95f83654246556082000bded885bde27a521bb31"]},"commit2Childs":{"95f83654246556082000bded885bde27a521bb31":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f83654246556082000bded885bde27a521bb31","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}