{"path":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(query, (Filter)null, results);\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createQueryWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(query, (Filter)null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createQueryWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acda98fa0904760da76bdf4c7b5ae2feca94a7db","date":1254608058,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acda98fa0904760da76bdf4c7b5ae2feca94a7db":["fe941135bdfc28c81e20b4d21422f8726af34925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["acda98fa0904760da76bdf4c7b5ae2feca94a7db"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"acda98fa0904760da76bdf4c7b5ae2feca94a7db":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe941135bdfc28c81e20b4d21422f8726af34925":["acda98fa0904760da76bdf4c7b5ae2feca94a7db"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}