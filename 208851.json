{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testDisableFSTOffHeap().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testDisableFSTOffHeap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testDisableFSTOffHeap().mjava","sourceNew":"  public void testDisableFSTOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = MMapDirectory.open(tempDir)) {\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random()))\n          .setReaderAttributes(Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name())))) {\n        assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertFalse(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n        w.forceMerge(1);\n        w.commit();\n      }\n      try (DirectoryReader r = DirectoryReader.open(d, Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name()))) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","sourceOld":"  public void testDisableFSTOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = MMapDirectory.open(tempDir)) {\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random()))\n          .setReaderAttributes(Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name())))) {\n        assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertFalse(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n        w.forceMerge(1);\n        w.commit();\n      }\n      try (DirectoryReader r = DirectoryReader.open(d, Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name()))) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testDisableFSTOffHeap().mjava","sourceNew":null,"sourceOld":"  public void testDisableFSTOffHeap() throws IOException {\n    Path tempDir = createTempDir();\n    try (Directory d = MMapDirectory.open(tempDir)) {\n      try (IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random()))\n          .setReaderAttributes(Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name())))) {\n        assumeTrue(\"only works with mmap directory\", d instanceof MMapDirectory);\n        DirectoryReader readerFromWriter = DirectoryReader.open(w);\n        for (int i = 0; i < 50; i++) {\n          Document doc = new Document();\n          doc.add(newStringField(\"id\", \"\" + i, Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (97 + i)), Field.Store.NO));\n          doc.add(newStringField(\"field\", Character.toString((char) (98 + i)), Field.Store.NO));\n          if (rarely()) {\n            w.addDocument(doc);\n          } else {\n            w.updateDocument(new Term(\"id\", \"\" + i), doc);\n          }\n          if (random().nextBoolean()) {\n            w.commit();\n          }\n          if (random().nextBoolean()) {\n            DirectoryReader newReader = DirectoryReader.openIfChanged(readerFromWriter);\n            if (newReader != null) {\n              readerFromWriter.close();\n              readerFromWriter = newReader;\n            }\n            for (LeafReaderContext leaf : readerFromWriter.leaves()) {\n              FieldReader field = (FieldReader) leaf.reader().terms(\"field\");\n              FieldReader id = (FieldReader) leaf.reader().terms(\"id\");\n              assertFalse(id.isFstOffHeap());\n              assertFalse(field.isFstOffHeap());\n            }\n          }\n        }\n        readerFromWriter.close();\n        w.forceMerge(1);\n        w.commit();\n      }\n      try (DirectoryReader r = DirectoryReader.open(d, Collections.singletonMap(BlockTreeTermsReader.FST_MODE_KEY, BlockTreeTermsReader.FSTLoadMode.ON_HEAP.name()))) {\n        assertEquals(1, r.leaves().size());\n        FieldReader field = (FieldReader) r.leaves().get(0).reader().terms(\"field\");\n        FieldReader id = (FieldReader) r.leaves().get(0).reader().terms(\"id\");\n        assertFalse(id.isFstOffHeap());\n        assertFalse(field.isFstOffHeap());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}