{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#checkUniqueDoc(SolrClient,String,String,String,boolean).mjava","commits":[{"id":"effba9f778a8e6ca3b492f58b4cbd0b8886c85a4","date":1569774343,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#checkUniqueDoc(SolrClient,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Helper for bandaid\n  private static void checkUniqueDoc(SolrClient client, String collection, String idField, String id, boolean shouldBeThere) throws IOException, SolrServerException {\n    TimeOut timeOut = new TimeOut(100, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    final SolrQuery solrQuery = new SolrQuery(idField + \":\" + id);\n\n    while (!timeOut.hasTimedOut()) {\n      QueryResponse rsp = client.query(collection, solrQuery);\n      long found = rsp.getResults().getNumFound();\n      if (shouldBeThere && found == 1) {\n        return;\n      }\n      if (shouldBeThere == false && found == 0) {\n        return;\n      }\n      log.warn(\"Solr11035BandAid should have succeeded in checkUniqueDoc, shouldBeThere == {}, numFound = {}. Will try again after 250 ms sleep\", shouldBeThere, found);\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        return; // just bail\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#checkUniqueDoc(SolrClient,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Helper for bandaid\n  private static void checkUniqueDoc(SolrClient client, String collection, String idField, String id, boolean shouldBeThere) throws IOException, SolrServerException {\n    TimeOut timeOut = new TimeOut(100, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    final SolrQuery solrQuery = new SolrQuery(idField + \":\" + id);\n\n    while (!timeOut.hasTimedOut()) {\n      QueryResponse rsp = client.query(collection, solrQuery);\n      long found = rsp.getResults().getNumFound();\n      if (shouldBeThere && found == 1) {\n        return;\n      }\n      if (shouldBeThere == false && found == 0) {\n        return;\n      }\n      log.warn(\"Solr11035BandAid should have succeeded in checkUniqueDoc, shouldBeThere == {}, numFound = {}. Will try again after 250 ms sleep\", shouldBeThere, found);\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        return; // just bail\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#checkUniqueDoc(SolrClient,String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  // Helper for bandaid\n  private static void checkUniqueDoc(SolrClient client, String collection, String idField, String id, boolean shouldBeThere) throws IOException, SolrServerException {\n    TimeOut timeOut = new TimeOut(100, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    final SolrQuery solrQuery = new SolrQuery(idField + \":\" + id);\n\n    while (!timeOut.hasTimedOut()) {\n      QueryResponse rsp = client.query(collection, solrQuery);\n      long found = rsp.getResults().getNumFound();\n      if (shouldBeThere && found == 1) {\n        return;\n      }\n      if (shouldBeThere == false && found == 0) {\n        return;\n      }\n      log.warn(\"Solr11035BandAid should have succeeded in checkUniqueDoc, shouldBeThere == {}, numFound = {}. Will try again after 250 ms sleep\", shouldBeThere, found);\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {\n        return; // just bail\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["effba9f778a8e6ca3b492f58b4cbd0b8886c85a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"effba9f778a8e6ca3b492f58b4cbd0b8886c85a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","effba9f778a8e6ca3b492f58b4cbd0b8886c85a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["effba9f778a8e6ca3b492f58b4cbd0b8886c85a4","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"effba9f778a8e6ca3b492f58b4cbd0b8886c85a4":["3821108e77348b1cdb6baf5422727f926ba7af61","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}