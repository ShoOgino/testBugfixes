{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext).mjava","commits":[{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext).mjava","sourceNew":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context, Map<String, String> readerAttributes) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context, readerAttributes);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext,Map[String,String]).mjava","sourceNew":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context, Map<String, String> readerAttributes) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context, readerAttributes);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,boolean,IOContext).mjava","sourceNew":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, boolean openedFromWriter, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      segment = si.info.name;\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, openedFromWriter, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasPointValues()) {\n        pointsReader = codec.pointsFormat().fieldsReader(segmentReadState);\n      } else {\n        pointsReader = null;\n      }\n      success = true;\n    } catch (EOFException | FileNotFoundException e) {\n      throw new CorruptIndexException(\"Problem reading index from \" + dir, dir.toString(), e);\n    } catch (NoSuchFileException e) {\n      throw new CorruptIndexException(\"Problem reading index.\", e.getFile(), e);\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}