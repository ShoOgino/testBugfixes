{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","sourceNew":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n  }\n\n","sourceOld":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","sourceNew":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      case \"PH_P\": hlImpl = new PostingsHLImpl(); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","sourceNew":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      case \"PH_P\": hlImpl = new PostingsHLImpl(); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","sourceNew":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      case \"PH_P\": hlImpl = new PostingsHLImpl(); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setup().mjava","sourceNew":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setup() throws Exception {\n    super.setup();\n    //check to make sure either the doc is being stored\n    PerfRunData data = getRunData();\n    if (data.getConfig().get(\"doc.stored\", false) == false){\n      throw new Exception(\"doc.stored must be set to true\");\n    }\n    maxDocCharsToAnalyze = data.getConfig().get(\"highlighter.maxDocCharsToAnalyze\", Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);\n    analyzer = data.getAnalyzer();\n    String type = this.type;\n    if (type == null) {\n      type = data.getConfig().get(\"highlighter\", null);\n    }\n    switch (type) {\n      case \"NONE\": hlImpl = new NoHLImpl(); break;\n      case \"SH_A\": hlImpl = new StandardHLImpl(false); break;\n      case \"SH_V\": hlImpl = new StandardHLImpl(true); break;\n\n      case \"FVH_V\": hlImpl = new FastVectorHLImpl(); break;\n\n      case \"UH\": hlImpl = new UnifiedHLImpl(null); break;\n      case \"UH_A\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.ANALYSIS); break;\n      case \"UH_V\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.TERM_VECTORS); break;\n      case \"UH_P\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS); break;\n      case \"UH_PV\": hlImpl = new UnifiedHLImpl(UnifiedHighlighter.OffsetSource.POSTINGS_WITH_TERM_VECTORS); break;\n\n      case \"PH_P\": hlImpl = new PostingsHLImpl(); break;\n\n      default: throw new Exception(\"unrecognized highlighter type: \" + type + \" (try 'UH')\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["141e140cd2260284f58cb5cf2b17da4027e82094"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["141e140cd2260284f58cb5cf2b17da4027e82094","381618eac2691bb34ab9a3fca76ad55c6274517e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"141e140cd2260284f58cb5cf2b17da4027e82094":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","141e140cd2260284f58cb5cf2b17da4027e82094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["141e140cd2260284f58cb5cf2b17da4027e82094","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"141e140cd2260284f58cb5cf2b17da4027e82094":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}