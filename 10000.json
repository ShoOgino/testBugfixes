{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopenOnCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(new KeepAllCommits()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+i, StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(0, r.numDocs());\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r, commit);\n      assertNotNull(r2);\n      assertTrue(r2 != r);\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}