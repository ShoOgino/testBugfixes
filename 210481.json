{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","commits":[{"id":"7ad1376d356a33e10b3b9b95708ddc83252499a6","date":1353008654,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ad1376d356a33e10b3b9b95708ddc83252499a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ae3be3418aea9954be27a83315087f67c0c2201e"],"ae3be3418aea9954be27a83315087f67c0c2201e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ad1376d356a33e10b3b9b95708ddc83252499a6","d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}