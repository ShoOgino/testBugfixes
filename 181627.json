{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","commits":[{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean,String).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuilder buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cdad2c6b6234338031bcc1f24c001a5ad66f714","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}