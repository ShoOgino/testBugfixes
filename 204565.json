{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // its okay if another beats us creating the node\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // its okay if another beats us creating the node\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // its okay if another beats us creating the node\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","sourceNew":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // it's okay if another beats us creating the node\n    }\n    \n  }\n\n","sourceOld":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // its okay if another beats us creating the node\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820caca5cfb0cdddf30483276ec437235352d916","date":1431698671,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","sourceNew":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, createMode, true);\n    } catch (NodeExistsException e) {\n      // it's okay if another beats us creating the node\n    }\n    \n  }\n\n","sourceOld":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, true);\n    } catch (NodeExistsException e) {\n      // it's okay if another beats us creating the node\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","sourceNew":"  public void ensureExists(String path, final byte[] data, CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ensureExists(path, data, createMode, zkClient, 0);\n  }\n\n","sourceOld":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, createMode, true);\n    } catch (NodeExistsException e) {\n      // it's okay if another beats us creating the node\n    }\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","820caca5cfb0cdddf30483276ec437235352d916","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ensureExists(String,byte[],CreateMode,SolrZkClient).mjava","sourceNew":"  public void ensureExists(String path, final byte[] data, CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ensureExists(path, data, createMode, zkClient, 0);\n  }\n\n","sourceOld":"  public void ensureExists(final String path, final byte[] data,\n      CreateMode createMode, final SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \n    if (zkClient.exists(path, true)) {\n      return;\n    }\n    try {\n      zkClient.makePath(path, data, createMode, true);\n    } catch (NodeExistsException e) {\n      // it's okay if another beats us creating the node\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["820caca5cfb0cdddf30483276ec437235352d916"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"820caca5cfb0cdddf30483276ec437235352d916":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["820caca5cfb0cdddf30483276ec437235352d916","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["820caca5cfb0cdddf30483276ec437235352d916"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"820caca5cfb0cdddf30483276ec437235352d916":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}