{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.shutdown();\n    writer2.shutdown();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.shutdown();\n    writer2.shutdown();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits.value); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random(), directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1, 0, 2, false);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}