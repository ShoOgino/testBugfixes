{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"/dev/null","sourceNew":"  // finalize currentDoc\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int v = currentValues[i];\n      // if its not a duplicate\n      if (v != lastValue) {\n        pending.add(v); // record the ord\n        count++;\n      }\n      lastValue = v;\n    }\n    // record the number of unique ords for this doc\n    pendingCounts.add(count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"780b011e6e552810161e3c859b4bc270f655f47e","date":1360554192,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int v = currentValues[i];\n      // if its not a duplicate\n      if (v != lastValue) {\n        pending.add(v); // record the ord\n        count++;\n      }\n      lastValue = v;\n    }\n    // record the number of unique ords for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","sourceOld":"  // finalize currentDoc\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int v = currentValues[i];\n      // if its not a duplicate\n      if (v != lastValue) {\n        pending.add(v); // record the ord\n        count++;\n      }\n      lastValue = v;\n    }\n    // record the number of unique ords for this doc\n    pendingCounts.add(count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"/dev/null","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int v = currentValues[i];\n      // if its not a duplicate\n      if (v != lastValue) {\n        pending.add(v); // record the ord\n        count++;\n      }\n      lastValue = v;\n    }\n    // record the number of unique ords for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55536992cfc5c87d8b7196c556d1b458afe1f840","date":1362267535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if its not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int v = currentValues[i];\n      // if its not a duplicate\n      if (v != lastValue) {\n        pending.add(v); // record the ord\n        count++;\n      }\n      lastValue = v;\n    }\n    // record the number of unique ords for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if its not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, currentDoc);\n    docsWithField.set(currentDoc);\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, currentDoc);\n    docsWithField.set(currentDoc);\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    currentDoc++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField.add(currentDoc);\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, currentDoc);\n    docsWithField.set(currentDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#finishCurrentDoc().mjava","sourceNew":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField.add(currentDoc);\n  }\n\n","sourceOld":"  // finalize currentDoc: this deduplicates the current term ids\n  private void finishCurrentDoc() {\n    if (currentDoc == -1) {\n      return;\n    }\n    Arrays.sort(currentValues, 0, currentUpto);\n    int lastValue = -1;\n    int count = 0;\n    for (int i = 0; i < currentUpto; i++) {\n      int termID = currentValues[i];\n      // if it's not a duplicate\n      if (termID != lastValue) {\n        pending.add(termID); // record the term id\n        count++;\n      }\n      lastValue = termID;\n    }\n    // record the number of unique term ids for this doc\n    pendingCounts.add(count);\n    maxCount = Math.max(maxCount, count);\n    currentUpto = 0;\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, currentDoc);\n    docsWithField.set(currentDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"5844844466689b1121b12ccb467623f894eb269d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"780b011e6e552810161e3c859b4bc270f655f47e":["f366ce28775e2b8ea4e06355009471328711666d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","780b011e6e552810161e3c859b4bc270f655f47e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","5844844466689b1121b12ccb467623f894eb269d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceec64003e8cc400e862d44c8589a41570432ab9"],"55536992cfc5c87d8b7196c556d1b458afe1f840":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["5844844466689b1121b12ccb467623f894eb269d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5844844466689b1121b12ccb467623f894eb269d":["ceec64003e8cc400e862d44c8589a41570432ab9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"780b011e6e552810161e3c859b4bc270f655f47e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f366ce28775e2b8ea4e06355009471328711666d":["780b011e6e552810161e3c859b4bc270f655f47e"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["55536992cfc5c87d8b7196c556d1b458afe1f840"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"55536992cfc5c87d8b7196c556d1b458afe1f840":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}