{"path":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"/dev/null","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","sourceNew":null,"sourceOld":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"/dev/null","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter#prepareReplaceBlock().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceCharFilter#prepareReplaceBlock().mjava","sourceNew":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","sourceOld":"  private boolean prepareReplaceBlock() throws IOException {\n    while( true ){\n      if( replaceBlockBuffer != null && replaceBlockBuffer.length() > replaceBlockBufferOffset )\n        return true;\n      // prepare block buffer\n      blockBufferLength = 0;\n      while( true ){\n        int c = nextChar();\n        if( c == -1 ) break;\n        blockBuffer[blockBufferLength++] = (char)c;\n        // end of block?\n        boolean foundDelimiter =\n          ( blockDelimiters != null ) &&\n          ( blockDelimiters.length() > 0 ) &&\n          blockDelimiters.indexOf( c ) >= 0;\n        if( foundDelimiter ||\n            blockBufferLength >= maxBlockChars ) break;\n      }\n      // block buffer available?\n      if( blockBufferLength == 0 ) return false;\n      replaceBlockBuffer = getReplaceBlock( blockBuffer, 0, blockBufferLength );\n      replaceBlockBufferOffset = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}