{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  //  @Ignore\n  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n//        \"    { cores :'<10', node :'#ANY'},\" +\n//        \"    { replica :'<2', shard:'#EACH' node:'#ANY'},\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n//    System.out.println(Utils.toJSONString(l.get(0)));\n//    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    /*assertEquals(1l,Utils.getObjectByPath(m,true,\"violation/violation/delta\"));\n    assertEquals(\"POST\",Utils.getObjectByPath(m,true,\"operation/method\"));\n    assertEquals(\"/c/mycoll1\",Utils.getObjectByPath(m,true,\"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m,false,\"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\",Utils.getObjectByPath(m,true,\"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\",Utils.getObjectByPath(m,true,\"operation/command/move-replica/replica\"));*/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"179b14362375bb921c76d7217b6c558ced472891","date":1509441077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  //  @Ignore\n  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n//        \"    { cores :'<10', node :'#ANY'},\" +\n//        \"    { replica :'<2', shard:'#EACH' node:'#ANY'},\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  //  @Ignore\n  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n//        \"    { cores :'<10', node :'#ANY'},\" +\n//        \"    { replica :'<2', shard:'#EACH' node:'#ANY'},\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n//    System.out.println(Utils.toJSONString(l.get(0)));\n//    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    /*assertEquals(1l,Utils.getObjectByPath(m,true,\"violation/violation/delta\"));\n    assertEquals(\"POST\",Utils.getObjectByPath(m,true,\"operation/method\"));\n    assertEquals(\"/c/mycoll1\",Utils.getObjectByPath(m,true,\"operation/path\"));\n    assertNotNull(Utils.getObjectByPath(m,false,\"operation/command/move-replica\"));\n    assertEquals(\"10.0.0.6:7574_solr\",Utils.getObjectByPath(m,true,\"operation/command/move-replica/targetNode\"));\n    assertEquals(\"core_node2\",Utils.getObjectByPath(m,true,\"operation/command/move-replica/replica\"));*/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  //  @Ignore\n  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n//        \"    { cores :'<10', node :'#ANY'},\" +\n//        \"    { replica :'<2', shard:'#EACH' node:'#ANY'},\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c7c6f6f0da6860cdb9281d465d7189825f0440f","date":1528775232,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd9806d2cef5f74400b2c18d3e38b8af25e8485","date":1531806022,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInBytes:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInBytes:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInBytes:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInBytes:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() throws IOException {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"improvement\", l.get(3)._get(\"type\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() throws IOException {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    Map m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    m = l.get(0).toMap(new LinkedHashMap<>());\n    assertEquals(\"r4\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(1).toMap(new LinkedHashMap<>());\n    assertEquals(\"r3\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n    m = l.get(2).toMap(new LinkedHashMap<>());\n    assertEquals(\"r2\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/replica\"));\n    assertEquals(\"node1\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(4, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"improvement\", l.get(3)._get(\"type\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  liveNodes:[node1,node2],\" +\n        \"  replicaInfo : {\" +\n        \"    node1:{},\" +\n        \"    node2:{mycoll1:{\" +\n        \"        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}],\" +\n        \"        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}],\" +\n        \"        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}],\" +\n        \"        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}\" +\n        \"    nodeValues : {\" +\n        \"    node1: { node : node1 , cores:0 , freedisk : 2000},\" +\n        \"    node2: { node : node2 , cores:4 , freedisk : 500}}}\";\n\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));\n    assertEquals(4, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"improvement\", l.get(3)._get(\"type\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"708ea19ea208d4e9fdbf203794aabf4fd2f8afed","date":1541319836,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(4, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"improvement\", l.get(3)._get(\"type\", null));\n\n\n  }\n\n","bugFix":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485","6428b274f6593f368c4f838379620e7f5d196d65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each-node ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each-node ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","sourceOld":"  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each-node ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testFreeDiskSuggestions().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testFreeDiskSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'0', freedisk:'<1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson = \"  { cluster-policy:[\" +\n          \"    { replica :'0', put:on-each-node ,   nodeset:{ freedisk:'<1000'}},\" +\n          \"    { replica :0, put : on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(500d, r.delta, 0.1);\n\n    }\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'#ALL', freedisk:'>1000'},\" +\n        \"    { nodeRole : overseer, replica :0}],\" +\n        \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    if(useNodeset){\n      autoScalingjson =  \"  { cluster-policy:[\" +\n          \"    { replica :'#ALL', nodeset:{ freedisk:'>1000'}},\" +\n          \"    { replica :0 , put: on-each-node , nodeset : {nodeRole : overseer}}],\" +\n          \"  cluster-preferences :[{ minimize : cores, precision : 2 }]}\";\n    }\n    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\"))).getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);\n    assertEquals(1, violations.size());\n    assertEquals(0, violations.get(0).getViolatingReplicas().size());\n\n    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData((Map) loadFromResource(\"testFreeDiskSuggestions.json\")));\n    assertEquals(3, l.size());\n    assertEquals(\"r4\", l.get(0)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r3\", l.get(1)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(1)._get(\"operation/command/move-replica/targetNode\", null));\n\n    assertEquals(\"r2\", l.get(2)._get(\"operation/command/move-replica/replica\", null));\n    assertEquals(\"node1\", l.get(2)._get(\"operation/command/move-replica/targetNode\", null));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"6428b274f6593f368c4f838379620e7f5d196d65":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"78231225260fb5b3bf9920f203d71477d5501c65":["8c7c6f6f0da6860cdb9281d465d7189825f0440f"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["179b14362375bb921c76d7217b6c558ced472891"],"179b14362375bb921c76d7217b6c558ced472891":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["52316373036b9f161a08896e7c9ebf4389790a47"],"8c7c6f6f0da6860cdb9281d465d7189825f0440f":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["f5a27e78e3d29dee02bab19ded25336471e96882"],"f5a27e78e3d29dee02bab19ded25336471e96882":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","8c7c6f6f0da6860cdb9281d465d7189825f0440f"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6428b274f6593f368c4f838379620e7f5d196d65":["f5a27e78e3d29dee02bab19ded25336471e96882"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8c7c6f6f0da6860cdb9281d465d7189825f0440f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"179b14362375bb921c76d7217b6c558ced472891":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"52316373036b9f161a08896e7c9ebf4389790a47":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7cd9806d2cef5f74400b2c18d3e38b8af25e8485"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["6428b274f6593f368c4f838379620e7f5d196d65"],"8c7c6f6f0da6860cdb9281d465d7189825f0440f":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["179b14362375bb921c76d7217b6c558ced472891"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"f5a27e78e3d29dee02bab19ded25336471e96882":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"7cd9806d2cef5f74400b2c18d3e38b8af25e8485":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}