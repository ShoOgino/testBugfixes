{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","commits":[{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ResourceAsStreamResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(\"solr/collection1\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ResourceAsStreamResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(\"solr/collection1\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ResourceAsStreamResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ResourceAsStreamResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ResourceAsStreamResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    Reader reader = new StringReader(\"GB\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Synonym\", \"synonyms\", \"synonyms.txt\").create(stream);\n    assertTrue(stream instanceof SynonymFilter);\n    assertTokenStreamContents(stream, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(getClass()));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testSynonyms().mjava","sourceNew":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    checkSolrSynonyms(tokenFilterFactory(\"Synonym\", \"synonyms\", \"synonyms.txt\"));\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file */\n  public void testSynonyms() throws Exception {\n    Reader reader = new StringReader(\"GB\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"Synonym\", \"synonyms\", \"synonyms.txt\").create(stream);\n    assertTrue(stream instanceof SynonymFilter);\n    assertTokenStreamContents(stream, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"85f3a2d749715373feb8529516e92d3538103525":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85f3a2d749715373feb8529516e92d3538103525"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["85f3a2d749715373feb8529516e92d3538103525"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"85f3a2d749715373feb8529516e92d3538103525":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}