{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Token token = new Token();\n\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n\n    final Token reusableToken = new Token();\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Token token = new Token();\n\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n\n    final Token reusableToken = new Token();\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    final Token reusableToken = new Token();\n    \n    Token token = new Token();\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n    ts.reset();\n\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n    \n    token = new Token(\"hallo\", 10, 20, \"someType\");\n    ts.setToken(token);\n    ts.reset();\n\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Token token = new Token();\n\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n\n    final Token reusableToken = new Token();\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Token token = new Token();\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n    AttributeImpl tokenAtt = (AttributeImpl) ts.addAttribute(TermAttribute.class);\n    assertTrue(tokenAtt instanceof Token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n    \n    token = new Token(\"hallo\", 10, 20, \"someType\");\n    ts.setToken(token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    final Token reusableToken = new Token();\n    \n    Token token = new Token();\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n    ts.reset();\n\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n    \n    token = new Token(\"hallo\", 10, 20, \"someType\");\n    ts.setToken(token);\n    ts.reset();\n\n    assertEquals(token, ts.next(reusableToken));\n    assertNull(ts.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestSingleTokenTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Token token = new Token();\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n    AttributeImpl tokenAtt = (AttributeImpl) ts.addAttribute(TermAttribute.class);\n    assertTrue(tokenAtt instanceof Token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n    \n    token = new Token(\"hallo\", 10, 20, \"someType\");\n    ts.setToken(token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Token token = new Token();\n    SingleTokenTokenStream ts = new SingleTokenTokenStream(token);\n    AttributeImpl tokenAtt = (AttributeImpl) ts.addAttribute(TermAttribute.class);\n    assertTrue(tokenAtt instanceof Token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n    \n    token = new Token(\"hallo\", 10, 20, \"someType\");\n    ts.setToken(token);\n    ts.reset();\n\n    assertTrue(ts.incrementToken());\n    assertEquals(token, tokenAtt);\n    assertFalse(ts.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}