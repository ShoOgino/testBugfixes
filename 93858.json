{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<IndexableField> fields = result.getFields();\n    for (final IndexableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<IndexableField> fields = result.getFields();\n    for (final IndexableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    StoredDocument result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<StorableField> fields = result.getFields();\n    for (final StorableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<IndexableField> fields = result.getFields();\n    for (final IndexableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    StoredDocument result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<StorableField> fields = result.getFields();\n    for (final StorableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<IndexableField> fields = result.getFields();\n    for (final IndexableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<IndexableField> fields = result.getFields();\n    for (final IndexableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    StoredDocument result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<StorableField> fields = result.getFields();\n    for (final StorableField field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}