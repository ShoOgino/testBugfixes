{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","commits":[{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}