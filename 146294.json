{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testNonDocValueFields().mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testNonDocValueFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonDocValueFields() {\n    // there is a copyField that will copy to the dv version of the field\n    assertU(adoc(\"id\", \"1\", \"test_s\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s\", \"cat\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.interval\", \"test_s_dv\",\n            \"facet.interval\", \"test_s_dv\", \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n        \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=3]\");\n\n    assertQEx(\"Interval Faceting only on fields with doc values\",\n        req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.interval\", \"test_s\",\n            \"f.test_s.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6d7fd8888854b7c6f30f35246057c92ddf5a750","date":1429938426,"type":4,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#testNonDocValueFields().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNonDocValueFields() {\n    // there is a copyField that will copy to the dv version of the field\n    assertU(adoc(\"id\", \"1\", \"test_s\", \"dog\"));\n    assertU(adoc(\"id\", \"2\", \"test_s\", \"cat\"));\n    assertU(adoc(\"id\", \"3\", \"test_s\", \"bird\"));\n    assertU(adoc(\"id\", \"4\", \"test_s\", \"cat\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.interval\", \"test_s_dv\",\n            \"facet.interval\", \"test_s_dv\", \"f.test_s_dv.facet.interval.set\", \"[cat,dog]\"),\n        \"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=3]\");\n\n    assertQEx(\"Interval Faceting only on fields with doc values\",\n        req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.interval\", \"test_s\",\n            \"f.test_s.facet.interval.set\", \"[cat,dog]\"),\n        SolrException.ErrorCode.BAD_REQUEST\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6d7fd8888854b7c6f30f35246057c92ddf5a750":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6d7fd8888854b7c6f30f35246057c92ddf5a750"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"a6d7fd8888854b7c6f30f35246057c92ddf5a750":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a6d7fd8888854b7c6f30f35246057c92ddf5a750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}