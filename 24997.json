{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {    \n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n        \n    // Always show the core lucene info\n    rsp.add(\"index\", getIndexInfo(reader, numTerms>0 ) );\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n        \n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n      \n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n      \n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      // If no doc is given, show all fields and top terms\n      Set<String> fields = null;\n      if( params.get( CommonParams.FL ) != null ) {\n        fields = new HashSet<String>();\n        for( String f : params.getParams( CommonParams.FL ) ) {\n          fields.add( f );\n        }\n      }\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms ) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" ); \n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a","date":1328740250,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    if( params.get( CommonParams.FL ) != null ) {\n      fields = new TreeSet<String>(Arrays.asList(params.getParams( CommonParams.FL )));\n    }\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc400bb5f8ac2f55f63b8ff9da8747399e29a07c","date":1328928945,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n    if( ShowStyle.SCHEMA == style ) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n    \n    if(ShowStyle.INDEX==style) {\n      return; // thats all we need\n    }\n        \n    \n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    if ( \"schema\".equals( params.get( \"show\" ))) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( \"schema\".equals( params.get( \"show\" ) ) ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","date":1329188942,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    int numTerms = params.getInt( NUMTERMS, DEFAULT_COUNT );\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // Always show the core lucene info\n    Map<String, TopTermQueue> topTerms = new TreeMap<String, TopTermQueue>();\n\n    // If no doc is given, show all fields and top terms\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n    if( ShowStyle.SCHEMA == style ) {\n      numTerms = 0; // Abort any statistics gathering.\n    }\n\n    rsp.add(\"index\", getIndexInfo(reader, numTerms, topTerms, fields ));\n    \n    if(ShowStyle.INDEX==style) {\n      return; // thats all we need\n    }\n        \n    \n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo( searcher, fields, numTerms, topTerms) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      StoredDocument doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      StoredDocument doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      StoredDocument doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      StoredDocument doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<Object>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<Object>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      Document doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    IndexSchema schema = req.getSchema();\n    SolrIndexSearcher searcher = req.getSearcher();\n    DirectoryReader reader = searcher.getIndexReader();\n    SolrParams params = req.getParams();\n    ShowStyle style = ShowStyle.get(params.get(\"show\"));\n\n    // If no doc is given, show all fields and top terms\n\n    rsp.add(\"index\", getIndexInfo(reader));\n\n    if(ShowStyle.INDEX==style) {\n      return; // that's all we need\n    }\n\n\n    Integer docId = params.getInt( DOC_ID );\n    if( docId == null && params.get( ID ) != null ) {\n      // Look for something with a given solr ID\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      String v = uniqueKey.getType().toInternal( params.get(ID) );\n      Term t = new Term( uniqueKey.getName(), v );\n      docId = searcher.getFirstMatch( t );\n      if( docId < 0 ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+params.get( ID ) );\n      }\n    }\n\n    // Read the document from the index\n    if( docId != null ) {\n      if( style != null && style != ShowStyle.DOC ) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing doc param for doc style\");\n      }\n      StoredDocument doc = null;\n      try {\n        doc = reader.document( docId );\n      }\n      catch( Exception ex ) {}\n      if( doc == null ) {\n        throw new SolrException( SolrException.ErrorCode.NOT_FOUND, \"Can't find document: \"+docId );\n      }\n\n      SimpleOrderedMap<Object> info = getDocumentFieldsInfo( doc, docId, reader, schema );\n\n      SimpleOrderedMap<Object> docinfo = new SimpleOrderedMap<>();\n      docinfo.add( \"docId\", docId );\n      docinfo.add( \"lucene\", info );\n      docinfo.add( \"solr\", doc );\n      rsp.add( \"doc\", docinfo );\n    }\n    else if ( ShowStyle.SCHEMA == style ) {\n      rsp.add( \"schema\", getSchemaInfo( req.getSchema() ) );\n    }\n    else {\n      rsp.add( \"fields\", getIndexedFieldsInfo(req) ) ;\n    }\n\n    // Add some generally helpful information\n    NamedList<Object> info = new SimpleOrderedMap<>();\n    info.add( \"key\", getFieldFlagsKey() );\n    info.add( \"NOTE\", \"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents.\" );\n    rsp.add( \"info\", info );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["fc400bb5f8ac2f55f63b8ff9da8747399e29a07c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["eb037ddbc4ef8b427189b9ca13486ea830d0c766","96d207426bd26fa5c1014e26d21d87603aea68b7"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1d028314cced5858683a1bb4741423d0f934257b":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc400bb5f8ac2f55f63b8ff9da8747399e29a07c":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"c26f00b574427b55127e869b935845554afde1fa":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["fc400bb5f8ac2f55f63b8ff9da8747399e29a07c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fc400bb5f8ac2f55f63b8ff9da8747399e29a07c":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}