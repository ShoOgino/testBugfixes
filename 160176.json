{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","commits":[{"id":"7d9def7b715c2324a9f84c1fc2e60a5c03c73331","date":1524626711,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","pathOld":"/dev/null","sourceNew":"  private String referencedByAlias(String collection, Aliases aliases) {\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","sourceNew":"  private String referencedByAlias(String collection, Aliases aliases) {\n    Objects.requireNonNull(aliases);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","sourceOld":"  private String referencedByAlias(String collection, Aliases aliases) {\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","sourceNew":"  public static String referencedByAlias(String collection, Aliases aliases) {\n    Objects.requireNonNull(aliases);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","sourceOld":"  private String referencedByAlias(String collection, Aliases aliases) {\n    Objects.requireNonNull(aliases);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","sourceNew":"  public static List<String> referencedByAlias(String extCollection, Aliases aliases) throws IllegalArgumentException {\n    Objects.requireNonNull(aliases);\n    // this quickly produces error if the name is a complex alias\n    String collection = aliases.resolveSimpleAlias(extCollection);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection) || e.getValue().contains(extCollection))\n        .map(Map.Entry::getKey) // alias name\n        .collect(Collectors.toList());\n  }\n\n","sourceOld":"  public static String referencedByAlias(String collection, Aliases aliases) {\n    Objects.requireNonNull(aliases);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection))\n        .map(Map.Entry::getKey) // alias name\n        .findFirst().orElse(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#referencedByAlias(String,Aliases).mjava","sourceNew":"  public static List<String> referencedByAlias(String extCollection, Aliases aliases, boolean followAliases) throws IllegalArgumentException {\n    Objects.requireNonNull(aliases);\n    // this quickly produces error if the name is a complex alias\n    String collection = followAliases ? aliases.resolveSimpleAlias(extCollection) : extCollection;\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> !e.getKey().equals(collection))\n        .filter(e -> e.getValue().contains(collection) || e.getValue().contains(extCollection))\n        .map(Map.Entry::getKey) // alias name\n        .collect(Collectors.toList());\n  }\n\n","sourceOld":"  public static List<String> referencedByAlias(String extCollection, Aliases aliases) throws IllegalArgumentException {\n    Objects.requireNonNull(aliases);\n    // this quickly produces error if the name is a complex alias\n    String collection = aliases.resolveSimpleAlias(extCollection);\n    return aliases.getCollectionAliasListMap().entrySet().stream()\n        .filter(e -> e.getValue().contains(collection) || e.getValue().contains(extCollection))\n        .map(Map.Entry::getKey) // alias name\n        .collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["7d9def7b715c2324a9f84c1fc2e60a5c03c73331"],"7d9def7b715c2324a9f84c1fc2e60a5c03c73331":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"7d9def7b715c2324a9f84c1fc2e60a5c03c73331":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d9def7b715c2324a9f84c1fc2e60a5c03c73331"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}