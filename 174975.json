{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#readInterval(String).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#readInterval(String).mjava","pathOld":"/dev/null","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#readInterval(String).mjava","pathOld":"/dev/null","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":4,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#readInterval(String).mjava","sourceNew":null,"sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}