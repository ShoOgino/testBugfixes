{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#],int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @param minWordSize only words longer than this get processed\n   * @param minSubwordSize only subwords longer than this get to the output\n   *        stream\n   * @param maxSubwordSize only subwords shorter than this get to the output\n   *        stream\n   * @param onlyLongestMatch Add only the longest matching subword to the stream\n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.\n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,\n      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,\n        onlyLongestMatch);\n\n    this.hyphenator = hyphenator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}