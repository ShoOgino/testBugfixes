{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESLICEUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESLICEUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(ZkStateReader.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESLICEUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESLICEUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(ZkStateReader.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(ZkStateReader.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESLICEUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESLICEUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(ZkStateReader.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(ZkStateReader.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#balanceProperty(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#balanceProperty(ZkNodeProps).mjava","sourceNew":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","sourceOld":"  private void balanceProperty(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) || StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The '\" + COLLECTION_PROP + \"' and '\" + PROPERTY_PROP +\n              \"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken\");\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, BALANCESHARDUNIQUE.toLower());\n    propMap.putAll(message.getProperties());\n    inQueue.offer(Utils.toJSON(new ZkNodeProps(propMap)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}