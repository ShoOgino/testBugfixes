{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(prior, readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(prior, readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73cb3e2c71d5364fdb924c39cf9d7d1a25991413","date":1400838672,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98b44240f64a2d6935543ff25faee750b29204eb","date":1424972040,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","43e3527ed736c46c0f0ab28181937b9de5ef7c63","a45bec74b98f6fc05f52770cfb425739e6563960"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } finally {\n            if (!success) {\n              IOUtils.closeWhileHandlingException(readers);\n            }\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit, Map<String, String> readerAttributes) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ, readerAttributes);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false, readerAttributes);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,Map[String,String]).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit, Map<String, String> readerAttributes) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ, readerAttributes);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false, readerAttributes);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["a45bec74b98f6fc05f52770cfb425739e6563960"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","98b44240f64a2d6935543ff25faee750b29204eb"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["68496c2200e559fb7802f7575427b7a482659afb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","98a04f56464afdffd4c430d6c47a0c868a38354e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68496c2200e559fb7802f7575427b7a482659afb":["98a04f56464afdffd4c430d6c47a0c868a38354e","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413","3384e6013a93e4d11b7d75388693f8d0388602bf"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["68496c2200e559fb7802f7575427b7a482659afb"],"98b44240f64a2d6935543ff25faee750b29204eb":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["98a04f56464afdffd4c430d6c47a0c868a38354e"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a45bec74b98f6fc05f52770cfb425739e6563960":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["73cb3e2c71d5364fdb924c39cf9d7d1a25991413"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"73cb3e2c71d5364fdb924c39cf9d7d1a25991413":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"68496c2200e559fb7802f7575427b7a482659afb":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["98a04f56464afdffd4c430d6c47a0c868a38354e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98b44240f64a2d6935543ff25faee750b29204eb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"98b44240f64a2d6935543ff25faee750b29204eb":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}