{"path":"solr/core/src/test/org/apache/solr/cloud/TestLazySolrCluster#test().mjava","commits":[{"id":"48499be433b284c562fb2418fe7b858e1ac3b031","date":1597289664,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLazySolrCluster#test().mjava","pathOld":"/dev/null","sourceNew":"    public void test() throws Exception {\n        CloudSolrClient cloudClient = cluster.getSolrClient();\n        String collection = \"testLazyCluster1\";\n        cloudClient.request(CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 2));\n        cluster.waitForActiveCollection(collection, 2, 4);\n        collection = \"testLazyCluster2\";\n        cloudClient.request(CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 2));\n        cluster.waitForActiveCollection(collection, 2, 4);\n\n        LazySolrCluster solrCluster = new LazySolrCluster(cluster.getSolrClient().getZkStateReader());\n        SimpleMap<SolrCollection> colls = solrCluster.collections();\n\n        SolrCollection c = colls.get(\"testLazyCluster1\");\n        assertNotNull(c);\n        c = colls.get(\"testLazyCluster2\");\n        assertNotNull(c);\n        int[] count = new int[1];\n        solrCluster.collections().forEachEntry((s, solrCollection) -> count[0]++);\n        assertEquals(2, count[0]);\n\n        count[0] = 0;\n\n        assertEquals(2, solrCluster.collections().get(\"testLazyCluster1\").shards().size());\n        solrCluster.collections().get(\"testLazyCluster1\").shards()\n                .forEachEntry((s, shard) -> shard.replicas().forEachEntry((s1, replica) -> count[0]++));\n        assertEquals(4, count[0]);\n\n        assertEquals(5, solrCluster.nodes().size());\n        SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + \"/conf1/a\", null, CreateMode.PERSISTENT, true);\n        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + \"/conf1/a/aa1\", new byte[1024], CreateMode.PERSISTENT, true);\n        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + \"/conf1/a/aa2\", new byte[1024 * 2], CreateMode.PERSISTENT, true);\n\n        List<String> allFiles =  new ArrayList<>();\n        byte[] buf = new byte[3*1024];\n        CollectionConfig conf1 = solrCluster.configs().get(\"conf1\");\n        conf1.resources().abortableForEach((s, resource) -> {\n            allFiles.add(s);\n            if(\"a/aa1\".equals(s)) {\n                resource.get(is -> assertEquals(1024,  is.read(buf)));\n            }\n            if(\"a/aa2\".equals(s)) {\n                resource.get(is -> assertEquals(2*1024,  is.read(buf)));\n            }\n            if(\"a\".equals(s)) {\n                resource.get(is -> assertEquals(-1, is.read()));\n            }\n            return Boolean.TRUE;\n        });\n        assertEquals(5, allFiles.size());\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48499be433b284c562fb2418fe7b858e1ac3b031":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48499be433b284c562fb2418fe7b858e1ac3b031"]},"commit2Childs":{"48499be433b284c562fb2418fe7b858e1ac3b031":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48499be433b284c562fb2418fe7b858e1ac3b031"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}