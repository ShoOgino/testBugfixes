{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,ValueType,boolean,int).mjava","commits":[{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,ValueType,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link IndexDocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link ValueType} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link IndexDocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, ValueType type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,ValueType,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link IndexDocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link ValueType} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link IndexDocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, ValueType type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#create(String,ValueType,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link IndexDocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link ValueType} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link IndexDocValues}\n   */\n  public static DVAllGroupsCollector create(String groupField, ValueType type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        return new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        return new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        return new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4739c84c362b9673ab5ed3e038ff760c718c30c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["4739c84c362b9673ab5ed3e038ff760c718c30c8","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"4739c84c362b9673ab5ed3e038ff760c718c30c8":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}