{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37613a160ee76150f3c7800fabfb95897c61e1b4","date":1366057929,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","date":1398363135,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return inOrder == other.inOrder;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return inOrder == other.inOrder;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object other) {\n      return sameClassAs(other) &&\n             equalsTo(getClass().cast(other));\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return inOrder == other.inOrder;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object other) {\n      return sameClassAs(other) &&\n             equalsTo(getClass().cast(other));\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n      if (!super.equals(obj)) {\n        return false;\n      }\n      ComplexPhraseQuery other = (ComplexPhraseQuery) obj;\n      if (field == null) {\n        if (other.field != null)\n          return false;\n      } else if (!field.equals(other.field))\n        return false;\n      if (phrasedQueryStringContents == null) {\n        if (other.phrasedQueryStringContents != null)\n          return false;\n      } else if (!phrasedQueryStringContents\n          .equals(other.phrasedQueryStringContents))\n        return false;\n      if (slopFactor != other.slopFactor)\n        return false;\n      return inOrder == other.inOrder;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["37613a160ee76150f3c7800fabfb95897c61e1b4","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["37613a160ee76150f3c7800fabfb95897c61e1b4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"],"37613a160ee76150f3c7800fabfb95897c61e1b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37613a160ee76150f3c7800fabfb95897c61e1b4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"37613a160ee76150f3c7800fabfb95897c61e1b4":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}