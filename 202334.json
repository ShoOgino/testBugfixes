{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","commits":[{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","pathOld":"/dev/null","sourceNew":"    // Go through the list of presently-hosted proeprties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","pathOld":"/dev/null","sourceNew":"    // Go through the list of presently-hosted proeprties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","sourceNew":"    // Go through the list of presently-hosted properties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","sourceOld":"    // Go through the list of presently-hosted proeprties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","sourceNew":"    // Go through the list of presently-hosted properties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","sourceOld":"    // Go through the list of presently-hosted proeprties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","sourceNew":null,"sourceOld":"    // Go through the list of presently-hosted properties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","sourceNew":null,"sourceOld":"    // Go through the list of presently-hosted properties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#removeOverallocatedReplicas().mjava","sourceNew":null,"sourceOld":"    // Go through the list of presently-hosted proeprties and remove any that have too many replicas that host the property\n    private void removeOverallocatedReplicas() {\n      tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n      tmpModulo = origModulo;\n\n      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingProp.entrySet()) {\n        while (ent.getValue().size() > tmpMaxPropPerNode) { // remove delta nodes\n          ent.getValue().remove(rand.nextInt(ent.getValue().size()));\n        }\n        adjustLimits(ent.getValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","5886c3d78997b0c3f9151247c967e32a8529c59e"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["64707d25b6352cf02909d3916038a3b3cec7f0a8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["64707d25b6352cf02909d3916038a3b3cec7f0a8","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["64707d25b6352cf02909d3916038a3b3cec7f0a8"]},"commit2Childs":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}