{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29e66165c8c36fbd9967747d27b165761c55081","date":1542486027,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1, Integer.MAX_VALUE);\n    searcher.search(tq, collector);\n    TopDocs tTopDocs = collector.topDocs();\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of LegacyNumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq= LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n        NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits.value );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e29e66165c8c36fbd9967747d27b165761c55081":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29e66165c8c36fbd9967747d27b165761c55081"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e29e66165c8c36fbd9967747d27b165761c55081"],"e29e66165c8c36fbd9967747d27b165761c55081":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}