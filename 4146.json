{"path":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(StandardCharsets.UTF_8)));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(StandardCharsets.UTF_8)));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public static String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7116474e2e390259937401cf928323e0cbc75e60","9d3d365762604952e436b51980101dfc84cc1b3e"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","7116474e2e390259937401cf928323e0cbc75e60"],"9d3d365762604952e436b51980101dfc84cc1b3e":["7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7116474e2e390259937401cf928323e0cbc75e60":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","9d3d365762604952e436b51980101dfc84cc1b3e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}