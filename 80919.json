{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n\n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n\n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantIntTest().mjava","sourceNew":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n\n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n\n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3bd4c6955956e76c96eb12dfe64108ed03522983","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["3bd4c6955956e76c96eb12dfe64108ed03522983","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["628903f37b6c442da0d390db1c6af9a0e74d41a7","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["1e4e64b7199d2f2a17be7f3926c7532553910dce","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}