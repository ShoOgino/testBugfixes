{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","commits":[{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":1,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    \n    // fingerprint should really be requested only for the maxversion  we are requesting updates for\n    // In case updates are coming in while node is coming up after restart, node would have already\n    // buffered some of the updates. fingerprint we requested with versions would reflect versions\n    // in our buffer as well and will definitely cause a mismatch\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Requesting updates from {} n={} versions={}\", msg(), replica, totalUpdates, versionsAndRanges);\n    }\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n\n    sreq.params.set(\"fingerprint\",doFingerprint);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e511b092029d56e0d4e30204fba8509c1c2647b6"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"01624b85de12fb02335810bdf325124e59040772":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["01624b85de12fb02335810bdf325124e59040772","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["01624b85de12fb02335810bdf325124e59040772"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["01624b85de12fb02335810bdf325124e59040772","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e511b092029d56e0d4e30204fba8509c1c2647b6"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["740d649f013f07efbeb73ca854f106c60166e7c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}