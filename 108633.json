{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.doc == null) {\n        termsWriter.doc = termsWriter.getPerDoc();\n        termsWriter.doc.docID = docState.docID;\n        assert termsWriter.doc.numVectorFields == 0;\n        assert 0 == termsWriter.doc.perDocTvf.length();\n        assert 0 == termsWriter.doc.perDocTvf.getFilePointer();\n      } else {\n        assert termsWriter.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.doc == null) {\n        termsWriter.doc = termsWriter.getPerDoc();\n        termsWriter.doc.docID = docState.docID;\n        assert termsWriter.doc.numVectorFields == 0;\n        assert 0 == termsWriter.doc.perDocTvf.length();\n        assert 0 == termsWriter.doc.perDocTvf.getFilePointer();\n      } else {\n        assert termsWriter.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b852c2640a2b634ad26fa5ec5ad9948c63718615","date":1285148689,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.numPostings != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.numPostings != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba55720b69e79b42960ddcde40c19fe27049f5ad","date":1298394897,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsWriter.tvx != null) {\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1414bb9669ffe06a89e46b889729f2e2588081","date":1304006610,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n        if (termsHashPerField.bytesHash.size() != 0) {\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n        }\n      }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.perDocTvf.length();\n        assert 0 == perThread.doc.perDocTvf.getFilePointer();\n      }\n\n      assert perThread.doc.docID == docState.docID;\n\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n        perThread.termsHashPerThread.reset(false);\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(IndexableField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.indexed() && field.storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.storeTermVectorPositions();\n        doVectorOffsets |= field.storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["b852c2640a2b634ad26fa5ec5ad9948c63718615"],"b852c2640a2b634ad26fa5ec5ad9948c63718615":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1b1414bb9669ffe06a89e46b889729f2e2588081":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","1b1414bb9669ffe06a89e46b889729f2e2588081"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["ba55720b69e79b42960ddcde40c19fe27049f5ad"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ba55720b69e79b42960ddcde40c19fe27049f5ad":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"b852c2640a2b634ad26fa5ec5ad9948c63718615":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"1b1414bb9669ffe06a89e46b889729f2e2588081":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ba55720b69e79b42960ddcde40c19fe27049f5ad"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["1b1414bb9669ffe06a89e46b889729f2e2588081"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba55720b69e79b42960ddcde40c19fe27049f5ad":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b852c2640a2b634ad26fa5ec5ad9948c63718615","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}