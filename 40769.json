{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"/dev/null","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da2f2a304f8441e97082e3687207cd090e6b7040","date":1472324956,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrServerException ex) {\n      assertTrue(ex.getCause() instanceof RemoteSolrException);\n      assertEquals(ErrorCode.SERVER_ERROR.code, ((RemoteSolrException)ex.getCause()).code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"/dev/null","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da2f2a304f8441e97082e3687207cd090e6b7040"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"da2f2a304f8441e97082e3687207cd090e6b7040":["4c623a7f72be34d6c45bee682028c50327d9e4b7"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","da2f2a304f8441e97082e3687207cd090e6b7040"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"da2f2a304f8441e97082e3687207cd090e6b7040":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}