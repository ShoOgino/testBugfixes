{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    if (cluster.getClusterStateProvider().getLiveNodes().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getClusterStateProvider().getLiveNodes().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        String node = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n        cluster.getSimClusterStateProvider().simRemoveNode(node);\n      }\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    if (cluster.getClusterStateProvider().getLiveNodes().size() > NODE_COUNT) {\n      // stop some to get to original state\n      int numJetties = cluster.getClusterStateProvider().getLiveNodes().size();\n      for (int i = 0; i < numJetties - NODE_COUNT; i++) {\n        String node = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n        cluster.getSimClusterStateProvider().simRemoveNode(node);\n      }\n    }\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a4422b331d00607258b0ed3e43934306e67764aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}