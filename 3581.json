{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","commits":[{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"/dev/null","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          c = parameterTypes[2];\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          c = parameterTypes[2];\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          c = parameterTypes[2];\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          c = parameterTypes[2];\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"/dev/null","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"856d72a5f63c995cad4c6fd92b7c121aa140285c","date":1572845901,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      mapper.setAnnotationIntrospector(SolrJacksonAnnotationInspector.INSTANCE);\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9078f4e5bb7161ccc52a756c7a834964c75f4559","date":1573620709,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      mapper.setAnnotationIntrospector(SolrJacksonAnnotationInspector.INSTANCE);\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(String command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"9078f4e5bb7161ccc52a756c7a834964c75f4559":["856d72a5f63c995cad4c6fd92b7c121aa140285c"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["9078f4e5bb7161ccc52a756c7a834964c75f4559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4505d603fb135c5279b5c6b1fc375feeeff582f1"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"9078f4e5bb7161ccc52a756c7a834964c75f4559":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["9078f4e5bb7161ccc52a756c7a834964c75f4559"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["856d72a5f63c995cad4c6fd92b7c121aa140285c","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}