{"path":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","commits":[{"id":"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d","date":1152816469,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      Object tmp;\n        \n      tmp = args.get(FL);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fl = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FL);\n        }\n      }\n\n      tmp = args.get(DF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          df = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + DF);\n        }\n      }\n\n      tmp = args.get(DEBUG_QUERY);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          debugQuery = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + DEBUG_QUERY);\n        }\n      }\n\n      tmp = args.get(EXPLAIN_OTHER);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          explainOther = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + EXPLAIN_OTHER);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          // Any non-empty string other than 'false' implies highlighting\n          String val = tmp.toString().trim();\n          highlight = !(val.equals(\"\") || val.equals(\"false\"));\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT_FIELDS);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          highlightFields = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT);\n        }\n      }\n\n      tmp = args.get(MAX_SNIPPETS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          maxSnippets = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + MAX_SNIPPETS);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT_FORMATTER_CLASS);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          highlightFormatterClass = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT_FORMATTER_CLASS);\n        }\n      }\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        // Any non-empty string other than 'false' implies highlighting\n        String val = tmp.toString().trim();\n        highlight = !(val.equals(\"\") || val.equals(\"false\"));\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT_FIELDS);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        highlightFields = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT);\n      }\n    }\n\n    tmp = args.get(SolrParams.MAX_SNIPPETS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        maxSnippets = ((Integer)tmp).intValue();\n      } else {\n        SolrCore.log.severe(\"init param is not an int: \" + SolrParams.MAX_SNIPPETS);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT_FORMATTER_CLASS);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        highlightFormatterClass = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT_FORMATTER_CLASS);\n      }\n    }\n\n  }\n\n","sourceOld":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      Object tmp;\n        \n      tmp = args.get(FL);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fl = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FL);\n        }\n      }\n\n      tmp = args.get(DF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          df = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + DF);\n        }\n      }\n\n      tmp = args.get(DEBUG_QUERY);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          debugQuery = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + DEBUG_QUERY);\n        }\n      }\n\n      tmp = args.get(EXPLAIN_OTHER);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          explainOther = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + EXPLAIN_OTHER);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          // Any non-empty string other than 'false' implies highlighting\n          String val = tmp.toString().trim();\n          highlight = !(val.equals(\"\") || val.equals(\"false\"));\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT_FIELDS);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          highlightFields = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT);\n        }\n      }\n\n      tmp = args.get(MAX_SNIPPETS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          maxSnippets = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + MAX_SNIPPETS);\n        }\n      }\n\n      tmp = args.get(HIGHLIGHT_FORMATTER_CLASS);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          highlightFormatterClass = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + HIGHLIGHT_FORMATTER_CLASS);\n        }\n      }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432bbfd5420aee0af11e0a09481aa602f72529c1","date":1172131124,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        // Any non-empty string other than 'false' implies highlighting\n        String val = tmp.toString().trim();\n        highlight = !(val.equals(\"\") || val.equals(\"false\"));\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT_FIELDS);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        highlightFields = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT);\n      }\n    }\n\n    tmp = args.get(SolrParams.MAX_SNIPPETS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        maxSnippets = ((Integer)tmp).intValue();\n      } else {\n        SolrCore.log.severe(\"init param is not an int: \" + SolrParams.MAX_SNIPPETS);\n      }\n    }\n\n    tmp = args.get(SolrParams.HIGHLIGHT_FORMATTER_CLASS);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        highlightFormatterClass = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.HIGHLIGHT_FORMATTER_CLASS);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"44f497c313977be641ddf24aab74b30e6de834d8":["1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["432bbfd5420aee0af11e0a09481aa602f72529c1"],"432bbfd5420aee0af11e0a09481aa602f72529c1":["44f497c313977be641ddf24aab74b30e6de834d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"44f497c313977be641ddf24aab74b30e6de834d8":["432bbfd5420aee0af11e0a09481aa602f72529c1"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"432bbfd5420aee0af11e0a09481aa602f72529c1":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d"],"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d":["44f497c313977be641ddf24aab74b30e6de834d8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}