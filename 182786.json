{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesAlloc += blockSize;\n          b = new byte[blockSize];\n        } else\n          b = freeByteBlocks.remove(size-1);\n        if (trackAllocations)\n          numBytesUsed += blockSize;\n        assert numBytesUsed <= numBytesAlloc;\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock() {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    byte[] getByteBlock(boolean trackAllocations) {\n      synchronized(DocumentsWriter.this) {\n        final int size = freeByteBlocks.size();\n        final byte[] b;\n        if (0 == size) {\n          b = new byte[blockSize];\n          // Always record a block allocated, even if\n          // trackAllocations is false.  This is necessary\n          // because this block will be shared between\n          // things that don't track allocations (term\n          // vectors) and things that do (freq/prox\n          // postings).\n          numBytesUsed += blockSize;\n        } else\n          b = freeByteBlocks.remove(size-1);\n        return b;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}