{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","commits":[{"id":"1fe9452de26a70442324c5bdc5a5a333e55f07db","date":1333912637,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"/dev/null","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(\"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(\"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(\"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(\"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(\"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07bc5b253e2373a655fc734d650af4ac46c8614","date":1386093923,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.charAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto++;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#escape(String).mjava","sourceNew":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.charAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto++;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String escape(String s) {\n    int charUpto = 0;\n    final StringBuilder sb = new StringBuilder();\n    while (charUpto < s.length()) {\n      final int c = s.codePointAt(charUpto);\n      if (c == 0xa) {\n        // Strangely, you cannot put \\ u000A into Java\n        // sources (not in a comment nor a string\n        // constant)...:\n        sb.append(\"\\\\n\");\n      } else if (c == 0xd) {\n        // ... nor \\ u000D:\n        sb.append(\"\\\\r\");\n      } else if (c == '\"') {\n        sb.append(\"\\\\\\\"\");\n      } else if (c == '\\\\') {\n        sb.append(\"\\\\\\\\\");\n      } else if (c >= 0x20 && c < 0x80) {\n        sb.append((char) c);\n      } else {\n        // TODO: we can make ascii easier to read if we\n        // don't escape...\n        sb.append(String.format(Locale.ROOT, \"\\\\u%04x\", c));\n      }\n      charUpto += Character.charCount(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07bc5b253e2373a655fc734d650af4ac46c8614":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["1fe9452de26a70442324c5bdc5a5a333e55f07db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["1fe9452de26a70442324c5bdc5a5a333e55f07db","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2acf500f78aa12b92e371fd89c719291986b6b90","b07bc5b253e2373a655fc734d650af4ac46c8614"],"2acf500f78aa12b92e371fd89c719291986b6b90":["1fe9452de26a70442324c5bdc5a5a333e55f07db","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"1fe9452de26a70442324c5bdc5a5a333e55f07db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b07bc5b253e2373a655fc734d650af4ac46c8614"],"46d8ada1fff8d18cb197c38c7983225162599948":["1fe9452de26a70442324c5bdc5a5a333e55f07db","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b07bc5b253e2373a655fc734d650af4ac46c8614":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fe9452de26a70442324c5bdc5a5a333e55f07db"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b07bc5b253e2373a655fc734d650af4ac46c8614","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","46d8ada1fff8d18cb197c38c7983225162599948"],"1fe9452de26a70442324c5bdc5a5a333e55f07db":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}