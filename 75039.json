{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#reset(IntBlockTermState).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#reset(IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public PostingsEnum reset(IntBlockTermState termState) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsPostingsEnum#BlockImpactsPostingsEnum(FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockPostingsEnum#reset(IntBlockTermState).mjava","sourceNew":"    public BlockImpactsPostingsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene50PostingsReader.this.docIn.clone();\n\n      encoded = new byte[MAX_ENCODED_SIZE];\n\n      this.posIn = Lucene50PostingsReader.this.posIn.clone();\n\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      totalTermFreq = termState.totalTermFreq;\n      docIn.seek(docTermStartFP);\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene50ScoreSkipReader(version,\n          docIn.clone(),\n          MAX_SKIP_LEVELS,\n          true,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(docTermStartFP+termState.skipOffset, docTermStartFP, posTermStartFP, payTermStartFP, docFreq);\n    }\n\n","sourceOld":"    public PostingsEnum reset(IntBlockTermState termState) throws IOException {\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}