{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForAllNodes(int numServers, int timeout) throws IOException, InterruptedException {\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      int numliveNodes = 0;\n      int retries = timeout;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to {timeout} seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n    catch (KeeperException e) {\n      throw new IOException(\"Error communicating with zookeeper\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForAllNodes(int numServers, int timeout) throws IOException, InterruptedException {\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      int numliveNodes = 0;\n      int retries = timeout;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to {timeout} seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n    catch (KeeperException e) {\n      throw new IOException(\"Error communicating with zookeeper\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForAllNodes(int numServers, int timeout) throws IOException, InterruptedException {\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      int numliveNodes = 0;\n      int retries = timeout;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to {timeout} seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n    catch (KeeperException e) {\n      throw new IOException(\"Error communicating with zookeeper\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForAllNodes(int numServers, int timeout) throws IOException, InterruptedException {\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      int numliveNodes = 0;\n      int retries = timeout;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to {timeout} seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n    catch (KeeperException e) {\n      throw new IOException(\"Error communicating with zookeeper\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","sourceNew":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    executorLauncher.shutdown();\n    \n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void waitForAllNodes(int numServers, int timeout) throws IOException, InterruptedException {\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      int numliveNodes = 0;\n      int retries = timeout;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to {timeout} seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n    catch (KeeperException e) {\n      throw new IOException(\"Error communicating with zookeeper\", e);\n    }\n  }\n\n","bugFix":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"040bf6d317e5bde94816bd7fe6eb0ed324306e2a","date":1544756375,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","sourceNew":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    executorLauncher.shutdown();\n    \n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","date":1544802186,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","sourceNew":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    executorLauncher.shutdown();\n    \n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int,int).mjava","sourceNew":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    log.info(\"waitForAllNodes: numServers={}\", numServers);\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","sourceOld":"  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {\n    \n    int numRunning = 0;\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    while (true) {\n      if (timeout.hasTimedOut()) {\n        throw new IllegalStateException(\"giving up waiting for all jetty instances to be running. numServers=\" + numServers\n            + \" numRunning=\" + numRunning);\n      }\n      numRunning = 0;\n      for (JettySolrRunner jetty : getJettySolrRunners()) {\n        if (jetty.isRunning()) {\n          numRunning++;\n        }\n      }\n      if (numServers == numRunning) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    ZkStateReader reader = getSolrClient().getZkStateReader();\n    for (JettySolrRunner jetty : getJettySolrRunners()) {\n      reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["b06f42faae0ab79dde1a569756990bb96283580d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}