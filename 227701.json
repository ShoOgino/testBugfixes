{"path":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newRangeQuery(String,long,long).mjava","commits":[{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newRangeQuery(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newRangeQuery(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newSlowRangeQuery(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newRangeQuery(String,long,long).mjava","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newSlowRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newSlowRangeQuery(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/NumericDocValuesField#newRangeQuery(String,long,long).mjava","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newSlowRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Long.MIN_VALUE} or {@code upperValue = Long.MAX_VALUE}. \n   * <p>\n   * Ranges are inclusive. For exclusive ranges, pass {@code Math.addExact(lowerValue, 1)}\n   * or {@code Math.addExact(upperValue, -1)}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link LongPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field, long lowerValue, long upperValue) {\n    return new SortedNumericDocValuesRangeQuery(field, lowerValue, upperValue) {\n      @Override\n      SortedNumericDocValues getValues(LeafReader reader, String field) throws IOException {\n        NumericDocValues values = reader.getNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n        return DocValues.singleton(values);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5a412a7808b2815566cb17117ebe6638112b9a31","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["5a412a7808b2815566cb17117ebe6638112b9a31"],"5a412a7808b2815566cb17117ebe6638112b9a31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9970073fd3c04efd7374f975e45a61084b169ce9"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5a412a7808b2815566cb17117ebe6638112b9a31":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}