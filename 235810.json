{"path":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","commits":[{"id":"58b7d514802707ef41cd8af2cb73c6c0e1aa948d","date":1205845947,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86dee79e60d6383c5eb9325aac82cf88813329be","date":1216955904,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["86dee79e60d6383c5eb9325aac82cf88813329be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"86dee79e60d6383c5eb9325aac82cf88813329be":["58b7d514802707ef41cd8af2cb73c6c0e1aa948d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58b7d514802707ef41cd8af2cb73c6c0e1aa948d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["58b7d514802707ef41cd8af2cb73c6c0e1aa948d"],"86dee79e60d6383c5eb9325aac82cf88813329be":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"58b7d514802707ef41cd8af2cb73c6c0e1aa948d":["86dee79e60d6383c5eb9325aac82cf88813329be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}