{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#encodeFlagsWithHash(BytesRef,char[]).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#encodeFlagsWithHash(BytesRef,char[]).mjava","pathOld":"/dev/null","sourceNew":"  static int encodeFlagsWithHash(BytesRef b, char flags[]) {\n    int hash = 0;\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      hash = 31*hash + (b.bytes[upto++] = (byte) ((flag >> 8) & 0xff));\n      hash = 31*hash + (b.bytes[upto++] = (byte) (flag & 0xff));\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#encodeFlagsWithHash(BytesRef,char[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#encodeFlagsWithHash(BytesRef,char[]).mjava","sourceNew":"  static int encodeFlagsWithHash(BytesRef b, char flags[]) {\n    int hash = 0;\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      hash = 31*hash + (b.bytes[upto++] = (byte) ((flag >> 8) & 0xff));\n      hash = 31*hash + (b.bytes[upto++] = (byte) (flag & 0xff));\n    }\n    return hash;\n  }\n\n","sourceOld":"  static int encodeFlagsWithHash(BytesRef b, char flags[]) {\n    int hash = 0;\n    int len = flags.length << 1;\n    b.grow(len);\n    b.length = len;\n    int upto = b.offset;\n    for (int i = 0; i < flags.length; i++) {\n      int flag = flags[i];\n      hash = 31*hash + (b.bytes[upto++] = (byte) ((flag >> 8) & 0xff));\n      hash = 31*hash + (b.bytes[upto++] = (byte) (flag & 0xff));\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}