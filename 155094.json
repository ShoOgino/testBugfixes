{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","commits":[{"id":"a684698d2d785b642cc0dda9c81091abc2bd90b5","date":1078844108,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @param wordfile File containing the wordlist\n\t */\n\tpublic static Hashtable getWordtable( File wordfile )\n\t{\n\t\tif ( wordfile == null )\n\t\t{\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry\n\t\t{\n\t\t\tLineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null )\n\t\t\t{\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length )\n\t\t\t\t{\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount-1] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t\t// On error, use an empty table\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9","date":1078974336,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile File containing the wordlist\n   */\n  public static HashMap getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new HashMap();\n    }\n    HashMap result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n        // On error, use an empty table\n    catch (IOException e) {\n      result = new HashMap();\n    }\n    return result;\n  }\n\n","sourceOld":"\t/**\n\t * @param wordfile File containing the wordlist\n\t */\n\tpublic static Hashtable getWordtable( File wordfile )\n\t{\n\t\tif ( wordfile == null )\n\t\t{\n\t\t\treturn new Hashtable();\n\t\t}\n\t\tHashtable result = null;\n\t\ttry\n\t\t{\n\t\t\tLineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n\t\t\tString word = null;\n\t\t\tString[] stopwords = new String[100];\n\t\t\tint wordcount = 0;\n\t\t\twhile ( ( word = lnr.readLine() ) != null )\n\t\t\t{\n\t\t\t\twordcount++;\n\t\t\t\tif ( wordcount == stopwords.length )\n\t\t\t\t{\n\t\t\t\t\tString[] tmp = new String[stopwords.length + 50];\n\t\t\t\t\tSystem.arraycopy( stopwords, 0, tmp, 0, wordcount );\n\t\t\t\t\tstopwords = tmp;\n\t\t\t\t}\n\t\t\t\tstopwords[wordcount-1] = word;\n\t\t\t}\n\t\t\tresult = makeWordTable( stopwords, wordcount );\n\t\t}\n\t\t\t// On error, use an empty table\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tresult = new Hashtable();\n\t\t}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#getWordtable(File).mjava","sourceNew":"  /**\n   * @param wordfile File containing the wordlist\n   */\n  public static HashMap getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new HashMap();\n    }\n    HashMap result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n        // On error, use an empty table\n    catch (IOException e) {\n      result = new HashMap();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param wordfile File containing the wordlist\n   */\n  public static HashMap getWordtable(File wordfile) {\n    if (wordfile == null) {\n      return new HashMap();\n    }\n    HashMap result = null;\n    try {\n      LineNumberReader lnr = new LineNumberReader(new FileReader(wordfile));\n      String word = null;\n      String[] stopwords = new String[100];\n      int wordcount = 0;\n      while ((word = lnr.readLine()) != null) {\n        wordcount++;\n        if (wordcount == stopwords.length) {\n          String[] tmp = new String[stopwords.length + 50];\n          System.arraycopy(stopwords, 0, tmp, 0, wordcount);\n          stopwords = tmp;\n        }\n        stopwords[wordcount - 1] = word;\n      }\n      result = makeWordTable(stopwords, wordcount);\n    }\n        // On error, use an empty table\n    catch (IOException e) {\n      result = new HashMap();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["a684698d2d785b642cc0dda9c81091abc2bd90b5"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a684698d2d785b642cc0dda9c81091abc2bd90b5"],"a684698d2d785b642cc0dda9c81091abc2bd90b5":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}