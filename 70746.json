{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * A watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * implementors should re-register during this call.\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state\n   */\n  void onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * A watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * implementors should re-register during this call.\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state\n   */\n  void onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * A watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * implementors should re-register during this call.\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state\n   */\n  void onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  /**\n   * Called when the collection we are registered against has a change of state.\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes. Also, multiple calls to this method can be made\n   * with the same state, ie. without any new updates.\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":"  /**\n   * Called when the collection we are registered against has a change of state\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionStateWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  /**\n   * Called when either the collection we are registered against has a change of state <em>or</em> there is a change to the live nodes of our collection.\n   *\n   * <p>\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes. Also, multiple calls to this method can be made\n   * with the same state, ie. without any new updates.\n   * </p>\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","sourceOld":"  /**\n   * Called when the collection we are registered against has a change of state.\n   *\n   * Note that, due to the way Zookeeper watchers are implemented, a single call may be\n   * the result of several state changes. Also, multiple calls to this method can be made\n   * with the same state, ie. without any new updates.\n   *\n   * @param liveNodes       the set of live nodes\n   * @param collectionState the new collection state (may be null if the collection has been\n   *                        deleted)\n   *\n   * @return true if the watcher should be removed\n   */\n  boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5cd4080fba20c774e4183c2ceb96ede05e5fb779"]},"commit2Childs":{"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["67e503ef0f418bc92404ff5d55694087c23d48eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}