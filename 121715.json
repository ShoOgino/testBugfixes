{"path":"src/test/org/apache/lucene/index/TestIndex#testIndex().mjava","commits":[{"id":"0afa0bff72bc189cdf6fc95f80d80365a6417e3b","date":1118096970,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndex#testIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n    \n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"959f192d46200c65ecff4fa688b244abca230b73","date":1118097808,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexModifier#testIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndex#testIndex().mjava","sourceNew":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    // test setting properties:\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    // test setting properties when internally the reader is opened:\n    i.delete(allDocTerm);\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.optimize();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n\n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","sourceOld":"  public void testIndex() throws IOException {\n    Directory ramDir = new RAMDirectory();\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\n    i.addDocument(getDoc());\n    assertEquals(1, i.docCount());\n    i.flush();\n    i.addDocument(getDoc(), new SimpleAnalyzer());\n    assertEquals(2, i.docCount());\n    i.optimize();\n    assertEquals(2, i.docCount());\n    i.flush();\n    i.delete(0);\n    assertEquals(1, i.docCount());\n    i.flush();\n    assertEquals(1, i.docCount());\n    i.addDocument(getDoc());\n    i.addDocument(getDoc());\n    i.flush();\n    assertEquals(3, i.docCount());\n    i.delete(allDocTerm);\n    assertEquals(0, i.docCount());\n    i.optimize();\n    assertEquals(0, i.docCount());\n    \n    //  Lucene defaults:\n    assertNull(i.getInfoStream());\n    assertTrue(i.getUseCompoundFile());\n    assertEquals(10, i.getMaxBufferedDocs());\n    assertEquals(10000, i.getMaxFieldLength());\n    assertEquals(10, i.getMergeFactor());\n    i.setMaxBufferedDocs(100);\n    i.setMergeFactor(25);\n    i.setMaxFieldLength(250000);\n    i.addDocument(getDoc());\n    i.setUseCompoundFile(false);\n    i.flush();\n    assertEquals(100, i.getMaxBufferedDocs());\n    assertEquals(25, i.getMergeFactor());\n    assertEquals(250000, i.getMaxFieldLength());\n    assertFalse(i.getUseCompoundFile());\n    \n    i.close();\n    try {\n      i.docCount();\n      fail();\n    } catch (IllegalStateException e) {\n      // expected exception\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"959f192d46200c65ecff4fa688b244abca230b73":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["959f192d46200c65ecff4fa688b244abca230b73"]},"commit2Childs":{"959f192d46200c65ecff4fa688b244abca230b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["959f192d46200c65ecff4fa688b244abca230b73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}