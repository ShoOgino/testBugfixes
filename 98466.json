{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","sourceNew":"  public static TokenStream getTokenStream(Terms vector) throws IOException {\n    // assumes the worst and makes no assumptions about token position\n    // sequences.\n    return getTokenStream(vector, false);\n  }\n\n","sourceOld":"  public static TokenStream getTokenStream(Terms vector) throws IOException {\n    // assumes the worst and makes no assumptions about token position\n    // sequences.\n    return getTokenStream(vector, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae230518a1a68acc124bef8df61ef94bd7c1295e","date":1417181719,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","sourceNew":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermPositionVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermPositionVector(tpv);\n  }\n\n","sourceOld":"  public static TokenStream getTokenStream(Terms vector) throws IOException {\n    // assumes the worst and makes no assumptions about token position\n    // sequences.\n    return getTokenStream(vector, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497","date":1417181893,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","sourceNew":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermVector(tpv);\n  }\n\n","sourceOld":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermPositionVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermPositionVector(tpv);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5cb61545fbf8394e449204e9780415b9f4c6fc","date":1429738516,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","sourceNew":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermVector(tpv, -1); // TODO propagate maxStartOffset; see LUCENE-6445\n  }\n\n","sourceOld":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermVector(tpv);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(Terms).mjava","sourceNew":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  @Deprecated // maintenance reasons LUCENE-6445\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermVector(tpv, -1); // TODO propagate maxStartOffset; see LUCENE-6445\n  }\n\n","sourceOld":"  /**\n   * Returns a token stream generated from a {@link Terms}. This\n   * can be used to feed the highlighter with a pre-parsed token\n   * stream.  The {@link Terms} must have offsets available. If there are no positions available,\n   * all tokens will have position increments reflecting adjacent tokens, or coincident when terms\n   * share a start offset. If there are stopwords filtered from the index, you probably want to ensure\n   * term vectors have positions so that phrase queries won't match across stopwords.\n   *\n   * @throws IllegalArgumentException if no offsets are available\n   */\n  public static TokenStream getTokenStream(final Terms tpv) throws IOException {\n\n    if (!tpv.hasOffsets()) {\n      throw new IllegalArgumentException(\"Highlighting requires offsets from the TokenStream.\");\n      //TokenStreamFromTermVector can handle a lack of offsets if there are positions. But\n      // highlighters require offsets, so we insist here.\n    }\n\n    return new TokenStreamFromTermVector(tpv, -1); // TODO propagate maxStartOffset; see LUCENE-6445\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497":["ae230518a1a68acc124bef8df61ef94bd7c1295e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae230518a1a68acc124bef8df61ef94bd7c1295e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dd5cb61545fbf8394e449204e9780415b9f4c6fc":["714aa8d007eef87d7203cfc6e0fe4dab8dd8a497"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["dd5cb61545fbf8394e449204e9780415b9f4c6fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d62e4938659e263e96ae8188e11aea8a940aea5"]},"commit2Childs":{"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497":["dd5cb61545fbf8394e449204e9780415b9f4c6fc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae230518a1a68acc124bef8df61ef94bd7c1295e"],"ae230518a1a68acc124bef8df61ef94bd7c1295e":["714aa8d007eef87d7203cfc6e0fe4dab8dd8a497"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dd5cb61545fbf8394e449204e9780415b9f4c6fc":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}