{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    expression.addParameter(collection);\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\", leftKey+\"=\"+rightKey));\n    expression.addParameter(new StreamExpressionNamedParameter(\"fl\", fieldList));\n    expression.addParameter(new StreamExpressionNamedParameter(\"batchSize\", Integer.toString(batchSize)));\n\n    // stream\n    if(includeStreams) {\n      if (stream instanceof Expressible) {\n        expression.addParameter(((Expressible) stream).toExpression(factory));\n      } else {\n        throw new IOException(\"The FetchStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    expression.addParameter(collection);\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\", leftKey+\"=\"+rightKey));\n    expression.addParameter(new StreamExpressionNamedParameter(\"fl\", fieldList));\n    expression.addParameter(new StreamExpressionNamedParameter(\"batchSize\", Integer.toString(batchSize)));\n\n    // stream\n    if(includeStreams) {\n      if (stream instanceof Expressible) {\n        expression.addParameter(((Expressible) stream).toExpression(factory));\n      } else {\n        throw new IOException(\"The FetchStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f21dc022708e502f89f154bdcf6dc53b9409aec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f21dc022708e502f89f154bdcf6dc53b9409aec"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f21dc022708e502f89f154bdcf6dc53b9409aec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}