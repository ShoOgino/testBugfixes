{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","commits":[{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Clause.Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 || originalViolations.get(idx).isLessSerious(v)) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Clause.Violation> violations) {\n    for (Clause.Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 || originalViolations.get(idx).isLessSerious(v)) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 || originalViolations.get(idx).isLessSerious(v)) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["bf944dd765bc5c354c5262f39a74f6def5dbcd53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    for (Violation v : violations) {\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    if (violations.size() > originalViolations.size()) return true;\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf944dd765bc5c354c5262f39a74f6def5dbcd53","date":1593045208,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    if (violations.size() > originalViolations.size()) return true;\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 || originalViolations.get(idx).isLessSerious(v)) return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    if (violations.size() > originalViolations.size()) return true;\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 /*|| originalViolations.get(idx).isLessSerious(v)*/) return true;\n    }\n    return false;\n  }\n\n","bugFix":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#containsNewErrors(List[Violation]).mjava","sourceNew":null,"sourceOld":"  boolean containsNewErrors(List<Violation> violations) {\n    boolean isTxOpen = session.transaction != null && session.transaction.isOpen();\n    if (violations.size() > originalViolations.size()) return true;\n    for (Violation v : violations) {\n      //the computed value can change over time. So it's better to evaluate it in the end\n      if (isTxOpen && v.getClause().hasComputedValue) continue;\n      int idx = originalViolations.indexOf(v);\n      if (idx < 0 || originalViolations.get(idx).isLessSerious(v)) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"3f504512a03d978990cbff30db0522b354e846db":["bf944dd765bc5c354c5262f39a74f6def5dbcd53"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"bf944dd765bc5c354c5262f39a74f6def5dbcd53":["16a22f8085bb46850c91784e94f7714345011404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","16a22f8085bb46850c91784e94f7714345011404","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bf944dd765bc5c354c5262f39a74f6def5dbcd53":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["bf944dd765bc5c354c5262f39a74f6def5dbcd53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}