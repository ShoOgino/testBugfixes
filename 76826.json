{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"/dev/null","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    \n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    \n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb","date":1417043528,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d1db6f36874f1979916ccb702329fbb09602af8","date":1421105614,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1cd9cffef251190badd40d1da8b604d0185d744","date":1421390175,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"547b9bdc942b65ebcd943738bb12c2a222fcf566","date":1432317527,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf","date":1432317730,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919a9ff0212f46eb240b8716a6d189b06659d3f2","date":1432317985,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"688f23c47b3d5b61d795e3042013aa908716c068","date":1449761553,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b95105f40584c3ef98e6a1ab1b55ad47d67f136","date":1476256601,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d1e9a21218cf0ffd81625a2f105dc388aa3097d","date":1476967652,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","date":1476974235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b974e6f222f5b2560026b10508fc27cf38ef37","date":1483061988,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5eb842cfee458c37a15154f49502a6a00fc662f","date":1494313961,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76bb93998d4d4fa60da28429640216a0a249111a","date":1549968795,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;  \n    }\n    \n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b26d91db0d1d754936add788fa3a21acaadc9685","date":1565418863,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n    else if (\"export\".equals(toolType))\n      return new ExportTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n    else if (\"export\".equals(toolType))\n      return new ExportTool();\n    else if (\"package\".equals(toolType))\n      return new PackageTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n    else if (\"export\".equals(toolType))\n      return new ExportTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#newTool(String).mjava","sourceNew":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"export\".equals(toolType))\n      return new ExportTool();\n    else if (\"package\".equals(toolType))\n      return new PackageTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","sourceOld":"  // Creates an instance of the requested tool, using classpath scanning if necessary\n  private static Tool newTool(String toolType) throws Exception {\n    if (\"healthcheck\".equals(toolType))\n      return new HealthcheckTool();\n    else if (\"status\".equals(toolType))\n      return new StatusTool();\n    else if (\"api\".equals(toolType))\n      return new ApiTool();\n    else if (\"create_collection\".equals(toolType))\n      return new CreateCollectionTool();\n    else if (\"create_core\".equals(toolType))\n      return new CreateCoreTool();\n    else if (\"create\".equals(toolType))\n      return new CreateTool();\n    else if (\"delete\".equals(toolType))\n      return new DeleteTool();\n    else if (\"config\".equals(toolType))\n      return new ConfigTool();\n    else if (\"run_example\".equals(toolType))\n      return new RunExampleTool();\n    else if (\"upconfig\".equals(toolType))\n      return new ConfigSetUploadTool();\n    else if (\"downconfig\".equals(toolType))\n      return new ConfigSetDownloadTool();\n    else if (\"rm\".equals(toolType))\n      return new ZkRmTool();\n    else if (\"mv\".equals(toolType))\n      return new ZkMvTool();\n    else if (\"cp\".equals(toolType))\n      return new ZkCpTool();\n    else if (\"ls\".equals(toolType))\n      return new ZkLsTool();\n    else if (\"mkroot\".equals(toolType))\n      return new ZkMkrootTool();\n    else if (\"assert\".equals(toolType))\n      return new AssertTool();\n    else if (\"utils\".equals(toolType))\n      return new UtilsTool();\n    else if (\"auth\".equals(toolType))\n      return new AuthTool();\n    else if (\"autoscaling\".equals(toolType))\n      return new AutoscalingTool();\n    else if (\"export\".equals(toolType))\n      return new ExportTool();\n    else if (\"package\".equals(toolType))\n      return new PackageTool();\n\n    // If you add a built-in tool to this class, add it here to avoid\n    // classpath scanning\n\n    for (Class<Tool> next : findToolClassesInPackage(\"org.apache.solr.util\")) {\n      Tool tool = next.getConstructor().newInstance();\n      if (toolType.equals(tool.getName()))\n        return tool;\n    }\n\n    throw new IllegalArgumentException(toolType + \" not supported!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"547b9bdc942b65ebcd943738bb12c2a222fcf566":["f1cd9cffef251190badd40d1da8b604d0185d744"],"b26d91db0d1d754936add788fa3a21acaadc9685":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"3d1db6f36874f1979916ccb702329fbb09602af8":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["50b974e6f222f5b2560026b10508fc27cf38ef37","f5eb842cfee458c37a15154f49502a6a00fc662f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f5eb842cfee458c37a15154f49502a6a00fc662f","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"688f23c47b3d5b61d795e3042013aa908716c068":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["b26d91db0d1d754936add788fa3a21acaadc9685"],"76bb93998d4d4fa60da28429640216a0a249111a":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["e25c332f157326faecb36f76173033c1284776a5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f5eb842cfee458c37a15154f49502a6a00fc662f","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"3f504512a03d978990cbff30db0522b354e846db":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"e25c332f157326faecb36f76173033c1284776a5":["709714c6ee47950678dd2d2ef4e0473886909226"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"f1cd9cffef251190badd40d1da8b604d0185d744":["3d1db6f36874f1979916ccb702329fbb09602af8"],"50b974e6f222f5b2560026b10508fc27cf38ef37":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["688f23c47b3d5b61d795e3042013aa908716c068","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["f5eb842cfee458c37a15154f49502a6a00fc662f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","50b974e6f222f5b2560026b10508fc27cf38ef37"],"4ca20be81c9284c840498143264e583ccbb8525a":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"f5eb842cfee458c37a15154f49502a6a00fc662f":["50b974e6f222f5b2560026b10508fc27cf38ef37"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["688f23c47b3d5b61d795e3042013aa908716c068"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["76bb93998d4d4fa60da28429640216a0a249111a"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"547b9bdc942b65ebcd943738bb12c2a222fcf566":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"b26d91db0d1d754936add788fa3a21acaadc9685":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"3d1db6f36874f1979916ccb702329fbb09602af8":["f1cd9cffef251190badd40d1da8b604d0185d744"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"688f23c47b3d5b61d795e3042013aa908716c068":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["3f504512a03d978990cbff30db0522b354e846db"],"76bb93998d4d4fa60da28429640216a0a249111a":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["3d1db6f36874f1979916ccb702329fbb09602af8"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e25c332f157326faecb36f76173033c1284776a5":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f1cd9cffef251190badd40d1da8b604d0185d744":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"50b974e6f222f5b2560026b10508fc27cf38ef37":["e9017cf144952056066919f1ebc7897ff9bd71b1","f03e4bed5023ec3ef93a771b8888cae991cf448d","f5eb842cfee458c37a15154f49502a6a00fc662f"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["50b974e6f222f5b2560026b10508fc27cf38ef37"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","76bb93998d4d4fa60da28429640216a0a249111a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"4ca20be81c9284c840498143264e583ccbb8525a":["688f23c47b3d5b61d795e3042013aa908716c068"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["b26d91db0d1d754936add788fa3a21acaadc9685"],"f5eb842cfee458c37a15154f49502a6a00fc662f":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"709714c6ee47950678dd2d2ef4e0473886909226":["e25c332f157326faecb36f76173033c1284776a5"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["4ca20be81c9284c840498143264e583ccbb8525a"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d","c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}