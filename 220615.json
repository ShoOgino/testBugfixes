{"path":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.US);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":null,"sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba","date":1459362686,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","pathOld":"/dev/null","sourceNew":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#formatDate(Date,Calendar,Appendable).mjava","sourceNew":null,"sourceOld":"  /** Formats the date and returns the calendar instance that was used (which may be reused) */\n  public static Calendar formatDate(Date date, Calendar cal, Appendable out) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    StringBuilder sb = out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();\n    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n    cal.setTime(date);\n\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n\n    if (out != sb)\n      out.append(sb);\n\n    return cal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3f6c7717a0f1decd1668144537943efcc70cd95","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}