{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}