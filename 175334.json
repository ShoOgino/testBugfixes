{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc, field);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public IntervalMatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc, field);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null)\n      return null;\n    if (terms.hasPositions() == false) {\n      throw new IllegalArgumentException(\"Cannot create an IntervalIterator over field \" + field + \" because it has no indexed positions\");\n    }\n    TermsEnum te = terms.iterator();\n    if (te.seekExact(term) == false) {\n      return null;\n    }\n    return matches(te, doc, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}