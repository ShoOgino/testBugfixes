{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","commits":[{"id":"7fe833105c61e37b761ef49bb83a3064c720d437","date":1327401646,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), -1);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = null;\n        try {\n          tokenizer = new PatternTokenizer(reader, Pattern.compile(\"a\"), 0);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe833105c61e37b761ef49bb83a3064c720d437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe833105c61e37b761ef49bb83a3064c720d437"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7fe833105c61e37b761ef49bb83a3064c720d437"],"7fe833105c61e37b761ef49bb83a3064c720d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7fe833105c61e37b761ef49bb83a3064c720d437"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7fe833105c61e37b761ef49bb83a3064c720d437":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}