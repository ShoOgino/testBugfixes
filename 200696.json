{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(TermsEnum,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param tenum Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.terms = terms;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param tenum Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(TermsEnum tenum, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.tenum = tenum;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b736415ad05b659abd89eff738635d23b8f017cb","date":1313992660,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.terms = terms;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param tenum Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.terms = terms;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(Terms,AttributeSource,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength, boolean transpositions) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.terms = terms;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    if (transpositions && maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      throw new UnsupportedOperationException(\"with transpositions enabled, distances > \" \n        + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + \" are not supported \");\n    }\n    this.transpositions = transpositions;\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param terms Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.terms = terms;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["b736415ad05b659abd89eff738635d23b8f017cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b736415ad05b659abd89eff738635d23b8f017cb":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b736415ad05b659abd89eff738635d23b8f017cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b736415ad05b659abd89eff738635d23b8f017cb":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}