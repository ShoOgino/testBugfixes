{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","commits":[{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    boolean pex = false;\n    try{\n      Query q = getAnalyzedQuery(\"*\", a, false);\n    } catch (ParseException e){\n      pex = true;\n    }\n    assertEquals(\"Wildcard alone with allowWildcard=false\", true, pex);\n      \n    pex = false;\n    try {\n      String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n      assertEquals(\"Every word\", \"*\", qString);\n    } catch (ParseException e){\n      pex = true;\n    }\n      \n    assertEquals(\"Wildcard alone with allowWildcard=true\", false, pex);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","sourceNew":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    expectThrows(ParseException.class, () -> {\n      getAnalyzedQuery(\"*\", a, false);\n    });\n      \n    String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n    assertEquals(\"Every word\", \"*\", qString);\n  }\n\n","sourceOld":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    boolean pex = false;\n    try{\n      Query q = getAnalyzedQuery(\"*\", a, false);\n    } catch (ParseException e){\n      pex = true;\n    }\n    assertEquals(\"Wildcard alone with allowWildcard=false\", true, pex);\n      \n    pex = false;\n    try {\n      String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n      assertEquals(\"Every word\", \"*\", qString);\n    } catch (ParseException e){\n      pex = true;\n    }\n      \n    assertEquals(\"Wildcard alone with allowWildcard=true\", false, pex);\n\n  }\n\n","bugFix":["046829b17e246624c179b94d5a20cb53fa945e87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcardAlone().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","sourceNew":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    QueryParser parser = new QueryParser(FIELD, new ASCIIAnalyzer());\n    parser.setAllowLeadingWildcard(false);\n    expectThrows(ParseException.class, () -> {\n      parser.parse(\"*\");\n    });\n\n    QueryParser parser2 = new QueryParser(\"*\", new ASCIIAnalyzer());\n    parser2.setAllowLeadingWildcard(false);\n    assertEquals(new MatchAllDocsQuery(), parser2.parse(\"*\"));\n  }\n\n","sourceOld":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    expectThrows(ParseException.class, () -> {\n      getAnalyzedQuery(\"*\", a, false);\n    });\n      \n    String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n    assertEquals(\"Every word\", \"*\", qString);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildcardAlone().mjava","sourceNew":null,"sourceOld":"  public void testWildcardAlone() throws ParseException {\n    //seems like crazy edge case, but can be useful in concordance \n    expectThrows(ParseException.class, () -> {\n      getAnalyzedQuery(\"*\", a, false);\n    });\n      \n    String qString = parseWithAnalyzingQueryParser(\"*\", a, true);\n    assertEquals(\"Every word\", \"*\", qString);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["046829b17e246624c179b94d5a20cb53fa945e87"],"ea4107f60b9f95623c16025c9c247412ff809092":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["046829b17e246624c179b94d5a20cb53fa945e87"],"05fe562aa248790944d43cdd478f512572835ba0":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}