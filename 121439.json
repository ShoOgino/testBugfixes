{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}