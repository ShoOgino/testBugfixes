{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","commits":[{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link DistributedQueue} object\n   */\n  static DistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new DistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Overseer.Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getInternalWorkQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","sourceOld":"  /**\n   * Internal overseer work queue. This should not be used outside of Overseer.\n   * <p>\n   * This queue is used to store overseer operations that have been removed from the\n   * state update queue but are being executed as part of a batch. Once\n   * the result of the batch is persisted to zookeeper, these items are removed from the\n   * work queue. If the overseer dies while processing a batch then a new overseer always\n   * operates from the work queue first and only then starts processing operations from the\n   * state update queue.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getInternalWorkQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue-work\", zkStats);\n  }\n\n","bugFix":["19498030e0adab22f604f935cae3c03dcf0952a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["af2638813028b254a88b418ebeafb541afb49653"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["af2638813028b254a88b418ebeafb541afb49653"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}