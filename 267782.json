{"path":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","pathOld":"src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#reset().mjava","sourceNew":null,"sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ca38aecd0204be91049ec782668f642a68d9935":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ca38aecd0204be91049ec782668f642a68d9935":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","1ca38aecd0204be91049ec782668f642a68d9935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}