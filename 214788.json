{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCaseJ4.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCaseJ4.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"/dev/null","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<IndexableField> fields = new ArrayList<IndexableField>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<IndexableField> fields = new ArrayList<IndexableField>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, LuceneTestCase.newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<IndexableField> fields = new ArrayList<IndexableField>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43b04c27924fe393e38e9f0986e32c634f261859"],"c19f985e36a65cc969e8e564fe337a0d41512075":["43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}