{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testScoreAndAllRealFieldsRTG().mjava","commits":[{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testScoreAndAllRealFieldsRTG().mjava","pathOld":"/dev/null","sourceNew":"  public void testScoreAndAllRealFieldsRTG() throws Exception {\n    // also shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored\n    for (String fl : TestPseudoReturnFields.SCORE_AND_REAL_FIELDS) {\n      for (int i : Arrays.asList(42, 43, 44, 45, 46, 99)) {\n        SolrDocument doc = getRandClient(random()).getById(\"\"+i, params(\"fl\",fl));\n        assertEquals(fl + \" => \" + doc, 4, doc.size());\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"id\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"val_i\") instanceof Integer);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"subject\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"ssto\") instanceof String); // TODO: val_ss: List<String>\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testScoreAndAllRealFieldsRTG().mjava","pathOld":"/dev/null","sourceNew":"  public void testScoreAndAllRealFieldsRTG() throws Exception {\n    // also shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored\n    for (String fl : TestPseudoReturnFields.SCORE_AND_REAL_FIELDS) {\n      for (int i : Arrays.asList(42, 43, 44, 45, 46, 99)) {\n        SolrDocument doc = getRandClient(random()).getById(\"\"+i, params(\"fl\",fl));\n        assertEquals(fl + \" => \" + doc, 4, doc.size());\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"id\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"val_i\") instanceof Integer);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"subject\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"ssto\") instanceof String); // TODO: val_ss: List<String>\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testScoreAndAllRealFieldsRTG().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testScoreAndAllRealFieldsRTG().mjava","sourceNew":"  public void testScoreAndAllRealFieldsRTG() throws Exception {\n    // also shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored\n    for (String fl : TestPseudoReturnFields.SCORE_AND_REAL_FIELDS) {\n      for (int i : Arrays.asList(42, 43, 44, 45, 46, 99)) {\n        SolrDocument doc = getRandClient(random()).getById(\"\"+i, params(\"fl\",fl));\n        assertEquals(fl + \" => \" + doc, 5, doc.size());\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"id\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"val_i\") instanceof Integer);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"subject\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"ssto\") instanceof String); // TODO: val_ss: List<String>\n      }\n    }\n  }\n\n","sourceOld":"  public void testScoreAndAllRealFieldsRTG() throws Exception {\n    // also shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored\n    for (String fl : TestPseudoReturnFields.SCORE_AND_REAL_FIELDS) {\n      for (int i : Arrays.asList(42, 43, 44, 45, 46, 99)) {\n        SolrDocument doc = getRandClient(random()).getById(\"\"+i, params(\"fl\",fl));\n        assertEquals(fl + \" => \" + doc, 4, doc.size());\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"id\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"val_i\") instanceof Integer);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"subject\") instanceof String);\n        assertTrue(fl + \" => \" + doc, doc.getFieldValue(\"ssto\") instanceof String); // TODO: val_ss: List<String>\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["aa4f44656c8081bbc63325a83abdb025eafd5a2b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}