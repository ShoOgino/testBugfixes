{"path":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String).mjava","commits":[{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String,Term).mjava","sourceNew":"  private static TermStats termStatsFromString(String data) {\n    if (data == null || data.trim().length() == 0) {\n      log.warn(\"Invalid empty term stats string\");\n      return null;\n    }\n    String[] vals = data.split(\",\");\n    if (vals.length < 3) {\n      log.warn(\"Invalid term stats string, num fields \" + vals.length\n          + \" < 3, '\" + data + \"'\");\n      return null;\n    }\n    Term term = termFromEncodedString(vals[0]);\n    try {\n      long docFreq = Long.parseLong(vals[1]);\n      long totalTermFreq = Long.parseLong(vals[2]);\n      return new TermStats(term.toString(), docFreq, totalTermFreq);\n    } catch (Exception e) {\n      log.warn(\"Invalid termStats string '\" + data + \"'\");\n      return null;\n    }\n  }\n\n","sourceOld":"  private static TermStats termStatsFromString(String data, Term t) {\n    if (data == null || data.trim().length() == 0) {\n      log.warn(\"Invalid empty term stats string\");\n      return null;\n    }\n    String[] vals = data.split(\",\");\n    if (vals.length < 2) {\n      log.warn(\"Invalid term stats string, num fields \" + vals.length\n          + \" < 2, '\" + data + \"'\");\n      return null;\n    }\n    Term termToUse;\n    int idx = 0;\n    if (vals.length == 3) {\n      idx++;\n      // with term\n      Term term = termFromString(vals[0]);\n      if (term != null) {\n        termToUse = term;\n        if (t != null) {\n          assert term.equals(t);\n        }\n      } else { // failed term decoding\n        termToUse = t;\n      }\n    } else {\n      termToUse = t;\n    }\n    if (termToUse == null) {\n      log.warn(\"Missing term in termStats '\" + data + \"'\");\n      return null;\n    }\n    try {\n      long docFreq = Long.parseLong(vals[idx++]);\n      long totalTermFreq = Long.parseLong(vals[idx]);\n      return new TermStats(termToUse.toString(), docFreq, totalTermFreq);\n    } catch (Exception e) {\n      log.warn(\"Invalid termStats string '\" + data + \"'\");\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String).mjava","pathOld":"/dev/null","sourceNew":"  private static TermStats termStatsFromString(String data) {\n    if (data == null || data.trim().length() == 0) {\n      log.warn(\"Invalid empty term stats string\");\n      return null;\n    }\n    String[] vals = data.split(\",\");\n    if (vals.length < 3) {\n      log.warn(\"Invalid term stats string, num fields \" + vals.length\n          + \" < 3, '\" + data + \"'\");\n      return null;\n    }\n    Term term = termFromEncodedString(vals[0]);\n    try {\n      long docFreq = Long.parseLong(vals[1]);\n      long totalTermFreq = Long.parseLong(vals[2]);\n      return new TermStats(term.toString(), docFreq, totalTermFreq);\n    } catch (Exception e) {\n      log.warn(\"Invalid termStats string '\" + data + \"'\");\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/stats/StatsUtil#termStatsFromString(String).mjava","sourceNew":"  private static TermStats termStatsFromString(String data) {\n    if (data == null || data.trim().length() == 0) {\n      log.warn(\"Invalid empty term stats string\");\n      return null;\n    }\n    String[] vals = data.split(\",\");\n    if (vals.length < 3) {\n      log.warn(\"Invalid term stats string, num fields {} < 3, '{}'\", vals.length, data);\n      return null;\n    }\n    Term term = termFromEncodedString(vals[0]);\n    try {\n      long docFreq = Long.parseLong(vals[1]);\n      long totalTermFreq = Long.parseLong(vals[2]);\n      return new TermStats(term.toString(), docFreq, totalTermFreq);\n    } catch (Exception e) {\n      log.warn(\"Invalid termStats string '{}'\", data);\n      return null;\n    }\n  }\n\n","sourceOld":"  private static TermStats termStatsFromString(String data) {\n    if (data == null || data.trim().length() == 0) {\n      log.warn(\"Invalid empty term stats string\");\n      return null;\n    }\n    String[] vals = data.split(\",\");\n    if (vals.length < 3) {\n      log.warn(\"Invalid term stats string, num fields \" + vals.length\n          + \" < 3, '\" + data + \"'\");\n      return null;\n    }\n    Term term = termFromEncodedString(vals[0]);\n    try {\n      long docFreq = Long.parseLong(vals[1]);\n      long totalTermFreq = Long.parseLong(vals[2]);\n      return new TermStats(term.toString(), docFreq, totalTermFreq);\n    } catch (Exception e) {\n      log.warn(\"Invalid termStats string '\" + data + \"'\");\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["df72a23fb74bebe914e3f3972063a884327c0436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}