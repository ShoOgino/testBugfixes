{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","commits":[{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","sourceNew":"  private static SolrCloudManager getSolrCloudManager(@SuppressWarnings({\"rawtypes\"})final Map<String, Map> nodeValues,\n                                                      @SuppressWarnings({\"rawtypes\"})Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(@SuppressWarnings({\"rawtypes\"})SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","sourceNew":"  private static SolrCloudManager getSolrCloudManager(@SuppressWarnings({\"rawtypes\"})final Map<String, Map> nodeValues,\n                                                      @SuppressWarnings({\"rawtypes\"})Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(@SuppressWarnings({\"rawtypes\"})SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager getSolrCloudManager(@SuppressWarnings({\"rawtypes\"})final Map<String, Map> nodeValues,\n                                                      @SuppressWarnings({\"rawtypes\"})Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(@SuppressWarnings({\"rawtypes\"})SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],Map).mjava","sourceNew":null,"sourceOld":"  private static SolrCloudManager getSolrCloudManager(@SuppressWarnings({\"rawtypes\"})final Map<String, Map> nodeValues,\n                                                      @SuppressWarnings({\"rawtypes\"})Map clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(@SuppressWarnings({\"rawtypes\"})SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}