{"path":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","commits":[{"id":"f806379155a5d567cdcfaa274b4e14e6cdf79abd","date":1212689255,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at leaset 10 SolrInfoMBean that should be found in the classpath.\", checked > 10 );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["48f8549ab62151df048dd021185c251d8663631c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48f8549ab62151df048dd021185c251d8663631c","date":1246519373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","pathOld":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath.\", checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at leaset 10 SolrInfoMBean that should be found in the classpath.\", checked > 10 );\n  }\n\n","bugFix":["f806379155a5d567cdcfaa274b4e14e6cdf79abd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0e17cfd70114fa265a0ac990861cc37685024e","date":1268618829,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","pathOld":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath.\", checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","pathOld":"src/test/org/apache/solr/SolrInfoMBeanTest#testCallMBeanInfo().mjava","sourceNew":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","sourceOld":"  /**\n   * Gets a list of everything we can find in the classpath and makes sure it has\n   * a name, description, etc...\n   */\n  public void testCallMBeanInfo() throws Exception {\n    List<Class> classes = new ArrayList<Class>();\n    classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));\n    classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));\n   // System.out.println(classes);\n    \n    int checked = 0;\n    for( Class clazz : classes ) {\n      if( SolrInfoMBean.class.isAssignableFrom( clazz ) ) {\n        try {\n          SolrInfoMBean info = (SolrInfoMBean)clazz.newInstance();\n          \n          //System.out.println( info.getClass() );\n          assertNotNull( info.getName() );\n          assertNotNull( info.getDescription() );\n          assertNotNull( info.getSource() );\n          assertNotNull( info.getSourceId() );\n          assertNotNull( info.getVersion() );\n          assertNotNull( info.getCategory() );\n\n          if( info instanceof LRUCache ) {\n            continue;\n          }\n          \n          assertNotNull( info.toString() );\n          // increase code coverage...\n          assertNotNull( info.getDocs() + \"\" );\n          assertNotNull( info.getStatistics()+\"\" );\n          checked++;\n        }\n        catch( InstantiationException ex ) {\n          // expected...\n          //System.out.println( \"unable to initalize: \"+clazz );\n        }\n      }\n    }\n    assertTrue( \"there are at least 10 SolrInfoMBean that should be found in the classpath, found \" + checked, checked > 10 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48f8549ab62151df048dd021185c251d8663631c":["f806379155a5d567cdcfaa274b4e14e6cdf79abd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf0e17cfd70114fa265a0ac990861cc37685024e":["48f8549ab62151df048dd021185c251d8663631c"],"ad94625fb8d088209f46650c8097196fec67f00c":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"f806379155a5d567cdcfaa274b4e14e6cdf79abd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"48f8549ab62151df048dd021185c251d8663631c":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f806379155a5d567cdcfaa274b4e14e6cdf79abd"],"bf0e17cfd70114fa265a0ac990861cc37685024e":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f806379155a5d567cdcfaa274b4e14e6cdf79abd":["48f8549ab62151df048dd021185c251d8663631c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}