{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f89819f2d2ba23f608c6d0ea155524f95a29aa4","date":1234350104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = context.getVariableResolver().resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = resolver.resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"850e6bf528dcc8def8f27ada3cfa6ba4d2336375","date":1235458726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance capable of formatting values\n   * using a given date format.\n   * </p>\n   * <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed\n   * with <code>DateMathParser</code> class. If the value is in single quotes,\n   * then it is assumed to be a datemath expression, otherwise it resolved using\n   * a <code>VariableResolver</code> instance\n   * </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date\n   *         format\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        CacheEntry e = getCachedData(expression);\n        String expr = e.key;\n        SimpleDateFormat fmt = e.format;\n        Matcher m = IN_SINGLE_QUOTES.matcher(expr);\n        if (m.find()) {\n          String datemathExpr = m.group(1);\n          try {\n            Date date = dateMathParser.parseMath(datemathExpr);\n            return fmt.format(date);\n          } catch (ParseException exp) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Invalid expression for date\", exp);\n          }\n        } else {\n          Object o = context.getVariableResolver().resolve(expr);\n          if (o == null)\n            return \"\";\n          Date date = null;\n          if (o instanceof Date) {\n            date = (Date) o;\n          } else {\n            String s = o.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Invalid expression for date\", exp);\n            }\n          }\n          return fmt.format(date);\n        }\n      }\n\n      private CacheEntry getCachedData(String str) {\n        CacheEntry result = cache.get(str);\n        if (result != null)\n          return result;\n        Matcher m = FORMAT_METHOD.matcher(str);\n        String expr, pattern;\n        if (m.find()) {\n          expr = m.group(1).trim();\n          if (IN_SINGLE_QUOTES.matcher(expr).find()) {\n            expr = expr.replaceAll(\"NOW\", \"\");\n          }\n          pattern = m.group(2).trim();\n          cache.put(str, new CacheEntry(expr, new SimpleDateFormat(pattern)));\n          return cache.get(str);\n        } else {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE, \"Invalid format String : \"\n                  + \"${dataimporter.functions.\" + str + \"}\");\n        }\n      }\n\n      Map<String, CacheEntry> cache = new HashMap<String, CacheEntry>();\n\n      Pattern FORMAT_METHOD = Pattern.compile(\"^(.*?),(.*?)$\");\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"9d532a814197216f5e180897b172e87e0158690b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["9d532a814197216f5e180897b172e87e0158690b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"ad94625fb8d088209f46650c8097196fec67f00c":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["ad94625fb8d088209f46650c8097196fec67f00c"],"9d532a814197216f5e180897b172e87e0158690b":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["9d532a814197216f5e180897b172e87e0158690b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}