{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getSortField(SortItem,Map[String,String]).mjava","commits":[{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getSortField(SortItem,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getSortField(SortItem).mjava","sourceNew":"  private static String getSortField(SortItem sortItem, Map<String, String> reverseColumnAliases)\n  {\n    String field;\n    Expression ex = sortItem.getSortKey();\n    if(ex instanceof QualifiedNameReference) {\n      QualifiedNameReference ref = (QualifiedNameReference)ex;\n      List<String> parts = ref.getName().getOriginalParts();\n      field = parts.get(0);\n    } else if(ex instanceof  FunctionCall) {\n      FunctionCall functionCall = (FunctionCall)ex;\n      List<String> parts = functionCall.getName().getOriginalParts();\n      List<Expression> args = functionCall.getArguments();\n      String col = null;\n\n      if(args.size() > 0 && args.get(0) instanceof QualifiedNameReference) {\n        QualifiedNameReference ref = (QualifiedNameReference) args.get(0);\n        col = ref.getName().getOriginalParts().get(0);\n        field = parts.get(0)+\"(\"+stripSingleQuotes(col)+\")\";\n      } else {\n        field = stripSingleQuotes(stripQuotes(functionCall.toString()));\n      }\n\n    } else {\n      StringLiteral stringLiteral = (StringLiteral)ex;\n      field = stripSingleQuotes(stringLiteral.toString());\n    }\n\n    if(reverseColumnAliases.containsKey(field)) {\n      field = reverseColumnAliases.get(field);\n    }\n\n    return field;\n  }\n\n","sourceOld":"  private static String getSortField(SortItem sortItem)\n  {\n    String field;\n    Expression ex = sortItem.getSortKey();\n    if(ex instanceof QualifiedNameReference) {\n      QualifiedNameReference ref = (QualifiedNameReference)ex;\n      List<String> parts = ref.getName().getOriginalParts();\n      field = parts.get(0);\n    } else if(ex instanceof  FunctionCall) {\n      FunctionCall functionCall = (FunctionCall)ex;\n      List<String> parts = functionCall.getName().getOriginalParts();\n      List<Expression> args = functionCall.getArguments();\n      String col = null;\n\n      if(args.size() > 0 && args.get(0) instanceof QualifiedNameReference) {\n        QualifiedNameReference ref = (QualifiedNameReference) args.get(0);\n        col = ref.getName().getOriginalParts().get(0);\n        field = parts.get(0)+\"(\"+stripSingleQuotes(col)+\")\";\n      } else {\n        field = stripSingleQuotes(stripQuotes(functionCall.toString()));\n      }\n\n    } else {\n      StringLiteral stringLiteral = (StringLiteral)ex;\n      field = stripSingleQuotes(stringLiteral.toString());\n    }\n\n    return field;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getSortField(SortItem,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private static String getSortField(SortItem sortItem, Map<String, String> reverseColumnAliases)\n  {\n    String field;\n    Expression ex = sortItem.getSortKey();\n    if(ex instanceof QualifiedNameReference) {\n      QualifiedNameReference ref = (QualifiedNameReference)ex;\n      List<String> parts = ref.getName().getOriginalParts();\n      field = parts.get(0);\n    } else if(ex instanceof  FunctionCall) {\n      FunctionCall functionCall = (FunctionCall)ex;\n      List<String> parts = functionCall.getName().getOriginalParts();\n      List<Expression> args = functionCall.getArguments();\n      String col = null;\n\n      if(args.size() > 0 && args.get(0) instanceof QualifiedNameReference) {\n        QualifiedNameReference ref = (QualifiedNameReference) args.get(0);\n        col = ref.getName().getOriginalParts().get(0);\n        field = parts.get(0)+\"(\"+stripSingleQuotes(col)+\")\";\n      } else {\n        field = stripSingleQuotes(stripQuotes(functionCall.toString()));\n      }\n\n    } else {\n      StringLiteral stringLiteral = (StringLiteral)ex;\n      field = stripSingleQuotes(stringLiteral.toString());\n    }\n\n    if(reverseColumnAliases.containsKey(field)) {\n      field = reverseColumnAliases.get(field);\n    }\n\n    return field;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getSortField(SortItem,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private static String getSortField(SortItem sortItem, Map<String, String> reverseColumnAliases)\n  {\n    String field;\n    Expression ex = sortItem.getSortKey();\n    if(ex instanceof QualifiedNameReference) {\n      QualifiedNameReference ref = (QualifiedNameReference)ex;\n      List<String> parts = ref.getName().getOriginalParts();\n      field = parts.get(0);\n    } else if(ex instanceof  FunctionCall) {\n      FunctionCall functionCall = (FunctionCall)ex;\n      List<String> parts = functionCall.getName().getOriginalParts();\n      List<Expression> args = functionCall.getArguments();\n      String col = null;\n\n      if(args.size() > 0 && args.get(0) instanceof QualifiedNameReference) {\n        QualifiedNameReference ref = (QualifiedNameReference) args.get(0);\n        col = ref.getName().getOriginalParts().get(0);\n        field = parts.get(0)+\"(\"+stripSingleQuotes(col)+\")\";\n      } else {\n        field = stripSingleQuotes(stripQuotes(functionCall.toString()));\n      }\n\n    } else {\n      StringLiteral stringLiteral = (StringLiteral)ex;\n      field = stripSingleQuotes(stringLiteral.toString());\n    }\n\n    if(reverseColumnAliases.containsKey(field)) {\n      field = reverseColumnAliases.get(field);\n    }\n\n    return field;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}