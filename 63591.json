{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","commits":[{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null) {\n        // We don't know anything about this collection, maybe it's new?\n        // First try to update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (legacyCollectionStates.containsKey(collection)) {\n        // Exists, and lives in legacy cluster state, force a refresh.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","f54f0eff6955cf57610f6b93dbbba3a2bf540619","65df8d40a052836be281bc4c87b66bf0516b4f89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65df8d40a052836be281bc4c87b66bf0516b4f89","date":1461633302,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null) {\n        // We don't know anything about this collection, maybe it's new?\n        // First try to update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (legacyCollectionStates.containsKey(collection)) {\n        // Exists, and lives in legacy cluster state, force a refresh.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null) {\n        // We don't know anything about this collection, maybe it's new?\n        // First try to update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (legacyCollectionStates.containsKey(collection)) {\n        // Exists, and lives in legacy cluster state, force a refresh.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4eb4db7cdfde55d664b5b0c87041ec80de8178cf","date":1467712003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c","date":1467728244,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n      else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.info(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singletonMap(collection, newState));\n        }\n      }\n      else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.info(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.info(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.info(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.info(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.info(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.info(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() == null) {\n            // No dice, just give up.\n            return;\n          }\n          // What do you know, it exists!\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n        }\n      } else if (ref.isLazilyLoaded()) {\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        DocCollection newState = fetchCollectionState(collection, null);\n        updateWatchedCollection(collection, newState);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15","date":1525806607,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  //TODO shouldn't we call ZooKeeper.sync() at the right places to prevent reading a stale value?  We do so for aliases.\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  //TODO shouldn't we call ZooKeeper.sync() at the right places to prevent reading a stale value?  We do so for aliases.\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        log.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        log.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            log.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        log.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        log.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        log.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  //TODO shouldn't we call ZooKeeper.sync() at the right places to prevent reading a stale value?  We do so for aliases.\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        LOG.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        LOG.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            LOG.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        LOG.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        LOG.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        LOG.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#forceUpdateCollection(String).mjava","sourceNew":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  //TODO shouldn't we call ZooKeeper.sync() at the right places to prevent reading a stale value?  We do so for aliases.\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        log.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null) {\n        // We either don't know anything about this collection (maybe it's new?).\n        // see if it just got created.\n        LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n        if (tryLazyCollection.get() != null) {\n          // What do you know, it exists!\n          log.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n          lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n          constructState(Collections.singleton(collection));\n        }\n      } else if (ref.isLazilyLoaded()) {\n        log.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        log.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        log.error(\"Collection {} is not lazy nor watched!\", collection);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Forcibly refresh a collection's internal state from ZK. Try to avoid having to resort to this when\n   * a better design is possible.\n   */\n  //TODO shouldn't we call ZooKeeper.sync() at the right places to prevent reading a stale value?  We do so for aliases.\n  public void forceUpdateCollection(String collection) throws KeeperException, InterruptedException {\n\n    synchronized (getUpdateLock()) {\n      if (clusterState == null) {\n        log.warn(\"ClusterState watchers have not been initialized\");\n        return;\n      }\n\n      ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n      if (ref == null || legacyCollectionStates.containsKey(collection)) {\n        // We either don't know anything about this collection (maybe it's new?) or it's legacy.\n        // First update the legacy cluster state.\n        log.debug(\"Checking legacy cluster state for collection {}\", collection);\n        refreshLegacyClusterState(null);\n        if (!legacyCollectionStates.containsKey(collection)) {\n          // No dice, see if a new collection just got created.\n          LazyCollectionRef tryLazyCollection = new LazyCollectionRef(collection);\n          if (tryLazyCollection.get() != null) {\n            // What do you know, it exists!\n            log.debug(\"Adding lazily-loaded reference for collection {}\", collection);\n            lazyCollectionStates.putIfAbsent(collection, tryLazyCollection);\n            constructState(Collections.singleton(collection));\n          }\n        }\n      } else if (ref.isLazilyLoaded()) {\n        log.debug(\"Refreshing lazily-loaded state for collection {}\", collection);\n        if (ref.get() != null) {\n          return;\n        }\n        // Edge case: if there's no external collection, try refreshing legacy cluster state in case it's there.\n        refreshLegacyClusterState(null);\n      } else if (watchedCollectionStates.containsKey(collection)) {\n        // Exists as a watched collection, force a refresh.\n        log.debug(\"Forcing refresh of watched collection state for {}\", collection);\n        DocCollection newState = fetchCollectionState(collection, null);\n        if (updateWatchedCollection(collection, newState)) {\n          constructState(Collections.singleton(collection));\n        }\n      } else {\n        log.error(\"Collection {} is not lazy or watched!\", collection);\n      }\n    }\n\n  }\n\n","bugFix":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","f54f0eff6955cf57610f6b93dbbba3a2bf540619","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","65df8d40a052836be281bc4c87b66bf0516b4f89","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c"],"65df8d40a052836be281bc4c87b66bf0516b4f89":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","65df8d40a052836be281bc4c87b66bf0516b4f89"],"0ad30c6a479e764150a3316e57263319775f1df2":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","0ad30c6a479e764150a3316e57263319775f1df2"],"b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f54f0eff6955cf57610f6b93dbbba3a2bf540619","962cd4f5e313777f35da8f521265323e84184929"],"4eb4db7cdfde55d664b5b0c87041ec80de8178cf":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"65df8d40a052836be281bc4c87b66bf0516b4f89":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["65df8d40a052836be281bc4c87b66bf0516b4f89","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"],"4eb4db7cdfde55d664b5b0c87041ec80de8178cf":["b40d6d2c1c421c3a8eaef4f9fa4a2710576c104c"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}