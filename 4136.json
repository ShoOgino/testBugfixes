{"path":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","pathOld":"/dev/null","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      sort();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n\n    while (more) {\n      while (more && first.doc < last.doc) {      // find doc w/ all the terms\n        more = first.skipTo(last.doc);            // skip first upto last\n        firstToLast();                            // and move it to the end\n      }\n\n      if (more) {\n        // found a doc with all of the terms\n        freq = phraseFreq();                      // check for phrase\n        if (freq == 0.0f)                         // no match\n          more = last.next();                     // trigger further scanning\n        else\n          return true;                            // found a match\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"025fe58b45c52b31e5a475824ec735964a97d5a1","date":1081356034,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      init();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n\n    while (more) {\n      while (more && first.doc < last.doc) {      // find doc w/ all the terms\n        more = first.skipTo(last.doc);            // skip first upto last\n        firstToLast();                            // and move it to the end\n      }\n\n      if (more) {\n        // found a doc with all of the terms\n        freq = phraseFreq();                      // check for phrase\n        if (freq == 0.0f)                         // no match\n          more = last.next();                     // trigger further scanning\n        else\n          return true;                            // found a match\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      sort();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n\n    while (more) {\n      while (more && first.doc < last.doc) {      // find doc w/ all the terms\n        more = first.skipTo(last.doc);            // skip first upto last\n        firstToLast();                            // and move it to the end\n      }\n\n      if (more) {\n        // found a doc with all of the terms\n        freq = phraseFreq();                      // check for phrase\n        if (freq == 0.0f)                         // no match\n          more = last.next();                     // trigger further scanning\n        else\n          return true;                            // found a match\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfab81c03dd23957f875ae11ea217c44403a7874","date":1082561009,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      init();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n    return doNext();\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      init();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n\n    while (more) {\n      while (more && first.doc < last.doc) {      // find doc w/ all the terms\n        more = first.skipTo(last.doc);            // skip first upto last\n        firstToLast();                            // and move it to the end\n      }\n\n      if (more) {\n        // found a doc with all of the terms\n        freq = phraseFreq();                      // check for phrase\n        if (freq == 0.0f)                         // no match\n          more = last.next();                     // trigger further scanning\n        else\n          return true;                            // found a match\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","sourceNew":"  /** @deprecated use {@link #nextDoc()} instead. */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      init();\n      firstTime = false;\n    } else if (more) {\n      more = last.next();                         // trigger further scanning\n    }\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#next().mjava","sourceNew":null,"sourceOld":"  /** @deprecated use {@link #nextDoc()} instead. */\n  public boolean next() throws IOException {\n    return nextDoc() != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfab81c03dd23957f875ae11ea217c44403a7874":["025fe58b45c52b31e5a475824ec735964a97d5a1"],"30a558487f2298c2c19ceca9103c1b6865d64708":["cfab81c03dd23957f875ae11ea217c44403a7874"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"025fe58b45c52b31e5a475824ec735964a97d5a1":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cfab81c03dd23957f875ae11ea217c44403a7874":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"025fe58b45c52b31e5a475824ec735964a97d5a1":["cfab81c03dd23957f875ae11ea217c44403a7874"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["025fe58b45c52b31e5a475824ec735964a97d5a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}