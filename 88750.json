{"path":"solr/core/src/test/org/apache/solr/search/AnalyticsTestQParserPlugin.TestIterative#process(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"f5672eb934a241f2fe54856b60b22b3f82108999","date":1487644800,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/AnalyticsTestQParserPlugin.TestIterative#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestAnalyticsQParserPlugin.TestIterative#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"    public void process(ResponseBuilder rb, ShardRequest sreq) throws Exception {\n      int count = 0;\n      for(ShardResponse shardResponse : sreq.responses) {\n        NamedList response = shardResponse.getSolrResponse().getResponse();\n        NamedList analytics = (NamedList)response.get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        count += c.intValue();\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!count base=\"+count+\"}\");\n      params.add(\"q\",\"*:*\");\n\n\n      /*\n      *  Call back to all the shards in the response and process the result.\n       */\n\n      QueryRequest request = new QueryRequest(params);\n      List<Future<CallBack>> futures = callBack(sreq.responses, request);\n\n      int nextCount = 0;\n\n      for(Future<CallBack> future : futures) {\n        QueryResponse response = future.get().getResponse();\n        NamedList analytics = (NamedList)response.getResponse().get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        nextCount += c.intValue();\n      }\n\n      NamedList merged = new NamedList();\n      merged.add(\"mycount\", nextCount);\n      rb.rsp.add(\"analytics\", merged);\n    }\n\n","sourceOld":"    public void process(ResponseBuilder rb, ShardRequest sreq) throws Exception {\n      int count = 0;\n      for(ShardResponse shardResponse : sreq.responses) {\n        NamedList response = shardResponse.getSolrResponse().getResponse();\n        NamedList analytics = (NamedList)response.get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        count += c.intValue();\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!count base=\"+count+\"}\");\n      params.add(\"q\",\"*:*\");\n\n\n      /*\n      *  Call back to all the shards in the response and process the result.\n       */\n\n      QueryRequest request = new QueryRequest(params);\n      List<Future<CallBack>> futures = callBack(sreq.responses, request);\n\n      int nextCount = 0;\n\n      for(Future<CallBack> future : futures) {\n        QueryResponse response = future.get().getResponse();\n        NamedList analytics = (NamedList)response.getResponse().get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        nextCount += c.intValue();\n      }\n\n      NamedList merged = new NamedList();\n      merged.add(\"mycount\", nextCount);\n      rb.rsp.add(\"analytics\", merged);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/AnalyticsTestQParserPlugin.TestIterative#process(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/AnalyticsTestQParserPlugin.TestIterative#process(ResponseBuilder,ShardRequest).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    public void process(ResponseBuilder rb, ShardRequest sreq) throws Exception {\n      int count = 0;\n      for(ShardResponse shardResponse : sreq.responses) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList response = shardResponse.getSolrResponse().getResponse();\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList analytics = (NamedList)response.get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        count += c.intValue();\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!count base=\"+count+\"}\");\n      params.add(\"q\",\"*:*\");\n\n\n      /*\n      *  Call back to all the shards in the response and process the result.\n       */\n\n      QueryRequest request = new QueryRequest(params);\n      List<Future<CallBack>> futures = callBack(sreq.responses, request);\n\n      int nextCount = 0;\n\n      for(Future<CallBack> future : futures) {\n        QueryResponse response = future.get().getResponse();\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList analytics = (NamedList)response.getResponse().get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        nextCount += c.intValue();\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList merged = new NamedList();\n      merged.add(\"mycount\", nextCount);\n      rb.rsp.add(\"analytics\", merged);\n    }\n\n","sourceOld":"    public void process(ResponseBuilder rb, ShardRequest sreq) throws Exception {\n      int count = 0;\n      for(ShardResponse shardResponse : sreq.responses) {\n        NamedList response = shardResponse.getSolrResponse().getResponse();\n        NamedList analytics = (NamedList)response.get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        count += c.intValue();\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!count base=\"+count+\"}\");\n      params.add(\"q\",\"*:*\");\n\n\n      /*\n      *  Call back to all the shards in the response and process the result.\n       */\n\n      QueryRequest request = new QueryRequest(params);\n      List<Future<CallBack>> futures = callBack(sreq.responses, request);\n\n      int nextCount = 0;\n\n      for(Future<CallBack> future : futures) {\n        QueryResponse response = future.get().getResponse();\n        NamedList analytics = (NamedList)response.getResponse().get(\"analytics\");\n        Integer c = (Integer)analytics.get(\"mycount\");\n        nextCount += c.intValue();\n      }\n\n      NamedList merged = new NamedList();\n      merged.add(\"mycount\", nextCount);\n      rb.rsp.add(\"analytics\", merged);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5672eb934a241f2fe54856b60b22b3f82108999":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["f5672eb934a241f2fe54856b60b22b3f82108999"]},"commit2Childs":{"f5672eb934a241f2fe54856b60b22b3f82108999":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5672eb934a241f2fe54856b60b22b3f82108999"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}