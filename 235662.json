{"path":"lucene/test-framework/src/test/org/apache/lucene/util/TestRamUsageTesterOnWildAnimals#testOverflowMaxChainLength().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestRamUsageTesterOnWildAnimals#testOverflowMaxChainLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimatorOnWildAnimals#testOverflowMaxChainLength().mjava","sourceNew":"  public void testOverflowMaxChainLength() {\n    int UPPERLIMIT = 100000;\n    int lower = 0;\n    int upper = UPPERLIMIT;\n    \n    while (lower + 1 < upper) {\n      int mid = (lower + upper) / 2;\n      try {\n        ListElement first = new ListElement();\n        ListElement last = first;\n        for (int i = 0; i < mid; i++) {\n          last = (last.next = new ListElement());\n        }\n        RamUsageTester.sizeOf(first); // cause SOE or pass.\n        lower = mid;\n      } catch (StackOverflowError e) {\n        upper = mid;\n      }\n    }\n\n    if (lower + 1 < UPPERLIMIT) {\n      Assert.fail(\"Max object chain length till stack overflow: \" + lower);\n    }\n  }  \n\n","sourceOld":"  public void testOverflowMaxChainLength() {\n    int UPPERLIMIT = 100000;\n    int lower = 0;\n    int upper = UPPERLIMIT;\n    \n    while (lower + 1 < upper) {\n      int mid = (lower + upper) / 2;\n      try {\n        ListElement first = new ListElement();\n        ListElement last = first;\n        for (int i = 0; i < mid; i++) {\n          last = (last.next = new ListElement());\n        }\n        RamUsageTester.sizeOf(first); // cause SOE or pass.\n        lower = mid;\n      } catch (StackOverflowError e) {\n        upper = mid;\n      }\n    }\n\n    if (lower + 1 < UPPERLIMIT) {\n      Assert.fail(\"Max object chain length till stack overflow: \" + lower);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestRamUsageTesterOnWildAnimals#testOverflowMaxChainLength().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/util/TestRamUsageTesterOnWildAnimals#testOverflowMaxChainLength().mjava","sourceNew":"  public void testOverflowMaxChainLength() {\n    int UPPERLIMIT = atLeast(10000);\n    int lower = 0;\n    int upper = UPPERLIMIT;\n    \n    while (lower + 1 < upper) {\n      int mid = (lower + upper) / 2;\n      try {\n        ListElement first = new ListElement();\n        ListElement last = first;\n        for (int i = 0; i < mid; i++) {\n          last = (last.next = new ListElement());\n        }\n        RamUsageTester.sizeOf(first); // cause SOE or pass.\n        lower = mid;\n      } catch (StackOverflowError e) {\n        upper = mid;\n      }\n    }\n\n    if (lower + 1 < UPPERLIMIT) {\n      Assert.fail(\"Max object chain length till stack overflow: \" + lower);\n    }\n  }  \n\n","sourceOld":"  public void testOverflowMaxChainLength() {\n    int UPPERLIMIT = 100000;\n    int lower = 0;\n    int upper = UPPERLIMIT;\n    \n    while (lower + 1 < upper) {\n      int mid = (lower + upper) / 2;\n      try {\n        ListElement first = new ListElement();\n        ListElement last = first;\n        for (int i = 0; i < mid; i++) {\n          last = (last.next = new ListElement());\n        }\n        RamUsageTester.sizeOf(first); // cause SOE or pass.\n        lower = mid;\n      } catch (StackOverflowError e) {\n        upper = mid;\n      }\n    }\n\n    if (lower + 1 < UPPERLIMIT) {\n      Assert.fail(\"Max object chain length till stack overflow: \" + lower);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}