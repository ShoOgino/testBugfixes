{"path":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","commits":[{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d;\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      d = searcherRef.get().doc(0);\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d;\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      d = searcherRef.get().doc(0);\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d = h.getCore().withSearcher(searcher -> searcher.doc(0));\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d;\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      d = searcherRef.get().doc(0);\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/LargeFieldTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d = h.getCore().withSearcher(searcher -> searcher.doc(0));\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    // add just one document (docid 0)\n    assertU(adoc(ID_FLD, \"101\", LAZY_FIELD, \"lzy\", BIG_FIELD, \"big document field one\"));\n    assertU(commit());\n\n    // trigger the ID_FLD to get into the doc cache; don't reference other fields\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", ID_FLD)); // eager load ID_FLD; rest are lazy\n\n    // fetch the document; we know it will be from the documentCache, docId 0\n    final Document d;\n    RefCounted<SolrIndexSearcher> searcherRef = h.getCore().getSearcher();\n    try {\n      d = searcherRef.get().doc(0);\n    } finally {\n      searcherRef.decref();\n    }\n\n    assertEager(d, ID_FLD);\n    assertLazyNotLoaded(d, LAZY_FIELD);\n    assertLazyNotLoaded(d, BIG_FIELD);\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", LAZY_FIELD)); // trigger load of LAZY_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD); // loaded now\n    assertLazyNotLoaded(d, BIG_FIELD); // because big fields are handled separately\n\n    assertQ(req(\"q\", \"101\", \"df\", ID_FLD, \"fl\", BIG_FIELD)); // trigger load of BIG_FIELD\n\n    assertEager(d, ID_FLD);\n    assertLazyLoaded(d, LAZY_FIELD);\n    assertLazyLoaded(d, BIG_FIELD); // loaded now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12f7f335611574989edc8f87d25d91e89aa385b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["12f7f335611574989edc8f87d25d91e89aa385b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["12f7f335611574989edc8f87d25d91e89aa385b6","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b4eb0a25318cc756077fbde9bd3052690aed03d","12f7f335611574989edc8f87d25d91e89aa385b6"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"12f7f335611574989edc8f87d25d91e89aa385b6":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7b4eb0a25318cc756077fbde9bd3052690aed03d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}