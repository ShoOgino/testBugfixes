{"path":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      // nocommit: we could optimize the (silly) single-sub case and pretend it's a concatenation instead\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      // nocommit: we could optimize the (silly) single-sub case and pretend it's a concatenation instead\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a6d0e4c7ab9c0e1fc073fddd21f4784555be9cd","date":1463081111,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    // nocommit safe?\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c23672acbb5104509c1c2d6e3dda7a08eaf091f","date":1463128188,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    // nocommit safe?\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger.SortedDocIDMerger#SortedDocIDMerger(List[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"    private SortedDocIDMerger(List<T> subs, int maxCount) throws IOException {\n      this.subs = subs;\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n      reset();\n    }\n\n","sourceOld":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":null,"sourceOld":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a6d0e4c7ab9c0e1fc073fddd21f4784555be9cd":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d85b6e22926e7564c040d2a864f4887f6c59fa92"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["0a6d0e4c7ab9c0e1fc073fddd21f4784555be9cd"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["fb0345a2d45479f891041f8b3ce351bc975e64ac"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"0a6d0e4c7ab9c0e1fc073fddd21f4784555be9cd":["9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fb0345a2d45479f891041f8b3ce351bc975e64ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d85b6e22926e7564c040d2a864f4887f6c59fa92","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["0a6d0e4c7ab9c0e1fc073fddd21f4784555be9cd"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}