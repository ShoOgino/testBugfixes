{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterRand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFieldCacheRangeFilterRand() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test extremes, bounded on both ends\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs-1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs-2, result.length);\n    \n    // unbounded\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs-1, result.length);\n        \n    // very small sets\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",minRP,minRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",null,minRP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,maxRP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,DocValuesRangeFilter.newStringRange(\"rand\",maxRP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9274621789ce990dbfef455dabdf026bb3184821"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["484e80062d7ab2729bc82f0311d6a97dd913961a","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}