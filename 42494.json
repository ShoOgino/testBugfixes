{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","commits":[{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef]).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final int numIndexTerms = in.readInt();\n        final long termsStart = in.readLong();\n        final long indexStart = in.readLong();\n        final long packedIndexStart = in.readLong();\n        final long packedOffsetsStart = in.readLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        if (numIndexTerms > 0) {\n          final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n          fields.put(fieldInfo, new FieldIndexReader(in, fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        this.in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      } else {\n        this.in = in;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":null,"sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":null,"sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String).mjava","sourceNew":null,"sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String codecId)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION));\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) IOUtils.closeSafely(true, in);\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e8d7ba2175f47e280231533f7d3016249cea88b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","56da903869515527852ee21ea7ef7bfe414cd40d"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"efb7a19703a037c29e30440260d393500febc1f4":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["efb7a19703a037c29e30440260d393500febc1f4","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b1add9ddc0005b07550d4350720aac22dc9886b3","efb7a19703a037c29e30440260d393500febc1f4"],"56da903869515527852ee21ea7ef7bfe414cd40d":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e8d7ba2175f47e280231533f7d3016249cea88b"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"efb7a19703a037c29e30440260d393500febc1f4":["2e8d7ba2175f47e280231533f7d3016249cea88b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["efb7a19703a037c29e30440260d393500febc1f4","e79a6d080bdd5b2a8f56342cf571b5476de04180","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}