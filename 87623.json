{"path":"backwards/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTransactions.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n\n      IndexWriter writer1 = new IndexWriter(dir1, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer1.setMaxBufferedDocs(3);\n      writer1.setMergeFactor(2);\n      ((ConcurrentMergeScheduler) writer1.getMergeScheduler()).setSuppressExceptions();\n\n      IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      // Intentionally use different params so flush/merge\n      // happen @ different times\n      writer2.setMaxBufferedDocs(2);\n      writer2.setMergeFactor(3);\n      ((ConcurrentMergeScheduler) writer2.getMergeScheduler()).setSuppressExceptions();\n\n      update(writer1);\n      update(writer2);\n\n      TestTransactions.doFail = true;\n      try {\n        synchronized(lock) {\n          try {\n            writer1.prepareCommit();\n          } catch (Throwable t) {\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n          try {\n            writer2.prepareCommit();\n          } catch (Throwable t) { \t\n            writer1.rollback();\n            writer2.rollback();\n            return;\n          }\n\n          writer1.commit();\n          writer2.commit();\n        }\n      } finally {\n        TestTransactions.doFail = false;\n      }  \n\n      writer1.close();\n      writer2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}