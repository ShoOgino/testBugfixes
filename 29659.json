{"path":"modules/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a mapping int key -> int value.\n   * <p>\n   * If the key was already inside just\n   * updating the value it refers to as the given object.\n   * <p>\n   * Otherwise if the map is full, first {@link #grow()} the map.\n   * \n   * @param value\n   *            integer which maps the given value\n   * @return true always.\n   */\n  public boolean add(int value) {\n    // Does key exists?\n    int index = find(value);\n\n    // Yes!\n    if (index != 0) {\n      return true;\n    }\n\n    // Is there enough room for a new pair?\n    if (size == capacity) {\n      // No? Than grow up!\n      grow();\n    }\n\n    // Now that everything is set, the pair can be just put inside with no\n    // worries.\n    prvt_add(value);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a mapping int key -> int value.\n   * <p>\n   * If the key was already inside just\n   * updating the value it refers to as the given object.\n   * <p>\n   * Otherwise if the map is full, first {@link #grow()} the map.\n   * \n   * @param value\n   *            integer which maps the given value\n   * @return true always.\n   */\n  public boolean add(int value) {\n    // Does key exists?\n    int index = find(value);\n\n    // Yes!\n    if (index != 0) {\n      return true;\n    }\n\n    // Is there enough room for a new pair?\n    if (size == capacity) {\n      // No? Than grow up!\n      grow();\n    }\n\n    // Now that everything is set, the pair can be just put inside with no\n    // worries.\n    prvt_add(value);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a mapping int key -> int value.\n   * <p>\n   * If the key was already inside just\n   * updating the value it refers to as the given object.\n   * <p>\n   * Otherwise if the map is full, first {@link #grow()} the map.\n   * \n   * @param value\n   *            integer which maps the given value\n   * @return true always.\n   */\n  public boolean add(int value) {\n    // Does key exists?\n    int index = find(value);\n\n    // Yes!\n    if (index != 0) {\n      return true;\n    }\n\n    // Is there enough room for a new pair?\n    if (size == capacity) {\n      // No? Than grow up!\n      grow();\n    }\n\n    // Now that everything is set, the pair can be just put inside with no\n    // worries.\n    prvt_add(value);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/IntHashSet#add(int).mjava","sourceNew":"  /**\n   * Add a mapping int key -> int value.\n   * <p>\n   * If the key was already inside just\n   * updating the value it refers to as the given object.\n   * <p>\n   * Otherwise if the map is full, first {@link #grow()} the map.\n   * \n   * @param value\n   *            integer which maps the given value\n   * @return true always.\n   */\n  public boolean add(int value) {\n    // Does key exists?\n    int index = find(value);\n\n    // Yes!\n    if (index != 0) {\n      return true;\n    }\n\n    // Is there enough room for a new pair?\n    if (size == capacity) {\n      // No? Than grow up!\n      grow();\n    }\n\n    // Now that everything is set, the pair can be just put inside with no\n    // worries.\n    prvt_add(value);\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Add a mapping int key -> int value.\n   * <p>\n   * If the key was already inside just\n   * updating the value it refers to as the given object.\n   * <p>\n   * Otherwise if the map is full, first {@link #grow()} the map.\n   * \n   * @param value\n   *            integer which maps the given value\n   * @return true always.\n   */\n  public boolean add(int value) {\n    // Does key exists?\n    int index = find(value);\n\n    // Yes!\n    if (index != 0) {\n      return true;\n    }\n\n    // Is there enough room for a new pair?\n    if (size == capacity) {\n      // No? Than grow up!\n      grow();\n    }\n\n    // Now that everything is set, the pair can be just put inside with no\n    // worries.\n    prvt_add(value);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}