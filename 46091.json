{"path":"src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad13c66269254daf5cbd82979859d5bac43cd61","date":1249692315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","pathOld":"src/common/org/apache/solr/common/SolrDocument#getFieldValueMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr fields.  This function is useful for JSTL\n   */\n  public Map<String,Object> getFieldValueMap() {\n    return new Map<String,Object>() {\n      /** Get the field Value */\n      public Object get(Object key) { \n        return getFirstValue( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Object>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Object> t) {throw new UnsupportedOperationException();}\n      public Collection<Object> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Object value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n      public String toString() {return _fields.toString();}\n   };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2ad13c66269254daf5cbd82979859d5bac43cd61":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["2ad13c66269254daf5cbd82979859d5bac43cd61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["2ad13c66269254daf5cbd82979859d5bac43cd61"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ad13c66269254daf5cbd82979859d5bac43cd61":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}