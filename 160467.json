{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","commits":[{"id":"44b487964bd0a36812baf4cf5916e5b3cf0c04af","date":1213765751,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/TRStringDistance#getDistance(String,String).mjava","sourceNew":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n\n        if (n == 0) {\n            return 1;\n        } else if (m == 0) {\n            return 1;\n        }\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.min(other.length(), sa.length));\n    }\n\n","sourceOld":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n\n        if (n == 0) {\n            return 1;\n        } else if (m == 0) {\n            return 1;\n        }\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.min(other.length(), sa.length));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3","date":1235743632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","sourceNew":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n\n        if (n == 0) {\n            return 1;\n        } else if (m == 0) {\n            return 1;\n        }\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));\n    }\n\n","sourceOld":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n\n        if (n == 0) {\n            return 1;\n        } else if (m == 0) {\n            return 1;\n        }\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.min(other.length(), sa.length));\n    }\n\n","bugFix":["6000179efff4c320dafa76c7f0f088e44c4df0d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ef729ef7d982bed7997d2837565d4c63df9c81","date":1242828428,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","sourceNew":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n        if (n == 0 || m == 0) {\n          if (n == m) {\n            return 1;\n          }\n          else {\n            return 0;\n          }\n        } \n\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));\n    }\n\n","sourceOld":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n\n        if (n == 0) {\n            return 1;\n        } else if (m == 0) {\n            return 1;\n        }\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/LevensteinDistance#getDistance(String,String).mjava","sourceNew":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n        if (n == 0 || m == 0) {\n          if (n == m) {\n            return 1;\n          }\n          else {\n            return 0;\n          }\n        } \n\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));\n    }\n\n","sourceOld":"    //*****************************\n    // Compute Levenshtein distance: see org.apache.commons.lang.StringUtils#getLevenshteinDistance(String, String)\n    //*****************************\n    public float getDistance (String target, String other) {\n      char[] sa;\n      int n;\n      int p[]; //'previous' cost array, horizontally\n      int d[]; // cost array, horizontally\n      int _d[]; //placeholder to assist in swapping p and d\n      \n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length()+1 by t.length()+1,\n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        sa = target.toCharArray();\n        n = sa.length;\n        p = new int[n+1]; \n        d = new int[n+1]; \n      \n        final int m = other.length();\n        if (n == 0 || m == 0) {\n          if (n == m) {\n            return 1;\n          }\n          else {\n            return 0;\n          }\n        } \n\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i<=n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j<=m; j++) {\n            t_j = other.charAt(j-1);\n            d[0] = j;\n\n            for (i=1; i<=n; i++) {\n                cost = sa[i-1]==t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);\n            }\n\n            // copy current distance counts to 'previous row' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return 1.0f - ((float) p[n] / Math.max(other.length(), sa.length));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62ef729ef7d982bed7997d2837565d4c63df9c81":["9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3"],"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3":["44b487964bd0a36812baf4cf5916e5b3cf0c04af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44b487964bd0a36812baf4cf5916e5b3cf0c04af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["62ef729ef7d982bed7997d2837565d4c63df9c81"]},"commit2Childs":{"62ef729ef7d982bed7997d2837565d4c63df9c81":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3":["62ef729ef7d982bed7997d2837565d4c63df9c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44b487964bd0a36812baf4cf5916e5b3cf0c04af"],"44b487964bd0a36812baf4cf5916e5b3cf0c04af":["9fb1569ee65389d2a4b724f0c8ccc60c46dd53a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}