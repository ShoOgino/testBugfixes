{"path":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    Random rnd = newRandom();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n    // force merge\n    writer.optimize();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    Random rnd = newRandom();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n    // force merge\n    writer.optimize();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    Random rnd = newRandom();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n    // force merge\n    writer.optimize();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    Random rnd = newRandom();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n    // force merge\n    writer.optimize();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    Random rnd = newRandom();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n\n    // force merge\n    writer.optimize();\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, writer);\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory(random);\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory(random);\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n        \n    f2.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n        \n    f2.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(3).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1 = newField(\"f1\", \"This field has term freqs\", omitType);\n    d.add(f1);\n        \n    f2 = newField(\"f2\", \"This field has NO Tf in all docs\", normalType);     \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"e19ec8535092055101db3ede419e136b73d235ac":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["e19ec8535092055101db3ede419e136b73d235ac"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","e19ec8535092055101db3ede419e136b73d235ac"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1eb46686a27187e42311e77666a2c7026f461ebc":["962d04139994fce5193143ef35615499a9a96d78","e19ec8535092055101db3ede419e136b73d235ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","e19ec8535092055101db3ede419e136b73d235ac"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"e19ec8535092055101db3ede419e136b73d235ac":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e19ec8535092055101db3ede419e136b73d235ac","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["b21422ff1d1d56499dec481f193b402e5e8def5b","5f4e87790277826a2aea119328600dfb07761f32"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":["1eb46686a27187e42311e77666a2c7026f461ebc"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","1eb46686a27187e42311e77666a2c7026f461ebc","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}