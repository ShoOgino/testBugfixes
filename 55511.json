{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n    String useParams = (String) req.getContext().get(USEPARAM);\n    if(useParams != null) {\n      RequestParams rp = req.getCore().getSolrConfig().getRequestParams();\n      defaults = applyParamSet(rp, defaults, useParams, DEFAULTS);\n      appends = applyParamSet(rp, appends, useParams, APPENDS);\n      invariants = applyParamSet(rp, invariants, useParams, INVARIANTS);\n    }\n    useParams = req.getParams().get(USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      RequestParams rp = req.getCore().getSolrConfig().getRequestParams();\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n      defaults = applyParamSet(rp, defaults, useParams, DEFAULTS);\n      appends = applyParamSet(rp, appends, useParams, APPENDS);\n      invariants = applyParamSet(rp, invariants, useParams, INVARIANTS);\n    }\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","sourceOld":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrRequestHandler,SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n    String useParams = (String) req.getContext().get(USEPARAM);\n    if(useParams != null) {\n      RequestParams rp = req.getCore().getSolrConfig().getRequestParams();\n      defaults = applyParamSet(rp, defaults, useParams, DEFAULTS);\n      appends = applyParamSet(rp, appends, useParams, APPENDS);\n      invariants = applyParamSet(rp, invariants, useParams, INVARIANTS);\n    }\n    useParams = req.getParams().get(USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      RequestParams rp = req.getCore().getSolrConfig().getRequestParams();\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n      defaults = applyParamSet(rp, defaults, useParams, DEFAULTS);\n      appends = applyParamSet(rp, appends, useParams, APPENDS);\n      invariants = applyParamSet(rp, invariants, useParams, INVARIANTS);\n    }\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","sourceOld":"  public static void setDefaults(SolrRequestHandler handler, SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    RequestUtil.processParams(handler, req, defaults, appends, invariants);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5296efc4b319f5647b606629c093a94b23692c6":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5991832ae4bac45cecfff0fc33125aeac823d3d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}