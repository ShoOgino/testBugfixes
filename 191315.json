{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene49Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new Lucene410Codec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"TestUtil: forcing docvalues format to:\" + format);\n    }\n    return new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysDocValuesFormat(DocValuesFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"TestUtil: forcing docvalues format to:\" + format);\n    }\n    return new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysDocValuesFormat(final DocValuesFormat format) {\n    // TODO: we really need for docvalues impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing docvalues format to:\" + format);\n    }\n    return new AssertingCodec() {\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["e49088db00ea6cb232fbde9c8c646c721d4d049f","3e8715d826e588419327562287d5d6a8040d63d6"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3e8715d826e588419327562287d5d6a8040d63d6":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}