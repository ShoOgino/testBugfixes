{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb863ffa994206b3e79aafb57641cf42c76d91da","date":1344735660,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index2).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index2).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n    FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n    String field1 = null;\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    while((field1=fenum1.next()) != null) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fenum1.terms();\n      if (terms1 == null) {\n        assertNull(fenum2.terms());\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fenum2.terms();\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().size() == 1, index2.getSequentialSubReaders().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        assertEquals(norms1.size(), norms2.size());\n        for (int i = 0; i < norms1.size(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        assertEquals(norms1.size(), norms2.size());\n        for (int i = 0; i < norms1.size(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiSimpleDocValues.simpleNormValues(index1, curField);\n      NumericDocValues norms2 = MultiSimpleDocValues.simpleNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n    \n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n      DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n      if (norms1 != null && norms2 != null)\n      {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        byte[] b1 = (byte[]) norms1.getSource().getArray();\n        byte[] b2 = (byte[]) norms2.getSource().getArray();\n        assertEquals(b1.length, b2.length);\n        for (int i = 0; i < b1.length; i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n        }\n      }\n      else\n      {\n        assertSame(norms1, norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n        DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator(null);\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator(null);\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    Bits liveDocs = MultiFields.getLiveDocs(index1);\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(liveDocs, null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(liveDocs, null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        StoredDocument doc1 = index1.document(i);\n        StoredDocument doc2 = index2.document(i);\n        List<StorableField> field1 = doc1.getFields();\n        List<StorableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<StorableField> itField1 = field1.iterator();\n        Iterator<StorableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        for (int i = 0; i < index1.maxDoc(); i++) {\n          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1.get(i), norms2.get(i));\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    TreeSet<String> fields1 = new TreeSet<>(MultiFields.getIndexedFields(index1));\n    TreeSet<String> fields2 = new TreeSet<>(MultiFields.getIndexedFields(index2));\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = MultiFields.getTerms(index1, field1);\n      if (terms1 == null) {\n        assertNull(MultiFields.getTerms(index2, field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = MultiFields.getTerms(index2, field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    Fields fields1 = MultiFields.getFields(index1);\n    Fields fields2 = MultiFields.getFields(index2);\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = fields1.terms(field1);\n      if (terms1 == null) {\n        assertNull(fields2.terms(field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = fields2.terms(field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","sourceNew":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = FieldInfos.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = FieldInfos.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiBits.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiBits.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    TreeSet<String> fields1 = new TreeSet<>(FieldInfos.getIndexedFields(index1));\n    TreeSet<String> fields2 = new TreeSet<>(FieldInfos.getIndexedFields(index2));\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = MultiTerms.getTerms(index1, field1);\n      if (terms1 == null) {\n        assertNull(MultiTerms.getTerms(index2, field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = MultiTerms.getTerms(index2, field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","sourceOld":"  // TODO: maybe this can reuse the logic of test dueling codecs?\n  public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n    assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n    assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n    assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n    assertEquals(\"Single segment test differs.\", index1.leaves().size() == 1, index2.leaves().size() == 1);\n\n    // check field names\n    FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n    FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n    assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n    final int numFields = fieldInfos1.size();\n    for(int fieldID=0;fieldID<numFields;fieldID++) {\n      final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n      final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n      assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n    }\n    \n    // check norms\n    for(FieldInfo fieldInfo : fieldInfos1) {\n      String curField = fieldInfo.name;\n      NumericDocValues norms1 = MultiDocValues.getNormValues(index1, curField);\n      NumericDocValues norms2 = MultiDocValues.getNormValues(index2, curField);\n      if (norms1 != null && norms2 != null) {\n        // todo: generalize this (like TestDuelingCodecs assert)\n        while (true) {\n          int docID = norms1.nextDoc();\n          assertEquals(docID, norms2.nextDoc());\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(\"Norm different for doc \" + docID + \" and field '\" + curField + \"'.\", norms1.longValue(), norms2.longValue());\n        }\n      } else {\n        assertNull(norms1);\n        assertNull(norms2);\n      }\n    }\n    \n    // check deletions\n    final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n    final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                   liveDocs1 == null || !liveDocs1.get(i),\n                   liveDocs2 == null || !liveDocs2.get(i));\n    }\n    \n    // check stored fields\n    for (int i = 0; i < index1.maxDoc(); i++) {\n      if (liveDocs1 == null || liveDocs1.get(i)) {\n        Document doc1 = index1.document(i);\n        Document doc2 = index2.document(i);\n        List<IndexableField> field1 = doc1.getFields();\n        List<IndexableField> field2 = doc2.getFields();\n        assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n        Iterator<IndexableField> itField1 = field1.iterator();\n        Iterator<IndexableField> itField2 = field2.iterator();\n        while (itField1.hasNext()) {\n          Field curField1 = (Field) itField1.next();\n          Field curField2 = (Field) itField2.next();\n          assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n          assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n        }          \n      }\n    }\n    \n    // check dictionary and posting lists\n    TreeSet<String> fields1 = new TreeSet<>(MultiFields.getIndexedFields(index1));\n    TreeSet<String> fields2 = new TreeSet<>(MultiFields.getIndexedFields(index2));\n    Iterator<String> fenum2 = fields2.iterator();\n    for (String field1 : fields1) {\n      assertEquals(\"Different fields\", field1, fenum2.next());\n      Terms terms1 = MultiFields.getTerms(index1, field1);\n      if (terms1 == null) {\n        assertNull(MultiFields.getTerms(index2, field1));\n        continue;\n      }\n      TermsEnum enum1 = terms1.iterator();\n\n      Terms terms2 = MultiFields.getTerms(index2, field1);\n      assertNotNull(terms2);\n      TermsEnum enum2 = terms2.iterator();\n\n      while(enum1.next() != null) {\n        assertEquals(\"Different terms\", enum1.term(), enum2.next());\n        PostingsEnum tp1 = enum1.postings(null, PostingsEnum.ALL);\n        PostingsEnum tp2 = enum2.postings(null, PostingsEnum.ALL);\n\n        while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n    assertFalse(fenum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cb863ffa994206b3e79aafb57641cf42c76d91da":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1d028314cced5858683a1bb4741423d0f934257b":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["cb863ffa994206b3e79aafb57641cf42c76d91da"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cb863ffa994206b3e79aafb57641cf42c76d91da":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["ad7de846867bd14c63f9dd19df082f72c5ea9c54","d4d69c535930b5cce125cff868d40f6373dc27d4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["cb863ffa994206b3e79aafb57641cf42c76d91da","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","1d028314cced5858683a1bb4741423d0f934257b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","322360ac5185a8446d3e0b530b2068bef67cd3d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","ced66195b26fdb1f77ee00e2a77ec6918dedd766","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["0837ab0472feecb3a54260729d845f839e1cbd72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}