{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0c458270f1e988872a1a65df55c5ec6ee0dab78","date":1327508445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      final PairOutputs<Long,Long> outputsInner = new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs);\n      final PairOutputs<Long,PairOutputs.Pair<Long,Long>> outputs = new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                      outputsInner);\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1, outputs);\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      final IntsRef scratchIntsRef = new IntsRef();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef),\n                  outputs.newPair(lastDocsStart,\n                                  outputsInner.newPair((long) docFreq, totalTermFreq)));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, FREQ)) {\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+FREQ.length, scratch.length-FREQ.length, scratchUTF16);\n          totalTermFreq += ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(Util.toIntsRef(lastTerm, scratchIntsRef), outputs.newPair(lastDocsStart,\n                                                                            outputsInner.newPair((long) docFreq, totalTermFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0c458270f1e988872a1a65df55c5ec6ee0dab78":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["1ec890fad2ea96317f4429e0aa0085bb25673641","a0c458270f1e988872a1a65df55c5ec6ee0dab78"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0c458270f1e988872a1a65df55c5ec6ee0dab78"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["1ec890fad2ea96317f4429e0aa0085bb25673641","a0c458270f1e988872a1a65df55c5ec6ee0dab78"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0c458270f1e988872a1a65df55c5ec6ee0dab78":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b3be20ca1091c0b7cdb2308b9023606a5e451cec","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["817882884229bace7dc5d1b75f6b0e4aa1e47122"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["a0c458270f1e988872a1a65df55c5ec6ee0dab78","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}