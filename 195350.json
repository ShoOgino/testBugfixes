{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","sourceNew":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          LOG.debug(e.getMessage());\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#runCommandOnStream(InputStream,String).mjava","sourceNew":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      @SuppressWarnings({\"rawtypes\"})\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n      @SuppressWarnings({\"rawtypes\"})\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run a command and send the contents of an input stream to it.\n   * @param inputStream Input stream to forward to the shell command\n   * @param command shell command to run\n   * @throws IOException read or write failed\n   * @throws InterruptedException command interrupted\n   * @throws ExecutionException task submit failed\n   */\n  private static void runCommandOnStream(\n      InputStream inputStream, String command)\n      throws IOException, InterruptedException, ExecutionException {\n    ExecutorService executor = null;\n    ProcessBuilder builder = new ProcessBuilder();\n    builder.command(\n        Shell.WINDOWS ? \"cmd\" : \"bash\",\n        Shell.WINDOWS ? \"/c\" : \"-c\",\n        command);\n    Process process = builder.start();\n    int exitCode;\n    try {\n      // Consume stdout and stderr, to avoid blocking the command\n      executor = Executors.newFixedThreadPool(2);\n      Future output = executor.submit(() -> {\n        try {\n          // Read until the output stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getInputStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getInputStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n      Future error = executor.submit(() -> {\n        try {\n          // Read until the error stream receives an EOF and closed.\n          if (LOG.isDebugEnabled()) {\n            // Log directly to avoid out of memory errors\n            try (BufferedReader reader =\n                     new BufferedReader(\n                         new InputStreamReader(process.getErrorStream(),\n                             Charset.forName(\"UTF-8\")))) {\n              String line;\n              while((line = reader.readLine()) != null) {\n                LOG.debug(line);\n              }\n            }\n          } else {\n            org.apache.commons.io.IOUtils.copy(\n                process.getErrorStream(),\n                new IOUtils.NullOutputStream());\n          }\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(e.getMessage());\n          }\n        }\n      });\n\n      // Pass the input stream to the command to process\n      try {\n        org.apache.commons.io.IOUtils.copy(\n            inputStream, process.getOutputStream());\n      } finally {\n        process.getOutputStream().close();\n      }\n\n      // Wait for both stdout and stderr futures to finish\n      error.get();\n      output.get();\n    } finally {\n      // Clean up the threads\n      if (executor != null) {\n        executor.shutdown();\n      }\n      // Wait to avoid leaking the child process\n      exitCode = process.waitFor();\n    }\n\n    if (exitCode != 0) {\n      throw new IOException(\n          String.format(\n              \"Error executing command. %s \" +\n                  \"Process exited with exit code %d.\",\n              command, exitCode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}