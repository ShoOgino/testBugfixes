{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c9a458cd4ceff8755128274a56cc87271cb3d9","date":1493722297,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean recursive) {\n    Object o1 = recursive ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = recursive ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, recursive) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].val_ : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].val_ : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    else if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    else if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c","date":1496731004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    else if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Integer && o2 instanceof Integer) result = ((Integer) o1).compareTo((Integer) o2);\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    if (o1 instanceof Float && o2 instanceof Float) result = ((Float) o1).compareTo((Float) o2);\n    if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    return result == 0 ? next == null ? 0 : next.compare(r1, r2, useApprox) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":["34dd1818ff2313f17cf59834695ab7ee0c7853d7","34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#compare(Row,Row,boolean).mjava","sourceNew":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","sourceOld":"  // there are 2 modes of compare.\n  // recursive, it uses the precision to tie & when there is a tie use the next preference to compare\n  // in non-recursive mode, precision is not taken into consideration and sort is done on actual value\n  int compare(Row r1, Row r2, boolean useApprox) {\n    if (!r1.isLive && !r2.isLive) return 0;\n    if (!r1.isLive) return -1;\n    if (!r2.isLive) return 1;\n    Object o1 = useApprox ? r1.cells[idx].approxVal : r1.cells[idx].val;\n    Object o2 = useApprox ? r2.cells[idx].approxVal : r2.cells[idx].val;\n    int result = 0;\n    if (o1 instanceof Long && o2 instanceof Long) result = ((Long) o1).compareTo((Long) o2);\n    else if (o1 instanceof Double && o2 instanceof Double) result = ((Double) o1).compareTo((Double) o2);\n    else if (!o1.getClass().getName().equals(o2.getClass().getName()))  {\n      throw new RuntimeException(\"Unable to compare \" + o1 + \" of type: \" + o1.getClass().getName() + \" from \" + r1.cells[idx].toString() + \" and \" + o2 + \" of type: \" + o2.getClass().getName() + \" from \" + r2.cells[idx].toString());\n    }\n    return result == 0 ? (next == null ? 0 : next.compare(r1, r2, useApprox)) : sort.sortval * result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1f6b20dc453cee198956989b90aa24bef0232bcf","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"4789a7dd0b2e11e02b4c3ec148b3357c86fd4b4c":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}