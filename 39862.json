{"path":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(new SlowMultiReaderWrapper(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (random.nextBoolean()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        // we cannot use SlowMR for sorted bytes, because it returns a null sortedsource\n        boolean useSlowMRWrapper = types != SORTED_BYTES && random.nextBoolean();\n        writer.addIndexes(useSlowMRWrapper ? new SlowMultiReaderWrapper(open) : open);\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(new SlowMultiReaderWrapper(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer, new DocValuesField(\"promote\"),\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(new SlowMultiReaderWrapper(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer, new DocValuesField(\"promote\"),\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(new SlowMultiReaderWrapper(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(new SlowMultiReaderWrapper(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#runTest(EnumSet[Type],TestType).mjava","sourceNew":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","sourceOld":"  private void runTest(EnumSet<Type> types, TestType type)\n      throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int num_1 = atLeast(200);\n    int num_2 = atLeast(200);\n    int num_3 = atLeast(200);\n    long[] values = new long[num_1 + num_2 + num_3];\n    index(writer,\n        randomValueType(types, random), values, 0, num_1);\n    writer.commit();\n    \n    index(writer,\n        randomValueType(types, random), values, num_1, num_2);\n    writer.commit();\n    \n    if (random.nextInt(4) == 0) {\n      // once in a while use addIndexes\n      writer.forceMerge(1);\n      \n      Directory dir_2 = newDirectory() ;\n      IndexWriter writer_2 = new IndexWriter(dir_2,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      index(writer_2,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n      writer_2.commit();\n      writer_2.close();\n      if (rarely()) {\n        writer.addIndexes(dir_2);\n      } else {\n        // do a real merge here\n        IndexReader open = IndexReader.open(dir_2);\n        writer.addIndexes(SlowCompositeReaderWrapper.wrap(open));\n        open.close();\n      }\n      dir_2.close();\n    } else {\n      index(writer,\n          randomValueType(types, random), values, num_1 + num_2, num_3);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n    assertValues(type, dir, values);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa0f44f887719e97183771e977cfc4bfb485b766","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}