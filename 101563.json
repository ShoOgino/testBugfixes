{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getFlagParsingStrategy(String).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getFlagParsingStrategy(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}