{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new TermFreqIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new TermFreqPayloadIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new TermFreqIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new TermFreqPayloadIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.sizeInBytes() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":["d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    FreeTextSuggester sug = new FreeTextSuggester(new MockAnalyzer(random()));\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\");\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\", false);\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429","date":1590107358,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testWiki().mjava","sourceNew":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\");\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n    lfd.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testWiki() throws Exception {\n    final LineFileDocs lfd = new LineFileDocs(null, \"/lucenedata/enwiki/enwiki-20120502-lines-1k.txt\");\n    // Skip header:\n    lfd.nextDoc();\n    Analyzer analyzer = new MockAnalyzer(random());\n    FreeTextSuggester sug = new FreeTextSuggester(analyzer);\n    sug.build(new InputIterator() {\n\n        private int count;\n\n        @Override\n        public long weight() {\n          return 1;\n        }\n\n        @Override\n        public BytesRef next() {\n          Document doc;\n          try {\n            doc = lfd.nextDoc();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n          if (doc == null) {\n            return null;\n          }\n          if (count++ == 10000) {\n            return null;\n          }\n          return new BytesRef(doc.get(\"body\"));\n        }\n\n        @Override\n        public BytesRef payload() {\n          return null;\n        }\n\n        @Override\n        public boolean hasPayloads() {\n          return false;\n        }\n\n        @Override\n        public Set<BytesRef> contexts() {\n          return null;\n        }\n\n        @Override\n        public boolean hasContexts() {\n          return false;\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(sug.ramBytesUsed() + \" bytes\");\n\n      List<LookupResult> results = sug.lookup(\"general r\", 10);\n      System.out.println(\"results:\");\n      for(LookupResult result : results) {\n        System.out.println(\"  \" + result);\n      }\n    }\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8405d98acebb7e287bf7ac40e937ba05b8661285","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"221076a44effb5561a3b799974ba1a35119fbcc0":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["221076a44effb5561a3b799974ba1a35119fbcc0"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8405d98acebb7e287bf7ac40e937ba05b8661285":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"221076a44effb5561a3b799974ba1a35119fbcc0":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","221076a44effb5561a3b799974ba1a35119fbcc0"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}