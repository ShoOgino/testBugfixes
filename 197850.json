{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * @return values of params set by round, for reports lines.\r\n   */\r\n  public String getColsValuesForValsByRound(int roundNum) {\r\n    if (colForValByRound.size()==0) {\r\n      return \"\";\r\n    }\r\n    StringBuffer sb = new StringBuffer(); \r\n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\r\n      String name = (String) it.next();\r\n      String colName = (String) colForValByRound.get(name);\r\n      String template = \" \"+colName;\r\n      if (roundNum<0) {\r\n        // just append blanks\r\n        sb.append(Format.formatPaddLeft(\"-\",template));\r\n      } else {\r\n        // append actual values, for that round\r\n        Object a = valByRound.get(name);\r\n        if (a instanceof int[]) {\r\n          int ai[] = (int[]) a;\r\n          int n = roundNum % ai.length;\r\n          sb.append(Format.format(ai[n],template));\r\n        } else {\r\n          boolean ab[] = (boolean[]) a;\r\n          int n = roundNum % ab.length;\r\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\r\n        }\r\n      }\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\r\n   * @return values of params set by round, for reports lines.\r\n   */\r\n  public String getColsValuesForValsByRound(int roundNum) {\r\n    if (colForValByRound.size()==0) {\r\n      return \"\";\r\n    }\r\n    StringBuffer sb = new StringBuffer(); \r\n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\r\n      String name = (String) it.next();\r\n      String colName = (String) colForValByRound.get(name);\r\n      String template = \" \"+colName;\r\n      if (roundNum<0) {\r\n        // just append blanks\r\n        sb.append(Format.formatPaddLeft(\"-\",template));\r\n      } else {\r\n        // append actual values, for that round\r\n        Object a = valByRound.get(name);\r\n        if (a instanceof int[]) {\r\n          int ai[] = (int[]) a;\r\n          int n = roundNum % ai.length;\r\n          sb.append(Format.format(ai[n],template));\r\n        } else {\r\n          boolean ab[] = (boolean[]) a;\r\n          int n = roundNum % ab.length;\r\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\r\n        }\r\n      }\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807ac6d1222d758e557255e78509486936aab12d","date":1192100740,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, (float) ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":["2fa9152d954637ac099927962fbd095563a1a864"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fa9152d954637ac099927962fbd095563a1a864","date":1192104631,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, (float) ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":["807ac6d1222d758e557255e78509486936aab12d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (Iterator it = colForValByRound.keySet().iterator(); it.hasNext();) {\n      String name = (String) it.next();\n      String colName = (String) colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size()==0) {\n      return \"\";\n    }\n    StringBuffer sb = new StringBuffer(); \n    for (final String name  : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \"+colName;\n      if (roundNum<0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\",template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n],template));\n        }\n        else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n],template));\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\"+ab[n],template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["2fa9152d954637ac099927962fbd095563a1a864"],"807ac6d1222d758e557255e78509486936aab12d":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fa9152d954637ac099927962fbd095563a1a864":["807ac6d1222d758e557255e78509486936aab12d"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"807ac6d1222d758e557255e78509486936aab12d":["2fa9152d954637ac099927962fbd095563a1a864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"2fa9152d954637ac099927962fbd095563a1a864":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["807ac6d1222d758e557255e78509486936aab12d"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}