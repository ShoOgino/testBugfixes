{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","sourceNew":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == 0 ? 1 : startFacetOrd;\n        if (mergePos < maxTermPos) {\n          tenum.seekExact(mergePos);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","sourceOld":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == 0 ? 1 : startFacetOrd;\n        if (mergePos < maxTermPos) {\n          tenum.seekExact(mergePos);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","sourceNew":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","sourceOld":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == 0 ? 1 : startFacetOrd;\n        if (mergePos < maxTermPos) {\n          tenum.seekExact(mergePos);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","sourceNew":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","sourceOld":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == 0 ? 1 : startFacetOrd;\n        if (mergePos < maxTermPos) {\n          tenum.seekExact(mergePos);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","bugFix":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","sourceNew":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","sourceOld":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV.SegmentResult#SegmentResult(int[],int,TermsEnum,int,int).mjava","sourceNew":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","sourceOld":"      SegmentResult(int[] counts, int total, TermsEnum tenum, int startFacetOrd, int endFacetOrd) throws IOException {\n        super(counts, total - counts[0], counts[0], endFacetOrd+1);\n        this.tenum = tenum;\n        this.mergePos = startFacetOrd == -1 ? 1 : startFacetOrd+1;\n        if (mergePos < maxTermPos) {\n          assert tenum != null;\n          tenum.seekExact(startFacetOrd == -1 ? 0 : startFacetOrd);\n          mergeTerm = tenum.term();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","854f97cd3613b9579fba83755c80b697e2f3993f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","854f97cd3613b9579fba83755c80b697e2f3993f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"854f97cd3613b9579fba83755c80b697e2f3993f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}