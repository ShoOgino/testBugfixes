{"path":"solr/src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"116545389190ea5d0d9a35977d09ef0fe49716ac","date":1272959441,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"116545389190ea5d0d9a35977d09ef0fe49716ac":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116545389190ea5d0d9a35977d09ef0fe49716ac"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"116545389190ea5d0d9a35977d09ef0fe49716ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}