{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilderTest#test3Frags().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilderTest#test3Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilderTest#test3Frags().mjava","sourceNew":"  public void test3Frags() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(F, \"c\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = ffl(query, \"a b b b b b b b b b b b a b a b b b b b c a a b b\" );\n    ScoreOrderFragmentsBuilder sofb = new ScoreOrderFragmentsBuilder();\n    String[] f = sofb.createFragments( reader, 0, F, ffl, 3 );\n    assertEquals( 3, f.length );\n    // check score order\n    assertEquals( \"<b>c</b> <b>a</b> <b>a</b> b b\", f[0] );\n    assertEquals( \"b b <b>a</b> b <b>a</b> b b b b b c\", f[1] );\n    assertEquals( \"<b>a</b> b b b b b b b b b b\", f[2] );\n  }\n\n","sourceOld":"  public void test3Frags() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(F, \"c\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = ffl(query, \"a b b b b b b b b b b b a b a b b b b b c a a b b\" );\n    ScoreOrderFragmentsBuilder sofb = new ScoreOrderFragmentsBuilder();\n    String[] f = sofb.createFragments( reader, 0, F, ffl, 3 );\n    assertEquals( 3, f.length );\n    // check score order\n    assertEquals( \"<b>c</b> <b>a</b> <b>a</b> b b\", f[0] );\n    assertEquals( \"b b <b>a</b> b <b>a</b> b b b b b c\", f[1] );\n    assertEquals( \"<b>a</b> b b b b b b b b b b\", f[2] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilderTest#test3Frags().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilderTest#test3Frags().mjava","sourceNew":"  public void test3Frags() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(F, \"c\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = ffl(query.build(), \"a b b b b b b b b b b b a b a b b b b b c a a b b\" );\n    ScoreOrderFragmentsBuilder sofb = new ScoreOrderFragmentsBuilder();\n    String[] f = sofb.createFragments( reader, 0, F, ffl, 3 );\n    assertEquals( 3, f.length );\n    // check score order\n    assertEquals( \"<b>c</b> <b>a</b> <b>a</b> b b\", f[0] );\n    assertEquals( \"b b <b>a</b> b <b>a</b> b b b b b c\", f[1] );\n    assertEquals( \"<b>a</b> b b b b b b b b b b\", f[2] );\n  }\n\n","sourceOld":"  public void test3Frags() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"a\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(F, \"c\")), BooleanClause.Occur.SHOULD);\n\n    FieldFragList ffl = ffl(query, \"a b b b b b b b b b b b a b a b b b b b c a a b b\" );\n    ScoreOrderFragmentsBuilder sofb = new ScoreOrderFragmentsBuilder();\n    String[] f = sofb.createFragments( reader, 0, F, ffl, 3 );\n    assertEquals( 3, f.length );\n    // check score order\n    assertEquals( \"<b>c</b> <b>a</b> <b>a</b> b b\", f[0] );\n    assertEquals( \"b b <b>a</b> b <b>a</b> b b b b b c\", f[1] );\n    assertEquals( \"<b>a</b> b b b b b b b b b b\", f[2] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}