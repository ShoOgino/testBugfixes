{"path":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            try {\n              if (doc > values.docID()) {\n                values.advance(doc);\n              }\n              if (doc == values.docID()) {\n                for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                  if (bits.get(ord)) {\n                    return true;\n                  }\n                }\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            try {\n              if (doc > values.docID()) {\n                values.advance(doc);\n              }\n              if (doc == values.docID()) {\n                for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                  if (bits.get(ord)) {\n                    return true;\n                  }\n                }\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            try {\n              if (doc > values.docID()) {\n                values.advance(doc);\n              }\n              if (doc == values.docID()) {\n                for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                  if (bits.get(ord)) {\n                    return true;\n                  }\n                }\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec","date":1479218146,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            try {\n              if (doc > values.docID()) {\n                values.advance(doc);\n              }\n              if (doc == values.docID()) {\n                for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                  if (bits.get(ord)) {\n                    return true;\n                  }\n                }\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            try {\n              if (doc > values.docID()) {\n                values.advance(doc);\n              }\n              if (doc == values.docID()) {\n                for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                  if (bits.get(ord)) {\n                    return true;\n                  }\n                }\n              }\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb","date":1481818674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        boolean matchesAtLeastOneTerm = false;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            matchesAtLeastOneTerm = true;\n            bits.set(ord);\n          }\n        }\n        if (matchesAtLeastOneTerm == false) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 3; // lookup in a bitset\n          }\n\n        });\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb":["e59d3612d24b4c29c5affe50a48f7fa0e342d4ec"],"706a7a3396c030cc66dda92a0492eb492131c4c0":["6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb"],"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb","706a7a3396c030cc66dda92a0492eb492131c4c0"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e59d3612d24b4c29c5affe50a48f7fa0e342d4ec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["21019aa828c8c9b0153877543a8b3f200bf2ca19","6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"]},"commit2Childs":{"6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","9856095f7afb5a607bf5e65077615ed91273508c"],"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e59d3612d24b4c29c5affe50a48f7fa0e342d4ec":["6b2b4edc1ab85940153f1b5a0eeb7ee6f4f4bafb","21019aa828c8c9b0153877543a8b3f200bf2ca19"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["9856095f7afb5a607bf5e65077615ed91273508c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["21019aa828c8c9b0153877543a8b3f200bf2ca19"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e59d3612d24b4c29c5affe50a48f7fa0e342d4ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}