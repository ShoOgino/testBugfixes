{"path":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","commits":[{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","pathOld":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#getIANARootZoneDatabase().mjava","sourceNew":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","sourceOld":"  /**\n   * Downloads the IANA Root Zone Database.\n   * @return downcased sorted set of ASCII TLDs\n   * @throws java.io.IOException if there is a problem downloading the database \n   */\n  private SortedSet<String> getIANARootZoneDatabase() throws IOException {\n    final SortedSet<String> TLDs = new TreeSet<String>();\n    final URLConnection connection = tldFileURL.openConnection();\n    connection.setUseCaches(false);\n    connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n    connection.connect();\n    tldFileLastModified = connection.getLastModified();\n    BufferedReader reader = new BufferedReader\n      (new InputStreamReader(connection.getInputStream(), \"US-ASCII\"));\n    try {\n      String line;\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = TLD_PATTERN_1.matcher(line);\n        if (matcher.matches()) {\n          TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n        } else {\n          matcher = TLD_PATTERN_2.matcher(line);\n          if (matcher.matches()) {\n            TLDs.add(matcher.group(1).toLowerCase(Locale.US));\n          }\n        }\n      }\n    } finally {\n      reader.close();\n    }\n    return TLDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["683d3f90dda2bbb999c3ce855706d74563a53680"],"683d3f90dda2bbb999c3ce855706d74563a53680":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","683d3f90dda2bbb999c3ce855706d74563a53680"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"683d3f90dda2bbb999c3ce855706d74563a53680":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}