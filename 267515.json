{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","commits":[{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<ReplicaInfo>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<ReplicaInfo>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<ReplicaInfo>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<ReplicaInfo>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":"  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<ReplicaInfo>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<ReplicaInfo>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<Replica>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<Replica>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<ReplicaInfo>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<ReplicaInfo>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#lazyCopyReplicas(String,String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void lazyCopyReplicas(String coll, String shard) {\n    globalCache = new HashMap();\n    Map cacheCopy = new HashMap<>(perCollCache);\n    cacheCopy.remove(coll);//todo optimize at shard level later\n    perCollCache = cacheCopy;\n    if (isAlreadyCopied) return;//caches need to be invalidated but the rest can remain as is\n\n    Map<String, Map<String, List<Replica>>> replicasCopy = new HashMap<>(collectionVsShardVsReplicas);\n    Map<String, List<Replica>> oneColl = replicasCopy.get(coll);\n    if (oneColl != null) {\n      replicasCopy.put(coll, Utils.getDeepCopy(oneColl, 2));\n    }\n    collectionVsShardVsReplicas = replicasCopy;\n    isAlreadyCopied = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["527adea7ce767368d7317339023e18e39702132e"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"527adea7ce767368d7317339023e18e39702132e":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}