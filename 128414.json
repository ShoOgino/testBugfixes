{"path":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c9885566d6f83ba835be67d76ecbf214685052","date":1317096458,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f","date":1338477957,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n    boolean enablePositionIncrements = true;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","60c9885566d6f83ba835be67d76ecbf214685052"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    CachingTokenFilter buffer = null;\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    try (TokenStream source = analyzer.tokenStream(field, queryText)) {\n      source.reset();\n      buffer = new CachingTokenFilter(source);\n      \n      buffer.reset();\n      \n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n      \n      boolean hasMoreTokens = false;\n      if (termAtt != null) {\n        try {\n          hasMoreTokens = buffer.incrementToken();\n          while (hasMoreTokens) {\n            numTokens++;\n            int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n            if (positionIncrement != 0) {\n              positionCount += positionIncrement;\n            } else {\n              severalTokensAtSamePosition = true;\n            }\n            hasMoreTokens = buffer.incrementToken();\n          }\n        } catch (IOException e) {\n          // ignore\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // rewind the buffer stream\n    buffer.reset();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, queryText);\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    buffer.reset();\n\n    if (buffer.hasAttribute(CharTermAttribute.class)) {\n      termAtt = buffer.getAttribute(CharTermAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","4d3e8520fd031bab31fd0e4d480e55958bc45efe","c83d6c4335f31cae14f625a222bc842f20073dcd","60c9885566d6f83ba835be67d76ecbf214685052"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#parseFieldQuery(QParser,Analyzer,String,String).mjava","sourceNew":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    // note, this method always worked this way (but nothing calls it?) because it has no idea of quotes...\n    return new QueryBuilder(analyzer).createPhraseQuery(field, queryText);\n  }\n\n","sourceOld":"  static Query parseFieldQuery(QParser parser, Analyzer analyzer, String field, String queryText) {\n    int phraseSlop = 0;\n\n    // most of the following code is taken from the Lucene QueryParser\n\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    CachingTokenFilter buffer = null;\n    CharTermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    try (TokenStream source = analyzer.tokenStream(field, queryText)) {\n      source.reset();\n      buffer = new CachingTokenFilter(source);\n      \n      buffer.reset();\n      \n      if (buffer.hasAttribute(CharTermAttribute.class)) {\n        termAtt = buffer.getAttribute(CharTermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n      \n      boolean hasMoreTokens = false;\n      if (termAtt != null) {\n        try {\n          hasMoreTokens = buffer.incrementToken();\n          while (hasMoreTokens) {\n            numTokens++;\n            int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n            if (positionIncrement != 0) {\n              positionCount += positionIncrement;\n            } else {\n              severalTokensAtSamePosition = true;\n            }\n            hasMoreTokens = buffer.incrementToken();\n          }\n        } catch (IOException e) {\n          // ignore\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // rewind the buffer stream\n    buffer.reset();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.toString();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      // return newTermQuery(new Term(field, term));\n      return new TermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          // BooleanQuery q = newBooleanQuery(true);\n          BooleanQuery q = new BooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            // Query currentQuery = newTermQuery(new Term(field, term));\n            Query currentQuery = new TermQuery(new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          // MultiPhraseQuery mpq = newMultiPhraseQuery();\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List multiTerms = new ArrayList();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[multiTerms.size()]),position);\n          return mpq;\n        }\n      }\n      else {\n        // PhraseQuery pq = newPhraseQuery();\n        PhraseQuery pq = new PhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          position += positionIncrement;\n          pq.add(new Term(field, term),position);\n        }\n        return pq;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c9885566d6f83ba835be67d76ecbf214685052":["c26f00b574427b55127e869b935845554afde1fa"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["60c9885566d6f83ba835be67d76ecbf214685052"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1c1dd5dce93e4fa48898dabc7e012560acda425"]},"commit2Childs":{"60c9885566d6f83ba835be67d76ecbf214685052":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["60c9885566d6f83ba835be67d76ecbf214685052"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["c07efcc2ade26d8d6ffd4a2546d60e9d8a25ed7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}