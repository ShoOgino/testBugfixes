{"path":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","commits":[{"id":"eaa700f486925d2ca49ef079eb9209fc07cdffa4","date":1251322093,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,String,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, String index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(new File(index)), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File,File,boolean).mjava","sourceNew":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","sourceOld":"  private static void indexDocs(File file, File index, boolean create)\n       throws Exception {\n    if (!create) {\t\t\t\t  // incrementally update\n\n      reader = IndexReader.open(FSDirectory.open(index), false);\t\t  // open existing index\n      uidIter = reader.terms(new Term(\"uid\", \"\")); // init uid iterator\n\n      indexDocs(file);\n\n      if (deleting) {\t\t\t\t  // delete rest of stale docs\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\") {\n          System.out.println(\"deleting \" +\n              HTMLDocument.uid2url(uidIter.term().text()));\n          reader.deleteDocuments(uidIter.term());\n          uidIter.next();\n        }\n        deleting = false;\n      }\n\n      uidIter.close();\t\t\t\t  // close uid iterator\n      reader.close();\t\t\t\t  // close existing index\n\n    } else\t\t\t\t\t  // don't have exisiting\n      indexDocs(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}