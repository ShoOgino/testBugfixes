{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteIndexFiles(Directory,Map[String,Integer],IndexCommit).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteIndexFiles(Directory,Map[String,Integer],IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the index files associated with specified <code>indexCommit</code> provided they\n   * are not referred by some other {@linkplain IndexCommit}.\n   *\n   * @param dir The index directory containing the {@linkplain IndexCommit} to be deleted.\n   * @param refCounts A map containing reference counts for each file associated with every {@linkplain IndexCommit}\n   *                  in the specified directory.\n   * @param indexCommit The {@linkplain IndexCommit} whose files need to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteIndexFiles ( Directory dir, Map<String, Integer> refCounts, IndexCommit indexCommit ) throws IOException {\n    log.info(\"Deleting index files for index commit with generation {} in directory {}\", indexCommit.getGeneration(), dir);\n    for (String fileName : indexCommit.getFileNames()) {\n      try {\n        // Ensure that a file being deleted is not referred by some other commit.\n        int ref = refCounts.getOrDefault(fileName, 0);\n        log.debug(\"Reference count for file {} is {}\", fileName, ref);\n        if (ref == 0) {\n          dir.deleteFile(fileName);\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to delete file {} in directory {} due to exception {}\", fileName, dir, e.getMessage());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteIndexFiles(Directory,Map[String,Integer],IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes the index files associated with specified <code>indexCommit</code> provided they\n   * are not referred by some other {@linkplain IndexCommit}.\n   *\n   * @param dir The index directory containing the {@linkplain IndexCommit} to be deleted.\n   * @param refCounts A map containing reference counts for each file associated with every {@linkplain IndexCommit}\n   *                  in the specified directory.\n   * @param indexCommit The {@linkplain IndexCommit} whose files need to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteIndexFiles ( Directory dir, Map<String, Integer> refCounts, IndexCommit indexCommit ) throws IOException {\n    log.info(\"Deleting index files for index commit with generation {} in directory {}\", indexCommit.getGeneration(), dir);\n    for (String fileName : indexCommit.getFileNames()) {\n      try {\n        // Ensure that a file being deleted is not referred by some other commit.\n        int ref = refCounts.getOrDefault(fileName, 0);\n        log.debug(\"Reference count for file {} is {}\", fileName, ref);\n        if (ref == 0) {\n          dir.deleteFile(fileName);\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to delete file {} in directory {} due to exception {}\", fileName, dir, e.getMessage());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":4,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteIndexFiles(Directory,Map[String,Integer],IndexCommit).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method deletes the index files associated with specified <code>indexCommit</code> provided they\n   * are not referred by some other {@linkplain IndexCommit}.\n   *\n   * @param dir The index directory containing the {@linkplain IndexCommit} to be deleted.\n   * @param refCounts A map containing reference counts for each file associated with every {@linkplain IndexCommit}\n   *                  in the specified directory.\n   * @param indexCommit The {@linkplain IndexCommit} whose files need to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteIndexFiles ( Directory dir, Map<String, Integer> refCounts, IndexCommit indexCommit ) throws IOException {\n    log.info(\"Deleting index files for index commit with generation {} in directory {}\", indexCommit.getGeneration(), dir);\n    for (String fileName : indexCommit.getFileNames()) {\n      try {\n        // Ensure that a file being deleted is not referred by some other commit.\n        int ref = refCounts.getOrDefault(fileName, 0);\n        log.debug(\"Reference count for file {} is {}\", fileName, ref);\n        if (ref == 0) {\n          dir.deleteFile(fileName);\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to delete file {} in directory {} due to exception {}\", fileName, dir, e.getMessage());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e13696c44d3e2405098726359ab81dab178e7bc"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["3e13696c44d3e2405098726359ab81dab178e7bc","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}