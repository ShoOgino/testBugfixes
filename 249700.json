{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","sourceNew":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","sourceOld":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextShingle().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>Makes the next token a shingle of length {@link #gramSize}, \n   * composed of tokens taken from {@link #inputWindow}.\n   * <p>Callers of this method must first insure that there are at least \n   * <code>gramSize</code> tokens available in <code>inputWindow</code>.\n   */\n  private void getNextShingle() {\n    int startOffset = offsetAtt.startOffset();\n\n    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position\n    if (gramSize.getValue() == minShingleSize) {\n      // Clear the shingle text buffer if this is the first shingle\n      // at the current position in the input stream.\n      shingleBuilder.setLength(0);\n      minTokNum = 0;\n    }\n    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {\n      if (tokNum > 0) {\n        shingleBuilder.append(tokenSeparator);\n      }\n      restoreState(inputWindow.get(tokNum));\n      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());\n    }\n    char[] termBuffer = termAtt.termBuffer();\n    int termLength = shingleBuilder.length();\n    if (termBuffer.length < termLength) {\n      termBuffer = termAtt.resizeTermBuffer(termLength);\n    }\n    shingleBuilder.getChars(0, termLength, termBuffer, 0);\n    termAtt.setTermLength(termLength);\n    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);\n    typeAtt.setType(tokenType);\n    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}