{"path":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","commits":[{"id":"cd65a3c65e7917a381c935b0b663d8e783bd9a1e","date":1339372221,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTokens(Token[] tokens) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    boolean success = false;\n    try {\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n      // store some term vectors for the checkindex cross-check\n      ft.setStoreTermVectors(true);\n      ft.setStoreTermVectorPositions(true);\n      ft.setStoreTermVectorOffsets(true);\n     \n      Document doc = new Document();\n      doc.add(new Field(\"body\", new CannedTokenStream(tokens), ft));\n      riw.addDocument(doc);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(riw, dir);\n      } else {\n        IOUtils.closeWhileHandlingException(riw, dir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","sourceNew":"  private void checkTokens(Token[] tokens) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    boolean success = false;\n    try {\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n      // store some term vectors for the checkindex cross-check\n      ft.setStoreTermVectors(true);\n      ft.setStoreTermVectorPositions(true);\n      ft.setStoreTermVectorOffsets(true);\n     \n      Document doc = new Document();\n      doc.add(new Field(\"body\", new CannedTokenStream(tokens), ft));\n      riw.addDocument(doc);\n      riw.shutdown();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dir);\n      } else {\n        IOUtils.closeWhileHandlingException(riw, dir);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkTokens(Token[] tokens) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    boolean success = false;\n    try {\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n      // store some term vectors for the checkindex cross-check\n      ft.setStoreTermVectors(true);\n      ft.setStoreTermVectorPositions(true);\n      ft.setStoreTermVectorOffsets(true);\n     \n      Document doc = new Document();\n      doc.add(new Field(\"body\", new CannedTokenStream(tokens), ft));\n      riw.addDocument(doc);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(riw, dir);\n      } else {\n        IOUtils.closeWhileHandlingException(riw, dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsOffsets#checkTokens(Token[]).mjava","sourceNew":"  private void checkTokens(Token[] tokens) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    boolean success = false;\n    try {\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n      // store some term vectors for the checkindex cross-check\n      ft.setStoreTermVectors(true);\n      ft.setStoreTermVectorPositions(true);\n      ft.setStoreTermVectorOffsets(true);\n     \n      Document doc = new Document();\n      doc.add(new Field(\"body\", new CannedTokenStream(tokens), ft));\n      riw.addDocument(doc);\n      riw.close();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dir);\n      } else {\n        IOUtils.closeWhileHandlingException(riw, dir);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkTokens(Token[] tokens) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n    boolean success = false;\n    try {\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n      // store some term vectors for the checkindex cross-check\n      ft.setStoreTermVectors(true);\n      ft.setStoreTermVectorPositions(true);\n      ft.setStoreTermVectorOffsets(true);\n     \n      Document doc = new Document();\n      doc.add(new Field(\"body\", new CannedTokenStream(tokens), ft));\n      riw.addDocument(doc);\n      riw.shutdown();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dir);\n      } else {\n        IOUtils.closeWhileHandlingException(riw, dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd65a3c65e7917a381c935b0b663d8e783bd9a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cd65a3c65e7917a381c935b0b663d8e783bd9a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"cd65a3c65e7917a381c935b0b663d8e783bd9a1e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd65a3c65e7917a381c935b0b663d8e783bd9a1e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}