{"path":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","commits":[{"id":"5220c264531ed933424a495eb8ed8ada158961cc","date":1493367833,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"/dev/null","sourceNew":"  static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    Filter filter = null;\n    if (parentCache != null) {\n      filter = (Filter) parentCache.get(parentList);\n    }\n    BitDocIdSetFilterWrapper result;\n    if (filter instanceof BitDocIdSetFilterWrapper) {\n      result = (BitDocIdSetFilterWrapper) filter;\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n      if (parentCache != null) {\n        parentCache.put(parentList, result);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"/dev/null","sourceNew":"  static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    Filter filter = null;\n    if (parentCache != null) {\n      filter = (Filter) parentCache.get(parentList);\n    }\n    BitDocIdSetFilterWrapper result;\n    if (filter instanceof BitDocIdSetFilterWrapper) {\n      result = (BitDocIdSetFilterWrapper) filter;\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n      if (parentCache != null) {\n        parentCache.put(parentList, result);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24d1e8d5bdb993e38677e49c2fb4f7008b24895","date":1567089468,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","sourceNew":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    Filter filter = null;\n    if (parentCache != null) {\n      filter = (Filter) parentCache.get(parentList);\n    }\n    BitDocIdSetFilterWrapper result;\n    if (filter instanceof BitDocIdSetFilterWrapper) {\n      result = (BitDocIdSetFilterWrapper) filter;\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n      if (parentCache != null) {\n        parentCache.put(parentList, result);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    Filter filter = null;\n    if (parentCache != null) {\n      filter = (Filter) parentCache.get(parentList);\n    }\n    BitDocIdSetFilterWrapper result;\n    if (filter instanceof BitDocIdSetFilterWrapper) {\n      result = (BitDocIdSetFilterWrapper) filter;\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n      if (parentCache != null) {\n        parentCache.put(parentList, result);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfa27be7bde9d711ce2b418fadc555654849383f","date":1573652589,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","sourceNew":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","sourceOld":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    Filter filter = null;\n    if (parentCache != null) {\n      filter = (Filter) parentCache.get(parentList);\n    }\n    BitDocIdSetFilterWrapper result;\n    if (filter instanceof BitDocIdSetFilterWrapper) {\n      result = (BitDocIdSetFilterWrapper) filter;\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n      if (parentCache != null) {\n        parentCache.put(parentList, result);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","sourceNew":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","sourceOld":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","sourceNew":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","sourceOld":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed7576365aa15478ffb164ad40e9e556e294885e","date":1590803084,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser#getCachedFilter(SolrQueryRequest,Query).mjava","sourceNew":null,"sourceOld":"  public static BitDocIdSetFilterWrapper getCachedFilter(final SolrQueryRequest request, Query parentList) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, Filter> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    // lazily retrieve from solr cache\n    BitDocIdSetFilterWrapper result;\n    if (parentCache != null) {\n      Filter filter = parentCache.computeIfAbsent(parentList,\n          query -> new BitDocIdSetFilterWrapper(createParentFilter(query)));\n      if (filter instanceof BitDocIdSetFilterWrapper) {\n        result = (BitDocIdSetFilterWrapper) filter;\n      } else {\n        result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n        // non-atomic update of existing entry to ensure strong-typing\n        parentCache.put(parentList, result);\n      }\n    } else {\n      result = new BitDocIdSetFilterWrapper(createParentFilter(parentList));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed7576365aa15478ffb164ad40e9e556e294885e":["00a778ad8ad6c2c04607538d2f36fee001239eef"],"bfa27be7bde9d711ce2b418fadc555654849383f":["b24d1e8d5bdb993e38677e49c2fb4f7008b24895"],"246314af59d76a47fccc31e9494eefee01ec9c00":["bfa27be7bde9d711ce2b418fadc555654849383f","00a778ad8ad6c2c04607538d2f36fee001239eef"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5220c264531ed933424a495eb8ed8ada158961cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b24d1e8d5bdb993e38677e49c2fb4f7008b24895":["5220c264531ed933424a495eb8ed8ada158961cc"],"5220c264531ed933424a495eb8ed8ada158961cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["bfa27be7bde9d711ce2b418fadc555654849383f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed7576365aa15478ffb164ad40e9e556e294885e"]},"commit2Childs":{"ed7576365aa15478ffb164ad40e9e556e294885e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfa27be7bde9d711ce2b418fadc555654849383f":["246314af59d76a47fccc31e9494eefee01ec9c00","00a778ad8ad6c2c04607538d2f36fee001239eef"],"246314af59d76a47fccc31e9494eefee01ec9c00":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5220c264531ed933424a495eb8ed8ada158961cc"],"b24d1e8d5bdb993e38677e49c2fb4f7008b24895":["bfa27be7bde9d711ce2b418fadc555654849383f"],"5220c264531ed933424a495eb8ed8ada158961cc":["e9017cf144952056066919f1ebc7897ff9bd71b1","b24d1e8d5bdb993e38677e49c2fb4f7008b24895"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["ed7576365aa15478ffb164ad40e9e556e294885e","246314af59d76a47fccc31e9494eefee01ec9c00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}