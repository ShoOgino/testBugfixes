{"path":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#mergeTokens(List[Token],List[Token]).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#mergeTokens(List[Token],List[Token]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#mergeTokens(List[Token],List[Token]).mjava","sourceNew":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.copyBuffer(tok1.buffer(), 0, tok1.length());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.copyBuffer(tok2.buffer(), 0, tok2.length());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.copyBuffer(tok1.buffer(), 0, tok1.length());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.copyBuffer(tok2.buffer(), 0, tok2.length());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#mergeTokens(List[Token],List[Token]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.copyBuffer(tok1.buffer(), 0, tok1.length());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.copyBuffer(tok2.buffer(), 0, tok2.length());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}