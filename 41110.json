{"path":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","commits":[{"id":"65a70ca4e6df183f7a8f69687b55379fea0ddac2","date":1225224829,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(11L, nl.get(\"evictions\"));\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(4L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    assertEquals(11L, nl.get(\"cumulative_evictions\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b","date":1225722778,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(11L, nl.get(\"evictions\"));\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(4L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    assertEquals(11L, nl.get(\"cumulative_evictions\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d8dceae0594e66ce62ce0f775689af35a2266c","date":1251260302,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}