{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","commits":[{"id":"9ebcaa353d633ad1f42e11b495fa6e35efe711f7","date":1560229302,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(Node start, Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getLon(), next.getLat(), next.next.getLon(), next.next.getLat(), end.getLon(), end.getLat());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","sourceNew":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(Node start, Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getX(), next.getY(), next.next.getX(), next.next.getY(), end.getX(), end.getY());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","sourceOld":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(Node start, Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getLon(), next.getLat(), next.next.getLon(), next.next.getLat(), end.getLon(), end.getLat());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","sourceNew":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(final Node start, final Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getX(), next.getY(), next.next.getX(), next.next.getY(), end.getX(), end.getY());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","sourceOld":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(Node start, Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getX(), next.getY(), next.next.getX(), next.next.getY(), end.getX(), end.getY());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isCWPolygon(Node,Node).mjava","sourceNew":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(final Node start, final Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getX(), next.getY(), next.next.getX(), next.next.getY(), end.getX(), end.getY());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","sourceOld":"  /** Determine whether the polygon defined between node start and node end is CW */\n  private static boolean isCWPolygon(final Node start, final Node end) {\n    Node next = start;\n    double windingSum = 0;\n    do {\n      // compute signed area\n      windingSum += area(next.getX(), next.getY(), next.next.getX(), next.next.getY(), end.getX(), end.getY());\n      next = next.next;\n    } while (next.next != end);\n    //The polygon must be CW\n    return (windingSum < 0) ? true : false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ebcaa353d633ad1f42e11b495fa6e35efe711f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"9ebcaa353d633ad1f42e11b495fa6e35efe711f7":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebcaa353d633ad1f42e11b495fa6e35efe711f7"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}