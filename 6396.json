{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["c35d3c01114129fff707f0777080210fa9deb2a7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["c35d3c01114129fff707f0777080210fa9deb2a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c35d3c01114129fff707f0777080210fa9deb2a7"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["c35d3c01114129fff707f0777080210fa9deb2a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c35d3c01114129fff707f0777080210fa9deb2a7":["e9017cf144952056066919f1ebc7897ff9bd71b1","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}