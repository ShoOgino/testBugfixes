{"path":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#verify(byte[][][],int[],int,int).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#verify(byte[][][],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      while (true) {\n        int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 100);\n        double maxMB = (float) 0.1 + (3*random().nextDouble());\n        try {\n          verify(dir, docValues, docIDs, numDims, numBytesPerDim, maxPointsInLeafNode, maxMB);\n          return;\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#verify(byte[][][],int[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#verify(byte[][][],int[],int,int).mjava","sourceNew":"  /** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      while (true) {\n        try {\n          verify(dir, docValues, docIDs, numDims, numBytesPerDim, false);\n          return;\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      while (true) {\n        int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 100);\n        double maxMB = (float) 0.1 + (3*random().nextDouble());\n        try {\n          verify(dir, docValues, docIDs, numDims, numBytesPerDim, maxPointsInLeafNode, maxMB);\n          return;\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#verify(byte[][][],int[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#verify(byte[][][],int[],int,int).mjava","sourceNew":"  /** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      while (true) {\n        try {\n          verify(dir, docValues, docIDs, numDims, numBytesPerDim, false);\n          return;\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** docIDs can be null, for the single valued case, else it maps value to docID, but all values for one doc must be adjacent */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      while (true) {\n        try {\n          verify(dir, docValues, docIDs, numDims, numBytesPerDim, false);\n          return;\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}