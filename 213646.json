{"path":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs, false);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs, false);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, PostingsEnum.FLAG_NONE);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, PostingsEnum.FLAG_NONE);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    \n    DocIdSet set = new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n    return BitsFilteredDocIdSet.wrap(set, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, acceptDocs);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    \n    DocIdSet set = new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n    return BitsFilteredDocIdSet.wrap(set, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final LeafReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final LeafReaderContext privateContext = context.reader().getContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n    \n    DocIdSet set = new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext);\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n    };\n    return BitsFilteredDocIdSet.wrap(set, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}