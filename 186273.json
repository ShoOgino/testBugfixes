{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f714d649962c934166dedd1e83173e36356b328","date":1479399594,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","sourceNew":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.setScore(Float.NaN);\n      passage.setStartOffset(pos);\n      passage.setEndOffset(next);\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","sourceNew":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.setScore(Float.NaN);\n      passage.setStartOffset(pos);\n      passage.setEndOffset(next);\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.score = Float.NaN;\n      passage.startOffset = pos;\n      passage.endOffset = next;\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#getSummaryPassagesNoHighlight(int).mjava","sourceNew":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.setStartOffset(pos);\n      passage.setEndOffset(next);\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","sourceOld":"  /**\n   * Called to summarize a document when no highlights were found.\n   * By default this just returns the first\n   * {@link #maxPassages} sentences; subclasses can override to customize.\n   * The state of {@link #breakIterator} should be at the beginning.\n   */\n  protected Passage[] getSummaryPassagesNoHighlight(int maxPassages) {\n    assert breakIterator.current() == breakIterator.first();\n\n    List<Passage> passages = new ArrayList<>(Math.min(maxPassages, 10));\n    int pos = breakIterator.current();\n    assert pos == 0;\n    while (passages.size() < maxPassages) {\n      int next = breakIterator.next();\n      if (next == BreakIterator.DONE) {\n        break;\n      }\n      Passage passage = new Passage();\n      passage.setScore(Float.NaN);\n      passage.setStartOffset(pos);\n      passage.setEndOffset(next);\n      passages.add(passage);\n      pos = next;\n    }\n\n    return passages.toArray(new Passage[passages.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["1f714d649962c934166dedd1e83173e36356b328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f714d649962c934166dedd1e83173e36356b328":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1f714d649962c934166dedd1e83173e36356b328"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["1f714d649962c934166dedd1e83173e36356b328","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f714d649962c934166dedd1e83173e36356b328":["8764ca7bb74ee716c839b9545a93ec4a578c2005","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2e859e664a65796dadf8aaf65db6f66f3a885368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}