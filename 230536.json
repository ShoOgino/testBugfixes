{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  // NOTE: always returns a non-null result (ie new reader)\n  // but that could change someday\n  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doReopenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  // NOTE: always returns a non-null result (ie new reader)\n  // but that could change someday\n  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    // TODO: right now we *always* make a new reader; in\n    // the future we could have write make some effort to\n    // detect that no changes have occurred\n    IndexReader reader = writer.getReader(applyAllDeletes);\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":["e2b0079607ab997cb20b6c2caea7d72889e296dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2b0079607ab997cb20b6c2caea7d72889e296dc","date":1318809129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":["43369d257d14f61a881aa609962ef95e8a334d3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8414cdacb05e1277df96a30710f570f4251d9a","date":1323040348,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert openReadOnly;\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326990249d982376dfa2e6fd97c28f4580df4e7c","date":1323042771,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert openReadOnly;\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenFromWriter(boolean,IndexCommit).mjava","sourceNew":"  private final IndexReader doOpenFromWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","sourceOld":"  private final IndexReader doOpenFromWriter(boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    assert readOnly;\n\n    if (!openReadOnly) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n    }\n\n    if (commit != null) {\n      throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n    }\n\n    if (writer.nrtIsCurrent(segmentInfos)) {\n      return null;\n    }\n\n    IndexReader reader = writer.getReader(applyAllDeletes);\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n    reader.readerFinishedListeners = readerFinishedListeners;\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["e2b0079607ab997cb20b6c2caea7d72889e296dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e2b0079607ab997cb20b6c2caea7d72889e296dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e2b0079607ab997cb20b6c2caea7d72889e296dc":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e2b0079607ab997cb20b6c2caea7d72889e296dc","326990249d982376dfa2e6fd97c28f4580df4e7c"],"43369d257d14f61a881aa609962ef95e8a334d3a":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["4b8414cdacb05e1277df96a30710f570f4251d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["43369d257d14f61a881aa609962ef95e8a334d3a"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["326990249d982376dfa2e6fd97c28f4580df4e7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e2b0079607ab997cb20b6c2caea7d72889e296dc":["4b8414cdacb05e1277df96a30710f570f4251d9a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43369d257d14f61a881aa609962ef95e8a334d3a":["e2b0079607ab997cb20b6c2caea7d72889e296dc"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}