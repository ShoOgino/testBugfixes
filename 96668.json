{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#nextDoc().mjava","commits":[{"id":"2e327741cef719817558806865704ff0864d12fd","date":1363899030,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert currentDoc != NO_MORE_DOCS;\n      for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n        currentMatched = 0;\n        dv.setDocument(currentDoc);\n        long ord;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ords.contains(ord)) {\n            currentMatched++;\n          }\n        }\n        if (currentMatched >= minNrShouldMatch) {\n          return currentDoc;\n        }\n      }\n      return currentDoc = NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"707f5285c280ff14fa898e7722e57b7a46b81a76","date":1363965759,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#nextDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert currentDoc != NO_MORE_DOCS;\n      for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n        currentMatched = 0;\n        score = 0;\n        dv.setDocument(currentDoc);\n        long ord;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ords.contains(ord)) {\n            currentMatched++;\n            score += sims[(int)ord].score(currentDoc, 1);\n          }\n        }\n        if (currentMatched >= minNrShouldMatch) {\n          return currentDoc;\n        }\n      }\n      return currentDoc = NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert currentDoc != NO_MORE_DOCS;\n      for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n        currentMatched = 0;\n        dv.setDocument(currentDoc);\n        long ord;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ords.contains(ord)) {\n            currentMatched++;\n          }\n        }\n        if (currentMatched >= minNrShouldMatch) {\n          return currentDoc;\n        }\n      }\n      return currentDoc = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert currentDoc != NO_MORE_DOCS;\n      for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n        currentMatched = 0;\n        score = 0;\n        dv.setDocument(currentDoc);\n        long ord;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ords.contains(ord)) {\n            currentMatched++;\n            score += sims[(int)ord].score(currentDoc, 1);\n          }\n        }\n        if (currentMatched >= minNrShouldMatch) {\n          return currentDoc;\n        }\n      }\n      return currentDoc = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e327741cef719817558806865704ff0864d12fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["2e327741cef719817558806865704ff0864d12fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"2e327741cef719817558806865704ff0864d12fd":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e327741cef719817558806865704ff0864d12fd"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}