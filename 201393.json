{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(reader.leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(reader.leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(reader.leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(reader.leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7b5f36aeb5067abba24d9d18d7344ccb9f1e281","date":1484814634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(reader.leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(reader.leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveQueries().mjava","sourceNew":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), NumericDocValuesField.newRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), NumericDocValuesField.newRangeQuery(\"f2\", 42L, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUseIndexForSelectiveQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i == 42) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 42L));\n        doc.add(new NumericDocValuesField(\"f2\", 42L));\n      } else if (i == 100) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new NumericDocValuesField(\"f2\", 2L));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), new DocValuesNumbersQuery(\"f2\", 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    final Scorer s1 = w1.scorer(reader.leaves().get(0));\n    assertNotNull(s1.twoPhaseIterator()); // means we use doc values\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), new DocValuesNumbersQuery(\"f2\", 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    final Scorer s2 = w2.scorer(reader.leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["d7b5f36aeb5067abba24d9d18d7344ccb9f1e281"],"d7b5f36aeb5067abba24d9d18d7344ccb9f1e281":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["302d34f2c66e8d489ee13078305c330cbf67b226","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a412a7808b2815566cb17117ebe6638112b9a31"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["d7b5f36aeb5067abba24d9d18d7344ccb9f1e281","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"5a412a7808b2815566cb17117ebe6638112b9a31":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7b5f36aeb5067abba24d9d18d7344ccb9f1e281":["5a412a7808b2815566cb17117ebe6638112b9a31"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"302d34f2c66e8d489ee13078305c330cbf67b226":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}