{"path":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   */\n  static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length(); i++) {\n      final char c = wildcardText.charAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["32ca1a5456982c342df2a79ffa46397f3565bf5d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   */\n  static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   */\n  static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length(); i++) {\n      final char c = wildcardText.charAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32ca1a5456982c342df2a79ffa46397f3565bf5d","date":1285077954,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   */\n  static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   */\n  static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += Character.charCount(c);\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["32ca1a5456982c342df2a79ffa46397f3565bf5d","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"32ca1a5456982c342df2a79ffa46397f3565bf5d":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["32ca1a5456982c342df2a79ffa46397f3565bf5d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["32ca1a5456982c342df2a79ffa46397f3565bf5d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"32ca1a5456982c342df2a79ffa46397f3565bf5d":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}