{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","commits":[{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source-disabled\").toFile();\n        System.out.println(\"config dir absolute path = \" + configDir.getAbsolutePath());\n        source.uploadConfigDir(configDir, \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        Map<String, String> collectionProperties = new HashMap<>();\n        // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n        collectionProperties.putIfAbsent(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n        source.createCollection(\"cdcr-source\", 1, 1, \"cdcr-source\", collectionProperties);\n        source.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-source\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        final File cdcrEnabledSourceConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source\").toFile();\n        source.uploadConfigDir(cdcrEnabledSourceConfigDir, \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        final File targetConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-target\").toFile();\n        target.uploadConfigDir(targetConfigDir, \"cdcr-target\");\n        target.createCollection(\"cdcr-target\", 1, 1, \"cdcr-target\", Collections.emptyMap());\n        target.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-target\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-target\", target.getSolrClient().getZkStateReader(), true, true, 330);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9767eba84e83b05b2a675421e190f4a4c15dad44","9767eba84e83b05b2a675421e190f4a4c15dad44","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source-disabled\").toFile();\n        System.out.println(\"config dir absolute path = \" + configDir.getAbsolutePath());\n        source.uploadConfigDir(configDir, \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        Map<String, String> collectionProperties = new HashMap<>();\n        // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n        collectionProperties.putIfAbsent(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n        source.createCollection(\"cdcr-source\", 1, 1, \"cdcr-source\", collectionProperties);\n        source.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-source\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        final File cdcrEnabledSourceConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source\").toFile();\n        source.uploadConfigDir(cdcrEnabledSourceConfigDir, \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        final File targetConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-target\").toFile();\n        target.uploadConfigDir(targetConfigDir, \"cdcr-target\");\n        target.createCollection(\"cdcr-target\", 1, 1, \"cdcr-target\", Collections.emptyMap());\n        target.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-target\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-target\", target.getSolrClient().getZkStateReader(), true, true, 330);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source-disabled\").toFile();\n        System.out.println(\"config dir absolute path = \" + configDir.getAbsolutePath());\n        source.uploadConfigDir(configDir, \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        Map<String, String> collectionProperties = new HashMap<>();\n        // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n        collectionProperties.putIfAbsent(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\");\n        source.createCollection(\"cdcr-source\", 1, 1, \"cdcr-source\", collectionProperties);\n        source.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-source\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        final File cdcrEnabledSourceConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-source\").toFile();\n        source.uploadConfigDir(cdcrEnabledSourceConfigDir, \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        final File targetConfigDir = getFile(\"solr\").toPath().resolve(\"configsets/cdcr-target\").toFile();\n        target.uploadConfigDir(targetConfigDir, \"cdcr-target\");\n        target.createCollection(\"cdcr-target\", 1, 1, \"cdcr-target\", Collections.emptyMap());\n        target.getSolrClient().getZkStateReader().forceUpdateCollection(\"cdcr-target\");\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-target\", target.getSolrClient().getZkStateReader(), true, true, 330);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","6ee2533508e7cceb7551bb7deaeaf89dfa3767b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05ce844c17a184df17d88c6be38feef659d5a652","date":1483010578,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = 0;\n        for (int k = 0; k < docs; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9767eba84e83b05b2a675421e190f4a4c15dad44","9767eba84e83b05b2a675421e190f4a4c15dad44"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = 0;\n        for (int k = 0; k < docs; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        // index 10000 docs with a hard commit every 1000 documents\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int numDocs = 0;\n        for (int k = 0; k < 100; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding 100 docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9767eba84e83b05b2a675421e190f4a4c15dad44","date":1508967004,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = 0;\n        for (int k = 0; k < docs; k++) {\n          UpdateRequest req = new UpdateRequest();\n          for (; numDocs < (k + 1) * 100; numDocs++) {\n            SolrInputDocument doc = new SolrInputDocument();\n            doc.addField(\"id\", \"source_\" + numDocs);\n            doc.addField(\"xyz\", numDocs);\n            req.add(doc);\n          }\n          req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n          System.out.println(\"Adding \" + docs + \" docs with commit=true, numDocs=\" + numDocs);\n          req.process(sourceSolrClient);\n        }\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        System.out.println(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","05ce844c17a184df17d88c6be38feef659d5a652"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["05ce844c17a184df17d88c6be38feef659d5a652"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","05ce844c17a184df17d88c6be38feef659d5a652"],"05ce844c17a184df17d88c6be38feef659d5a652":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["e7da9d8536c11576df10e348efa79d2739170936"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","05ce844c17a184df17d88c6be38feef659d5a652"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"05ce844c17a184df17d88c6be38feef659d5a652":["9767eba84e83b05b2a675421e190f4a4c15dad44","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}