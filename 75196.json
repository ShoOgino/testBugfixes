{"path":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = new Random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = new Random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1b1e202e0a963a0094d637c018a8595f9bd245f","date":1342033808,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = new Random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = new Random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = new Random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"517ef79d6addd788f531a6d48a001383b5cbc68d","date":1361900777,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"517ef79d6addd788f531a6d48a001383b5cbc68d":["e1b1e202e0a963a0094d637c018a8595f9bd245f"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c2635332d49f7c5a0b484950462a01775512628e","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"4ce5a0276b8637186ae6adfa516e332132d197ad":["517ef79d6addd788f531a6d48a001383b5cbc68d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c2635332d49f7c5a0b484950462a01775512628e","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["c2635332d49f7c5a0b484950462a01775512628e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ce5a0276b8637186ae6adfa516e332132d197ad"]},"commit2Childs":{"517ef79d6addd788f531a6d48a001383b5cbc68d":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"4ce5a0276b8637186ae6adfa516e332132d197ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","e1b1e202e0a963a0094d637c018a8595f9bd245f"],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["517ef79d6addd788f531a6d48a001383b5cbc68d","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}