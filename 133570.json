{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","commits":[{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.getCollections().contains(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.getCollections().contains(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.getCollections().contains(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.getCollections().contains(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b753f4bd40fd8ec5276ceae15e867d2dceeb5552","date":1387799061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.getCollections().contains(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<String>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState, collection, shardNames, message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState,collection,shardNames,message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"Building a new collection: {}\", collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState, collection, shardNames, message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"building a new collection: \" + collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState, collection, shardNames, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(\"name\");\n      log.info(\"Building a new collection: {}\", collection);\n      if(clusterState.hasCollection(collection) ){\n        log.warn(\"Collection {} already exists. exit\" ,collection);\n        return clusterState;\n      }\n\n      ArrayList<String> shardNames = new ArrayList<>();\n\n      if(ImplicitDocRouter.NAME.equals( message.getStr(\"router.name\",DocRouter.DEFAULT_NAME))){\n        getShardNames(shardNames,message.getStr(\"shards\",DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if(numShards<1) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n\n      return createCollection(clusterState, collection, shardNames, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#buildCollection(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand buildCollection(ClusterState clusterState, ZkNodeProps message) {\n      return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eeda7e62e149f90eee8895af874c74efa7d4852"],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e187a371a1d09379bb452c2c13a7b9221525dff8"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}