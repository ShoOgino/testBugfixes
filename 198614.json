{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","commits":[{"id":"6fe8aa71069c95e278b630015ea5d34aad0ed2dd","date":1439557976,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      \n      for (int i = 0; i < length; i++) {\n        int ch = Character.codePointAt(buffer, i, length);\n        // look for digits outside of basic latin\n        if (ch > 0x7F && Character.isDigit(ch)) {\n          // replace with equivalent basic latin digit\n          buffer[i] = (char) ('0' + Character.getNumericValue(ch));\n          // if the original was supplementary, shrink the string\n          if (ch > 0xFFFF) {\n            length = StemmerUtil.delete(buffer, ++i, length);\n            termAtt.setLength(length);\n          }\n        }\n      }\n      \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","date":1476779931,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      \n      for (int i = 0; i < length; i++) {\n        int ch = Character.codePointAt(buffer, i, length);\n        // look for digits outside of basic latin\n        if (ch > 0x7F && Character.isDigit(ch)) {\n          // replace with equivalent basic latin digit\n          buffer[i] = (char) ('0' + Character.getNumericValue(ch));\n          // if the original was supplementary, shrink the string\n          if (ch > 0xFFFF) {\n            length = StemmerUtil.delete(buffer, i+1, length);\n            termAtt.setLength(length);\n          }\n        }\n      }\n      \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      \n      for (int i = 0; i < length; i++) {\n        int ch = Character.codePointAt(buffer, i, length);\n        // look for digits outside of basic latin\n        if (ch > 0x7F && Character.isDigit(ch)) {\n          // replace with equivalent basic latin digit\n          buffer[i] = (char) ('0' + Character.getNumericValue(ch));\n          // if the original was supplementary, shrink the string\n          if (ch > 0xFFFF) {\n            length = StemmerUtil.delete(buffer, ++i, length);\n            termAtt.setLength(length);\n          }\n        }\n      }\n      \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/DecimalDigitFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      \n      for (int i = 0; i < length; i++) {\n        int ch = Character.codePointAt(buffer, i, length);\n        // look for digits outside of basic latin\n        if (ch > 0x7F && Character.isDigit(ch)) {\n          // replace with equivalent basic latin digit\n          buffer[i] = (char) ('0' + Character.getNumericValue(ch));\n          // if the original was supplementary, shrink the string\n          if (ch > 0xFFFF) {\n            length = StemmerUtil.delete(buffer, i+1, length);\n            termAtt.setLength(length);\n          }\n        }\n      }\n      \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char buffer[] = termAtt.buffer();\n      int length = termAtt.length();\n      \n      for (int i = 0; i < length; i++) {\n        int ch = Character.codePointAt(buffer, i, length);\n        // look for digits outside of basic latin\n        if (ch > 0x7F && Character.isDigit(ch)) {\n          // replace with equivalent basic latin digit\n          buffer[i] = (char) ('0' + Character.getNumericValue(ch));\n          // if the original was supplementary, shrink the string\n          if (ch > 0xFFFF) {\n            length = StemmerUtil.delete(buffer, ++i, length);\n            termAtt.setLength(length);\n          }\n        }\n      }\n      \n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd","aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}