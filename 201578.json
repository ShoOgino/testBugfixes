{"path":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    if ((subReaders != null) && (subReaders.length > 0)) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    if ((subReaders != null) && (subReaders.length > 0)) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea","date":1327930581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    if ((subReaders != null) && (subReaders.length > 0)) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    if ((subReaders != null) && (subReaders.length > 0)) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final StringBuilder buffer = new StringBuilder();\n    buffer.append(getClass().getSimpleName());\n    buffer.append('(');\n    final IndexReader[] subReaders = getSequentialSubReaders();\n    assert subReaders != null;\n    if (subReaders.length > 0) {\n      buffer.append(subReaders[0]);\n      for (int i = 1; i < subReaders.length; ++i) {\n        buffer.append(\" \").append(subReaders[i]);\n      }\n    }\n    buffer.append(')');\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}