{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","commits":[{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<BytesRef>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRef intsSpare = new IntsRef();\n      final int size = hash.size();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        UnicodeUtil.UTF8toUTF32(bytesRef, intsSpare);\n        builder.add(intsSpare, new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRef intsSpare = new IntsRef();\n      final int size = hash.size();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        UnicodeUtil.UTF8toUTF32(bytesRef, intsSpare);\n        builder.add(intsSpare, new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<BytesRef>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRef intsSpare = new IntsRef();\n      final int size = hash.size();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        UnicodeUtil.UTF8toUTF32(bytesRef, intsSpare);\n        builder.add(intsSpare, new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRef intsSpare = new IntsRef();\n      final int size = hash.size();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        UnicodeUtil.UTF8toUTF32(bytesRef, intsSpare);\n        builder.add(intsSpare, new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":["7476b30b7c03f9027676c9df28fda37629da2c97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      FSTCompiler<BytesRef> fstCompiler = new FSTCompiler<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        fstCompiler.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(fstCompiler.compile(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#build().mjava","sourceNew":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      FSTCompiler<BytesRef> fstCompiler = new FSTCompiler<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        fstCompiler.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(fstCompiler.compile(), ignoreCase);\n    }\n\n","sourceOld":"    /**\n     * Returns an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @return an {@link StemmerOverrideMap} to be used with the {@link StemmerOverrideFilter}\n     * @throws IOException if an {@link IOException} occurs;\n     */\n    public StemmerOverrideMap build() throws IOException {\n      ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      org.apache.lucene.util.fst.Builder<BytesRef> builder = new org.apache.lucene.util.fst.Builder<>(\n          FST.INPUT_TYPE.BYTE4, outputs);\n      final int[] sort = hash.sort();\n      IntsRefBuilder intsSpare = new IntsRefBuilder();\n      final int size = hash.size();\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < size; i++) {\n        int id = sort[i];\n        BytesRef bytesRef = hash.get(id, spare);\n        intsSpare.copyUTF8Bytes(bytesRef);\n        builder.add(intsSpare.get(), new BytesRef(outputValues.get(id)));\n      }\n      return new StemmerOverrideMap(builder.finish(), ignoreCase);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7476b30b7c03f9027676c9df28fda37629da2c97"],"af2638813028b254a88b418ebeafb541afb49653":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"7476b30b7c03f9027676c9df28fda37629da2c97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["af2638813028b254a88b418ebeafb541afb49653","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"af2638813028b254a88b418ebeafb541afb49653":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"7476b30b7c03f9027676c9df28fda37629da2c97":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7476b30b7c03f9027676c9df28fda37629da2c97"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["af2638813028b254a88b418ebeafb541afb49653","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}