{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"/dev/null","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1 = couple.newReader;\n    IndexReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n    \n    index1.close();\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n    \n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh IndexReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    IndexReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh IndexReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n    \n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1 = couple.newReader;\n    IndexReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n    \n    index1.close();\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n    \n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh IndexReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#performDefaultTests(TestReopen).mjava","sourceNew":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    IndexReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh IndexReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","sourceOld":"  private void performDefaultTests(TestReopen test) throws Exception {\n\n    IndexReader index1 = test.openReader();\n    IndexReader index2 = test.openReader();\n        \n    TestIndexReader.assertIndexEquals(index1, index2);\n\n    // verify that reopen() does not return a new reader instance\n    // in case the index has no changes\n    ReaderCouple couple = refreshReader(index2, false);\n    assertTrue(couple.refreshedReader == index2);\n    \n    couple = refreshReader(index2, test, 0, true);\n    index1.close();\n    index1 = couple.newReader;\n\n    IndexReader index2_refreshed = couple.refreshedReader;\n    index2.close();\n    \n    // test if refreshed reader and newly opened reader return equal results\n    TestIndexReader.assertIndexEquals(index1, index2_refreshed);\n\n    index2_refreshed.close();\n    assertReaderClosed(index2, true, true);\n    assertReaderClosed(index2_refreshed, true, true);\n\n    index2 = test.openReader();\n    \n    for (int i = 1; i < 4; i++) {\n      \n      index1.close();\n      couple = refreshReader(index2, test, i, true);\n      // refresh IndexReader\n      index2.close();\n      \n      index2 = couple.refreshedReader;\n      index1 = couple.newReader;\n      TestIndexReader.assertIndexEquals(index1, index2);\n    }\n    \n    index1.close();\n    index2.close();\n    assertReaderClosed(index1, true, true);\n    assertReaderClosed(index2, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6db660b56f04fdb2853d25cdee8ee0d36559a521"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}