{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  Lucene40FieldReader(Lucene40BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                      long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  Lucene40FieldReader(Lucene40BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                      long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  Lucene40FieldReader(Lucene40BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                      long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  Lucene40FieldReader(Lucene40BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                      long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40FieldReader#Lucene40FieldReader(Lucene40BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":null,"sourceOld":"  Lucene40FieldReader(Lucene40BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n                      long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}