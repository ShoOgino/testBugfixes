{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","commits":[{"id":"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","date":1491310508,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(UpdateShardHandler,String,String,SolrParams).mjava","sourceNew":"  public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(solrNode);\n    UpdateShardHandler shardHandler = coreContainer.getUpdateShardHandler();\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","sourceOld":"  public SimpleSolrResponse invoke(UpdateShardHandler shardHandler,  final String url, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(UpdateShardHandler,String,String,SolrParams).mjava","sourceNew":"  public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(solrNode);\n    UpdateShardHandler shardHandler = coreContainer.getUpdateShardHandler();\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","sourceOld":"  public SimpleSolrResponse invoke(UpdateShardHandler shardHandler,  final String url, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(UpdateShardHandler,String,String,SolrParams).mjava","sourceNew":"  public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(solrNode);\n    UpdateShardHandler shardHandler = coreContainer.getUpdateShardHandler();\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","sourceOld":"  public SimpleSolrResponse invoke(UpdateShardHandler shardHandler,  final String url, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(solrNode);\n    UpdateShardHandler shardHandler = coreContainer.getUpdateShardHandler();\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invoke(String,String,SolrParams).mjava","sourceNew":null,"sourceOld":"  public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n      throws IOException, SolrServerException {\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(solrNode);\n    UpdateShardHandler shardHandler = coreContainer.getUpdateShardHandler();\n    GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n    try (HttpSolrClient client = new HttpSolrClient.Builder(url).withHttpClient(shardHandler.getHttpClient())\n        .withResponseParser(new BinaryResponseParser()).build()) {\n      NamedList<Object> rsp = client.request(request);\n      request.response.nl = rsp;\n      return request.response;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"]},"commit2Childs":{"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":[],"28288370235ed02234a64753cdbf0c6ec096304a":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}