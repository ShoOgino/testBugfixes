{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#streamDocs(InputStream).mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#streamDocs(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> streamDocs(InputStream body) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      private int nestedLevel;\n\n      @Override\n      public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n        nestedLevel++;\n        SolrDocument doc = super.readSolrDocument(dis);\n        nestedLevel--;\n        if (nestedLevel == 0) {\n          // parent document\n          callback.streamSolrDocument(doc);\n          return null;\n        } else {\n          // child document\n          return doc;\n        }\n      }\n\n      @Override\n      public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n        SolrDocumentList solrDocs = new SolrDocumentList();\n        List list = (List) readVal(dis);\n        solrDocs.setNumFound((Long) list.get(0));\n        solrDocs.setStart((Long) list.get(1));\n        solrDocs.setMaxScore((Float) list.get(2));\n\n        callback.streamDocListInfo(\n            solrDocs.getNumFound(),\n            solrDocs.getStart(),\n            solrDocs.getMaxScore());\n\n        // Read the Array\n        tagByte = dis.readByte();\n        if ((tagByte >>> 5) != (ARR >>> 5)) {\n          throw new RuntimeException(\"doclist must have an array\");\n        }\n        int sz = readSize(dis);\n        for (int i = 0; i < sz; i++) {\n          // must be a SolrDocument\n          readVal(dis);\n        }\n        return solrDocs;\n      }\n    };) {\n\n      return (NamedList<Object>) codec.unmarshal(body);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#streamDocs(InputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#streamDocs(InputStream).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private NamedList<Object> streamDocs(InputStream body) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      private int nestedLevel;\n\n      @Override\n      public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n        nestedLevel++;\n        SolrDocument doc = super.readSolrDocument(dis);\n        nestedLevel--;\n        if (nestedLevel == 0) {\n          // parent document\n          callback.streamSolrDocument(doc);\n          return null;\n        } else {\n          // child document\n          return doc;\n        }\n      }\n\n      @Override\n      public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n        SolrDocumentList solrDocs = new SolrDocumentList();\n        @SuppressWarnings({\"rawtypes\"})\n        List list = (List) readVal(dis);\n        solrDocs.setNumFound((Long) list.get(0));\n        solrDocs.setStart((Long) list.get(1));\n        solrDocs.setMaxScore((Float) list.get(2));\n\n        callback.streamDocListInfo(\n            solrDocs.getNumFound(),\n            solrDocs.getStart(),\n            solrDocs.getMaxScore());\n\n        // Read the Array\n        tagByte = dis.readByte();\n        if ((tagByte >>> 5) != (ARR >>> 5)) {\n          throw new RuntimeException(\"doclist must have an array\");\n        }\n        int sz = readSize(dis);\n        for (int i = 0; i < sz; i++) {\n          // must be a SolrDocument\n          readVal(dis);\n        }\n        return solrDocs;\n      }\n    };) {\n\n      return (NamedList<Object>) codec.unmarshal(body);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","sourceOld":"  private NamedList<Object> streamDocs(InputStream body) {\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      private int nestedLevel;\n\n      @Override\n      public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {\n        nestedLevel++;\n        SolrDocument doc = super.readSolrDocument(dis);\n        nestedLevel--;\n        if (nestedLevel == 0) {\n          // parent document\n          callback.streamSolrDocument(doc);\n          return null;\n        } else {\n          // child document\n          return doc;\n        }\n      }\n\n      @Override\n      public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {\n        SolrDocumentList solrDocs = new SolrDocumentList();\n        List list = (List) readVal(dis);\n        solrDocs.setNumFound((Long) list.get(0));\n        solrDocs.setStart((Long) list.get(1));\n        solrDocs.setMaxScore((Float) list.get(2));\n\n        callback.streamDocListInfo(\n            solrDocs.getNumFound(),\n            solrDocs.getStart(),\n            solrDocs.getMaxScore());\n\n        // Read the Array\n        tagByte = dis.readByte();\n        if ((tagByte >>> 5) != (ARR >>> 5)) {\n          throw new RuntimeException(\"doclist must have an array\");\n        }\n        int sz = readSize(dis);\n        for (int i = 0; i < sz; i++) {\n          // must be a SolrDocument\n          readVal(dis);\n        }\n        return solrDocs;\n      }\n    };) {\n\n      return (NamedList<Object>) codec.unmarshal(body);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["220577719e3753e52195ed66dc9af6c4e65e2873"],"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"220577719e3753e52195ed66dc9af6c4e65e2873":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}