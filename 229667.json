{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","commits":[{"id":"c7375bc69c270e1e62c08c5091793a3e9dce937f","date":1275471695,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets the term index divisor passed to any readers that\n   *  IndexWriter opens, for example when apply deletes or\n   *  creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["81cc37e458a3bdbe82fc7b807a5d1a59b06f9191","72de1256341cd5997bf3f1f39f3abc869553ea1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72de1256341cd5997bf3f1f39f3abc869553ea1a","date":1275473408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the term index divisor passed to any readers that\n   *  IndexWriter opens, for example when apply deletes or\n   *  creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81cc37e458a3bdbe82fc7b807a5d1a59b06f9191","date":1296158863,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0) {\n      throw new IllegalArgumentException(\"divisor must be >= 1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception. */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setReaderTermsIndexDivisor(int).mjava","sourceNew":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","sourceOld":"  /** Sets the termsIndexDivisor passed to any readers that\n   *  IndexWriter opens, for example when applying deletes\n   *  or creating a near-real-time reader in {@link\n   *  IndexWriter#getReader}. If you pass -1, the terms index \n   *  won't be loaded by the readers. This is only useful in \n   *  advanced situations when you will only .next() through \n   *  all terms; attempts to seek will hit an exception.\n   *\n   * <p>Takes effect immediately, but only applies to\n   * readers opened after this call */\n  public IndexWriterConfig setReaderTermsIndexDivisor(int divisor) {\n    if (divisor <= 0 && divisor != -1) {\n      throw new IllegalArgumentException(\"divisor must be >= 1, or -1 (got \" + divisor + \")\");\n    }\n    readerTermsIndexDivisor = divisor;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81cc37e458a3bdbe82fc7b807a5d1a59b06f9191":["72de1256341cd5997bf3f1f39f3abc869553ea1a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","00b21520fafb9860ce0318d7be5ea84619c185ad"],"72de1256341cd5997bf3f1f39f3abc869553ea1a":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","00b21520fafb9860ce0318d7be5ea84619c185ad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["72de1256341cd5997bf3f1f39f3abc869553ea1a","81cc37e458a3bdbe82fc7b807a5d1a59b06f9191"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00b21520fafb9860ce0318d7be5ea84619c185ad":["81cc37e458a3bdbe82fc7b807a5d1a59b06f9191"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["72de1256341cd5997bf3f1f39f3abc869553ea1a","81cc37e458a3bdbe82fc7b807a5d1a59b06f9191"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"81cc37e458a3bdbe82fc7b807a5d1a59b06f9191":["29ef99d61cda9641b6250bf9567329a6e65f901d","00b21520fafb9860ce0318d7be5ea84619c185ad","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"72de1256341cd5997bf3f1f39f3abc869553ea1a":["81cc37e458a3bdbe82fc7b807a5d1a59b06f9191","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["72de1256341cd5997bf3f1f39f3abc869553ea1a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}