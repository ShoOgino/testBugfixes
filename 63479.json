{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":null,"sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":null,"sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}