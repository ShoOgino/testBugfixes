{"path":"solr/core/src/test/org/apache/solr/cloud/TestBaseStatsCacheCloud#testBasicStats().mjava","commits":[{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestBaseStatsCacheCloud#testBasicStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicStats() throws Exception {\n    QueryResponse cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n    QueryResponse controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // test after updates\n    indexDocs(solrClient, collectionName, NUM_DOCS, NUM_DOCS, generator);\n    indexDocs(control, \"collection1\", NUM_DOCS, NUM_DOCS, generator);\n\n    cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // check cache metrics\n    StatsCache.StatsCacheMetrics statsCacheMetrics = new StatsCache.StatsCacheMetrics();\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      try (SolrClient client = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        NamedList<Object> metricsRsp = client.request(\n            new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/metrics\", params(\"group\", \"solr.core\", \"prefix\", \"CACHE.searcher.statsCache\")));\n        assertNotNull(metricsRsp);\n        NamedList<Object> metricsPerReplica = (NamedList<Object>)metricsRsp.get(\"metrics\");\n        assertNotNull(\"no metrics perReplica\", metricsPerReplica);\n        //log.info(\"======= Node: \" + jettySolrRunner.getBaseUrl());\n        //log.info(\"======= Metrics:\\n\" + Utils.toJSONString(metricsPerReplica));\n        metricsPerReplica.forEach((replica, metrics) -> {\n          Map<String, Object> values = (Map<String, Object>)((NamedList<Object>)metrics).get(\"CACHE.searcher.statsCache\");\n          values.forEach((name, value) -> {\n            long val = value instanceof Number ? ((Number) value).longValue() : 0;\n            switch (name) {\n              case \"lookups\" :\n                statsCacheMetrics.lookups.add(val);\n                break;\n              case \"returnLocalStats\" :\n                statsCacheMetrics.returnLocalStats.add(val);\n                break;\n              case \"mergeToGlobalStats\" :\n                statsCacheMetrics.mergeToGlobalStats.add(val);\n                break;\n              case \"missingGlobalFieldStats\" :\n                statsCacheMetrics.missingGlobalFieldStats.add(val);\n                break;\n              case \"missingGlobalTermStats\" :\n                statsCacheMetrics.missingGlobalTermStats.add(val);\n                break;\n              case \"receiveGlobalStats\" :\n                statsCacheMetrics.receiveGlobalStats.add(val);\n                break;\n              case \"retrieveStats\" :\n                statsCacheMetrics.retrieveStats.add(val);\n                break;\n              case \"sendGlobalStats\" :\n                statsCacheMetrics.sendGlobalStats.add(val);\n                break;\n              case \"useCachedGlobalStats\" :\n                statsCacheMetrics.useCachedGlobalStats.add(val);\n                break;\n              case \"statsCacheImpl\" :\n                assertTrue(\"incorreect cache impl, expected\" + getImplementationName() + \" but was \" + value,\n                    getImplementationName().endsWith((String)value));\n                break;\n              default:\n                fail(\"Unexpected cache metrics: key=\" + name + \", value=\" + value);\n            }\n          });\n        });\n      }\n    }\n    checkStatsCacheMetrics(statsCacheMetrics);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestBaseStatsCacheCloud#testBasicStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicStats() throws Exception {\n    QueryResponse cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n    QueryResponse controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // test after updates\n    indexDocs(solrClient, collectionName, NUM_DOCS, NUM_DOCS, generator);\n    indexDocs(control, \"collection1\", NUM_DOCS, NUM_DOCS, generator);\n\n    cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // check cache metrics\n    StatsCache.StatsCacheMetrics statsCacheMetrics = new StatsCache.StatsCacheMetrics();\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      try (SolrClient client = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        NamedList<Object> metricsRsp = client.request(\n            new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/metrics\", params(\"group\", \"solr.core\", \"prefix\", \"CACHE.searcher.statsCache\")));\n        assertNotNull(metricsRsp);\n        NamedList<Object> metricsPerReplica = (NamedList<Object>)metricsRsp.get(\"metrics\");\n        assertNotNull(\"no metrics perReplica\", metricsPerReplica);\n        //log.info(\"======= Node: \" + jettySolrRunner.getBaseUrl());\n        //log.info(\"======= Metrics:\\n\" + Utils.toJSONString(metricsPerReplica));\n        metricsPerReplica.forEach((replica, metrics) -> {\n          Map<String, Object> values = (Map<String, Object>)((NamedList<Object>)metrics).get(\"CACHE.searcher.statsCache\");\n          values.forEach((name, value) -> {\n            long val = value instanceof Number ? ((Number) value).longValue() : 0;\n            switch (name) {\n              case \"lookups\" :\n                statsCacheMetrics.lookups.add(val);\n                break;\n              case \"returnLocalStats\" :\n                statsCacheMetrics.returnLocalStats.add(val);\n                break;\n              case \"mergeToGlobalStats\" :\n                statsCacheMetrics.mergeToGlobalStats.add(val);\n                break;\n              case \"missingGlobalFieldStats\" :\n                statsCacheMetrics.missingGlobalFieldStats.add(val);\n                break;\n              case \"missingGlobalTermStats\" :\n                statsCacheMetrics.missingGlobalTermStats.add(val);\n                break;\n              case \"receiveGlobalStats\" :\n                statsCacheMetrics.receiveGlobalStats.add(val);\n                break;\n              case \"retrieveStats\" :\n                statsCacheMetrics.retrieveStats.add(val);\n                break;\n              case \"sendGlobalStats\" :\n                statsCacheMetrics.sendGlobalStats.add(val);\n                break;\n              case \"useCachedGlobalStats\" :\n                statsCacheMetrics.useCachedGlobalStats.add(val);\n                break;\n              case \"statsCacheImpl\" :\n                assertTrue(\"incorreect cache impl, expected\" + getImplementationName() + \" but was \" + value,\n                    getImplementationName().endsWith((String)value));\n                break;\n              default:\n                fail(\"Unexpected cache metrics: key=\" + name + \", value=\" + value);\n            }\n          });\n        });\n      }\n    }\n    checkStatsCacheMetrics(statsCacheMetrics);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestBaseStatsCacheCloud#testBasicStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestBaseStatsCacheCloud#testBasicStats().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBasicStats() throws Exception {\n    QueryResponse cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n    QueryResponse controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // test after updates\n    indexDocs(solrClient, collectionName, NUM_DOCS, NUM_DOCS, generator);\n    indexDocs(control, \"collection1\", NUM_DOCS, NUM_DOCS, generator);\n\n    cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // check cache metrics\n    StatsCache.StatsCacheMetrics statsCacheMetrics = new StatsCache.StatsCacheMetrics();\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      try (SolrClient client = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        NamedList<Object> metricsRsp = client.request(\n            new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/metrics\", params(\"group\", \"solr.core\", \"prefix\", \"CACHE.searcher.statsCache\")));\n        assertNotNull(metricsRsp);\n        NamedList<Object> metricsPerReplica = (NamedList<Object>)metricsRsp.get(\"metrics\");\n        assertNotNull(\"no metrics perReplica\", metricsPerReplica);\n        //log.info(\"======= Node: \" + jettySolrRunner.getBaseUrl());\n        //log.info(\"======= Metrics:\\n\" + Utils.toJSONString(metricsPerReplica));\n        metricsPerReplica.forEach((replica, metrics) -> {\n          Map<String, Object> values = (Map<String, Object>)((NamedList<Object>)metrics).get(\"CACHE.searcher.statsCache\");\n          values.forEach((name, value) -> {\n            long val = value instanceof Number ? ((Number) value).longValue() : 0;\n            switch (name) {\n              case \"lookups\" :\n                statsCacheMetrics.lookups.add(val);\n                break;\n              case \"returnLocalStats\" :\n                statsCacheMetrics.returnLocalStats.add(val);\n                break;\n              case \"mergeToGlobalStats\" :\n                statsCacheMetrics.mergeToGlobalStats.add(val);\n                break;\n              case \"missingGlobalFieldStats\" :\n                statsCacheMetrics.missingGlobalFieldStats.add(val);\n                break;\n              case \"missingGlobalTermStats\" :\n                statsCacheMetrics.missingGlobalTermStats.add(val);\n                break;\n              case \"receiveGlobalStats\" :\n                statsCacheMetrics.receiveGlobalStats.add(val);\n                break;\n              case \"retrieveStats\" :\n                statsCacheMetrics.retrieveStats.add(val);\n                break;\n              case \"sendGlobalStats\" :\n                statsCacheMetrics.sendGlobalStats.add(val);\n                break;\n              case \"useCachedGlobalStats\" :\n                statsCacheMetrics.useCachedGlobalStats.add(val);\n                break;\n              case \"statsCacheImpl\" :\n                assertTrue(\"incorreect cache impl, expected\" + getImplementationName() + \" but was \" + value,\n                    getImplementationName().endsWith((String)value));\n                break;\n              default:\n                fail(\"Unexpected cache metrics: key=\" + name + \", value=\" + value);\n            }\n          });\n        });\n      }\n    }\n    checkStatsCacheMetrics(statsCacheMetrics);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicStats() throws Exception {\n    QueryResponse cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n    QueryResponse controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + NUM_DOCS, \"debug\", \"true\"));\n\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // test after updates\n    indexDocs(solrClient, collectionName, NUM_DOCS, NUM_DOCS, generator);\n    indexDocs(control, \"collection1\", NUM_DOCS, NUM_DOCS, generator);\n\n    cloudRsp = solrClient.query(collectionName,\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    controlRsp = control.query(\"collection1\",\n        params(\"q\", \"foo_t:\\\"bar baz\\\"\", \"fl\", \"*,score\", \"rows\", \"\" + (NUM_DOCS * 2)));\n    assertResponses(controlRsp, cloudRsp, assertSameScores());\n\n    // check cache metrics\n    StatsCache.StatsCacheMetrics statsCacheMetrics = new StatsCache.StatsCacheMetrics();\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      try (SolrClient client = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        NamedList<Object> metricsRsp = client.request(\n            new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/metrics\", params(\"group\", \"solr.core\", \"prefix\", \"CACHE.searcher.statsCache\")));\n        assertNotNull(metricsRsp);\n        NamedList<Object> metricsPerReplica = (NamedList<Object>)metricsRsp.get(\"metrics\");\n        assertNotNull(\"no metrics perReplica\", metricsPerReplica);\n        //log.info(\"======= Node: \" + jettySolrRunner.getBaseUrl());\n        //log.info(\"======= Metrics:\\n\" + Utils.toJSONString(metricsPerReplica));\n        metricsPerReplica.forEach((replica, metrics) -> {\n          Map<String, Object> values = (Map<String, Object>)((NamedList<Object>)metrics).get(\"CACHE.searcher.statsCache\");\n          values.forEach((name, value) -> {\n            long val = value instanceof Number ? ((Number) value).longValue() : 0;\n            switch (name) {\n              case \"lookups\" :\n                statsCacheMetrics.lookups.add(val);\n                break;\n              case \"returnLocalStats\" :\n                statsCacheMetrics.returnLocalStats.add(val);\n                break;\n              case \"mergeToGlobalStats\" :\n                statsCacheMetrics.mergeToGlobalStats.add(val);\n                break;\n              case \"missingGlobalFieldStats\" :\n                statsCacheMetrics.missingGlobalFieldStats.add(val);\n                break;\n              case \"missingGlobalTermStats\" :\n                statsCacheMetrics.missingGlobalTermStats.add(val);\n                break;\n              case \"receiveGlobalStats\" :\n                statsCacheMetrics.receiveGlobalStats.add(val);\n                break;\n              case \"retrieveStats\" :\n                statsCacheMetrics.retrieveStats.add(val);\n                break;\n              case \"sendGlobalStats\" :\n                statsCacheMetrics.sendGlobalStats.add(val);\n                break;\n              case \"useCachedGlobalStats\" :\n                statsCacheMetrics.useCachedGlobalStats.add(val);\n                break;\n              case \"statsCacheImpl\" :\n                assertTrue(\"incorreect cache impl, expected\" + getImplementationName() + \" but was \" + value,\n                    getImplementationName().endsWith((String)value));\n                break;\n              default:\n                fail(\"Unexpected cache metrics: key=\" + name + \", value=\" + value);\n            }\n          });\n        });\n      }\n    }\n    checkStatsCacheMetrics(statsCacheMetrics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["df72a23fb74bebe914e3f3972063a884327c0436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}