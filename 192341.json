{"path":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String,String).mjava","commits":[{"id":"8fa71d5bc6be53f5f21420ccbcaecad4dd879728","date":1402044934,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static LockFactory getNewLockFactory(String lockFactoryClassName, String lockDirName) throws IOException {\n    LockFactory lockFactory;\n    try {\n      lockFactory = Class.forName(lockFactoryClassName).asSubclass(LockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      throw new IOException(\"Cannot instantiate lock factory \" + lockFactoryClassName);\n    }\n\n    File lockDir = new File(lockDirName);\n\n    if (lockFactory instanceof FSLockFactory) {\n      ((FSLockFactory) lockFactory).setLockDir(lockDir);\n    }\n    lockFactory.setLockPrefix(\"test\");\n    return lockFactory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String,String).mjava","sourceNew":"  private static LockFactory getNewLockFactory(String lockFactoryClassName, String lockDirName) throws IOException {\n    LockFactory lockFactory;\n    try {\n      lockFactory = Class.forName(lockFactoryClassName).asSubclass(LockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      throw new IOException(\"Cannot instantiate lock factory \" + lockFactoryClassName);\n    }\n\n    Path lockDir = Paths.get(lockDirName);\n\n    if (lockFactory instanceof FSLockFactory) {\n      ((FSLockFactory) lockFactory).setLockDir(lockDir);\n    }\n    lockFactory.setLockPrefix(\"test\");\n    return lockFactory;\n  }\n\n","sourceOld":"  private static LockFactory getNewLockFactory(String lockFactoryClassName, String lockDirName) throws IOException {\n    LockFactory lockFactory;\n    try {\n      lockFactory = Class.forName(lockFactoryClassName).asSubclass(LockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      throw new IOException(\"Cannot instantiate lock factory \" + lockFactoryClassName);\n    }\n\n    File lockDir = new File(lockDirName);\n\n    if (lockFactory instanceof FSLockFactory) {\n      ((FSLockFactory) lockFactory).setLockDir(lockDir);\n    }\n    lockFactory.setLockPrefix(\"test\");\n    return lockFactory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String,String).mjava","sourceNew":null,"sourceOld":"  private static LockFactory getNewLockFactory(String lockFactoryClassName, String lockDirName) throws IOException {\n    LockFactory lockFactory;\n    try {\n      lockFactory = Class.forName(lockFactoryClassName).asSubclass(LockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      throw new IOException(\"Cannot instantiate lock factory \" + lockFactoryClassName);\n    }\n\n    Path lockDir = Paths.get(lockDirName);\n\n    if (lockFactory instanceof FSLockFactory) {\n      ((FSLockFactory) lockFactory).setLockDir(lockDir);\n    }\n    lockFactory.setLockPrefix(\"test\");\n    return lockFactory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["8fa71d5bc6be53f5f21420ccbcaecad4dd879728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"],"8fa71d5bc6be53f5f21420ccbcaecad4dd879728":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fa71d5bc6be53f5f21420ccbcaecad4dd879728"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"8fa71d5bc6be53f5f21420ccbcaecad4dd879728":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}