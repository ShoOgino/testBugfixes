{"path":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer())\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":null,"sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer())\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":null,"sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n          IndexWriter writer = new IndexWriter(index.index, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer())\n                  .setOpenMode(OpenMode.CREATE));\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c084e47df29de3330311d69dabf515ceaa989512"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}