{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","commits":[{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","pathOld":"/dev/null","sourceNew":"    // Perform a cache load asynchronously\n    // @return true if synchronous caching is needed, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      /*\n       * If the current query is already being asynchronously cached,\n       * do not trigger another cache operation\n       */\n      if (inFlightAsyncLoadQueries.add(in.getQuery()) == false) {\n        return false;\n      }\n\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        DocIdSet localDocIdSet = cache(context);\n        putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n\n        // Remove the key from inflight -- the key is loaded now\n        Object retValue = inFlightAsyncLoadQueries.remove(in.getQuery());\n\n        // The query should have been present in the inflight queries set before\n        // we actually loaded it -- hence the removal of the key should be successful\n        assert retValue != null;\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","pathOld":"/dev/null","sourceNew":"    // Perform a cache load asynchronously\n    // @return true if synchronous caching is needed, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      /*\n       * If the current query is already being asynchronously cached,\n       * do not trigger another cache operation\n       */\n      if (inFlightAsyncLoadQueries.add(in.getQuery()) == false) {\n        return false;\n      }\n\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        DocIdSet localDocIdSet = cache(context);\n        putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n\n        // Remove the key from inflight -- the key is loaded now\n        Object retValue = inFlightAsyncLoadQueries.remove(in.getQuery());\n\n        // The query should have been present in the inflight queries set before\n        // we actually loaded it -- hence the removal of the key should be successful\n        assert retValue != null;\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return true;\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","sourceNew":null,"sourceOld":"    // Perform a cache load asynchronously\n    // @return true if synchronous caching is needed, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      /*\n       * If the current query is already being asynchronously cached,\n       * do not trigger another cache operation\n       */\n      if (inFlightAsyncLoadQueries.add(in.getQuery()) == false) {\n        return false;\n      }\n\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        DocIdSet localDocIdSet = cache(context);\n        putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n\n        // Remove the key from inflight -- the key is loaded now\n        Object retValue = inFlightAsyncLoadQueries.remove(in.getQuery());\n\n        // The query should have been present in the inflight queries set before\n        // we actually loaded it -- hence the removal of the key should be successful\n        assert retValue != null;\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","sourceNew":null,"sourceOld":"    // Perform a cache load asynchronously\n    // @return true if synchronous caching is needed, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      /*\n       * If the current query is already being asynchronously cached,\n       * do not trigger another cache operation\n       */\n      if (inFlightAsyncLoadQueries.add(in.getQuery()) == false) {\n        return false;\n      }\n\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        DocIdSet localDocIdSet = cache(context);\n        putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n\n        // Remove the key from inflight -- the key is loaded now\n        Object retValue = inFlightAsyncLoadQueries.remove(in.getQuery());\n\n        // The query should have been present in the inflight queries set before\n        // we actually loaded it -- hence the removal of the key should be successful\n        assert retValue != null;\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return true;\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","pathOld":"/dev/null","sourceNew":"    // Perform a cache load asynchronously\n    // @return true if asynchronous caching succeeded, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        // If the reader is being closed -- do nothing\n        if (context.reader().tryIncRef()) {\n          try {\n            DocIdSet localDocIdSet = cache(context);\n            putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n          } finally {\n            context.reader().decRef();\n          }\n        }\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return false;\n      }\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#cacheAsynchronously(LeafReaderContext,IndexReader.CacheHelper).mjava","sourceNew":null,"sourceOld":"    // Perform a cache load asynchronously\n    // @return true if asynchronous caching succeeded, false otherwise\n    private boolean cacheAsynchronously(LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n      FutureTask<Void> task = new FutureTask<>(() -> {\n        // If the reader is being closed -- do nothing\n        if (context.reader().tryIncRef()) {\n          try {\n            DocIdSet localDocIdSet = cache(context);\n            putIfAbsent(in.getQuery(), localDocIdSet, cacheHelper);\n          } finally {\n            context.reader().decRef();\n          }\n        }\n\n        return null;\n      });\n      try {\n        executor.execute(task);\n      } catch (RejectedExecutionException e) {\n        // Trigger synchronous caching\n        return false;\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}