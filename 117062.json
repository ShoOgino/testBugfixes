{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","commits":[{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrDocumentList(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean assertSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!assertSolrDocumentEquals(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrDocumentList(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean assertSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!assertSolrDocumentEquals(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if (list1.getMaxScore() == null) {\n      if (list2.getMaxScore() != null) {\n        return false;\n      } \n    } else if (list2.getMaxScore() == null) {\n      return false;\n    } else {\n      if (Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n          list1.getStart() != list2.getStart()) {\n        return false;\n      }\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrDocumentList(Object,Object).mjava","sourceNew":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if (list1.getMaxScore() == null) {\n      if (list2.getMaxScore() != null) {\n        return false;\n      } \n    } else if (list2.getMaxScore() == null) {\n      return false;\n    } else {\n      if (Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n          list1.getStart() != list2.getStart()) {\n        return false;\n      }\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean compareSolrDocumentList(Object expected, Object actual) {\n    if (!(expected instanceof SolrDocumentList)  || !(actual instanceof SolrDocumentList)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrDocumentList list1 = (SolrDocumentList) expected;\n    SolrDocumentList list2 = (SolrDocumentList) actual;\n\n    if(Float.compare(list1.getMaxScore(), list2.getMaxScore()) != 0 || list1.getNumFound() != list2.getNumFound() ||\n        list1.getStart() != list2.getStart()) {\n      return false;\n    }\n    for(int i=0; i<list1.getNumFound(); i++) {\n      if(!compareSolrDocument(list1.get(i), list2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}