{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDeleteTerms(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDeleteTerms(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Determines the minimal number of delete terms required before the buffered\n   * in-memory delete terms are applied and flushed. If there are documents\n   * buffered in memory at the time, they are merged and a new segment is\n   * created.</p>\n\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   * \n   * @throws IllegalArgumentException if maxBufferedDeleteTerms\n   * is enabled but smaller than 1\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDeleteTerms(int maxBufferedDeleteTerms) {\n    ensureOpen();\n    if (maxBufferedDeleteTerms != DISABLE_AUTO_FLUSH\n        && maxBufferedDeleteTerms < 1)\n      throw new IllegalArgumentException(\n          \"maxBufferedDeleteTerms must at least be 1 when enabled\");\n    docWriter.setMaxBufferedDeleteTerms(maxBufferedDeleteTerms);\n    if (infoStream != null)\n      message(\"setMaxBufferedDeleteTerms \" + maxBufferedDeleteTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDeleteTerms(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDeleteTerms(int).mjava","sourceNew":"  /**\n   * <p>Determines the minimal number of delete terms required before the buffered\n   * in-memory delete terms are applied and flushed. If there are documents\n   * buffered in memory at the time, they are merged and a new segment is\n   * created.</p>\n\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   * \n   * @throws IllegalArgumentException if maxBufferedDeleteTerms\n   * is enabled but smaller than 1\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDeleteTerms(int maxBufferedDeleteTerms) {\n    ensureOpen();\n    if (maxBufferedDeleteTerms != DISABLE_AUTO_FLUSH\n        && maxBufferedDeleteTerms < 1)\n      throw new IllegalArgumentException(\n          \"maxBufferedDeleteTerms must at least be 1 when enabled\");\n    docWriter.setMaxBufferedDeleteTerms(maxBufferedDeleteTerms);\n    if (infoStream != null)\n      message(\"setMaxBufferedDeleteTerms \" + maxBufferedDeleteTerms);\n  }\n\n","sourceOld":"  /**\n   * <p>Determines the minimal number of delete terms required before the buffered\n   * in-memory delete terms are applied and flushed. If there are documents\n   * buffered in memory at the time, they are merged and a new segment is\n   * created.</p>\n\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   * \n   * @throws IllegalArgumentException if maxBufferedDeleteTerms\n   * is enabled but smaller than 1\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDeleteTerms(int maxBufferedDeleteTerms) {\n    ensureOpen();\n    if (maxBufferedDeleteTerms != DISABLE_AUTO_FLUSH\n        && maxBufferedDeleteTerms < 1)\n      throw new IllegalArgumentException(\n          \"maxBufferedDeleteTerms must at least be 1 when enabled\");\n    docWriter.setMaxBufferedDeleteTerms(maxBufferedDeleteTerms);\n    if (infoStream != null)\n      message(\"setMaxBufferedDeleteTerms \" + maxBufferedDeleteTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}