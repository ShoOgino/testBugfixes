{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","commits":[{"id":"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","date":1457088757,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionsAPIDistributedZkTest.setClusterProp(cloudClient, \"legacyCloud\", \"false\");\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionsAPIDistributedZkTest.setClusterProp(cloudClient, \"legacyCloud\", \"false\");\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionsAPIDistributedZkTest.setClusterProp(cloudClient, \"legacyCloud\", \"false\");\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(1)\n        .setReplicationFactor(2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName,1,2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"3217321f3e1d7922898c6c633d17acfa840d6875":["a4efd3fffdd7acd625bb88e455c8097e17f75735","ac97ea104d893f16aab430d9904473bc1f233f3c"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4efd3fffdd7acd625bb88e455c8097e17f75735","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}