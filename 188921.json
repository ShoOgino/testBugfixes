{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testTopDocsScores().mjava","sourceNew":null,"sourceOld":"  public void testTopDocsScores() throws Exception {\n\n    // There was previously a bug in FieldSortedHitQueue.maxscore when only a single\n    // doc was added.  That is what the following tests for.\n    Sort sort = new Sort();\n    int nDocs=10;\n\n    // try to pick a query that will result in an unnormalized\n    // score greater than 1 to test for correct normalization\n    final TopDocs docs1 = full.search(queryE,null,nDocs,sort);\n\n    // a filter that only allows through the first hit\n    Filter filt = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        BitSet bs = new BitSet(reader.maxDoc());\n        bs.set(0, reader.maxDoc());\n        bs.set(docs1.scoreDocs[0].doc);\n        return new DocIdBitSet(bs);\n      }\n    };\n\n    TopDocs docs2 = full.search(queryE, filt, nDocs, sort);\n    \n    assertEquals(docs1.scoreDocs[0].score, docs2.scoreDocs[0].score, 1e-6);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}