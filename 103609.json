{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","commits":[{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their float associations. */\n  private List<FacetResult> sumFloatAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    // sum the 'tags' dimension\n    FacetSearchParams fsp = new FacetSearchParams(new AssociationFloatSumFacetRequest(new CategoryPath(\"genre\"), 10));\n    \n    FacetsAccumulator fa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their float associations. */\n  private List<FacetResult> sumFloatAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    // sum the 'tags' dimension\n    FacetSearchParams fsp = new FacetSearchParams(new AssociationFloatSumFacetRequest(new CategoryPath(\"genre\"), 10));\n    \n    FacetsAccumulator fa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetLabel tags = new FacetLabel(\"tags\");\n    FacetLabel genre = new FacetLabel(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<SimpleFacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, sfc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, sfc);\n\n    // Retrieve results\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetLabel tags = new FacetLabel(\"tags\");\n    FacetLabel genre = new FacetLabel(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    FacetsCollector sfc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, sfc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, sfc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<SimpleFacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, sfc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, sfc);\n\n    // Retrieve results\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    FacetsCollector sfc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, sfc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, sfc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = getConfig(null);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(new SumIntAssociationFacetRequest(tags, 10), \n        new SumFloatAssociationFacetRequest(genre, 10));\n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetsCollector fc = new FacetsCollector();\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n    \n    Facets tags = new TaxonomyFacetSumIntAssociations(\"$tags\", taxoReader, config, fc);\n    Facets genre = new TaxonomyFacetSumFloatAssociations(\"$genre\", taxoReader, config, fc);\n\n    // Retrieve results\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    results.add(tags.getTopChildren(10, \"tags\"));\n    results.add(genre.getTopChildren(10, \"genre\"));\n\n    indexReader.close();\n    taxoReader.close();\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","fd83550e4b0bdd36e7d9dca9273264100782440b"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d899affd3c008feba40d1405b7a38972ce2005b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}