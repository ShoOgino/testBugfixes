{"path":"src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","commits":[{"id":"95395bf94a1949052d9110b07e728d9cf6aba90c","date":1101219438,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuffer b = new StringBuffer(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","sourceNew":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","sourceOld":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuffer b = new StringBuffer(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","sourceNew":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","sourceOld":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}