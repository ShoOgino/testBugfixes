{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","pathOld":"/dev/null","sourceNew":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n    // None of the operations used here are particularly costly, so this should work.\n    // Using this low timeout will also help us catch index stalling.\n    clientSoTimeout = 5000;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","pathOld":"/dev/null","sourceNew":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n    // None of the operations used here are particularly costly, so this should work.\n    // Using this low timeout will also help us catch index stalling.\n    clientSoTimeout = 5000;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","sourceNew":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n\n  }\n\n","sourceOld":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n    // None of the operations used here are particularly costly, so this should work.\n    // Using this low timeout will also help us catch index stalling.\n    clientSoTimeout = 5000;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","sourceNew":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n\n  }\n\n","sourceOld":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n    // None of the operations used here are particularly costly, so this should work.\n    // Using this low timeout will also help us catch index stalling.\n    clientSoTimeout = 5000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeWithPullReplicasTest#ChaosMonkeyNothingIsSafeWithPullReplicasTest().mjava","sourceNew":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n    runFullThrottle = random().nextBoolean();\n  }\n\n","sourceOld":"  public ChaosMonkeyNothingIsSafeWithPullReplicasTest() {\n    super();\n    numPullReplicas = random().nextInt(TEST_NIGHTLY ? 2 : 1) + 1;\n    numRealtimeOrTlogReplicas = random().nextInt(TEST_NIGHTLY ? 4 : 3) + 1;\n    sliceCount = Integer.parseInt(System.getProperty(\"solr.tests.cloud.cm.slicecount\", \"-1\"));\n    if (sliceCount == -1) {\n      sliceCount = random().nextInt(TEST_NIGHTLY ? 3 : 2) + 1;\n    }\n\n    int numNodes = sliceCount * (numRealtimeOrTlogReplicas + numPullReplicas);\n    fixShardCount(numNodes);\n    log.info(\"Starting ChaosMonkey test with {} shards and {} nodes\", sliceCount, numNodes);\n\n\n  }\n\n","bugFix":["43d1e498704edd2bba13548a189eed4dfccff11b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["61c45e99cf6676da48f19d7511c73712ad39402b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","43d1e498704edd2bba13548a189eed4dfccff11b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"61c45e99cf6676da48f19d7511c73712ad39402b":["43d1e498704edd2bba13548a189eed4dfccff11b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}