{"path":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","commits":[{"id":"48dd7857ec646cce5ab6c5e7c48a27754559f4be","date":1234349649,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(long).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map getLatestAccessedItems(long n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(entry.getValue());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd10f25652bcb979f0a522653b94f86ad65f6656","date":1260783720,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05b31981ae95144e6a2ad01ccaab1f2e5cdcb331","date":1263253801,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":["65a70ca4e6df183f7a8f69687b55379fea0ddac2","516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"05b31981ae95144e6a2ad01ccaab1f2e5cdcb331":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"ad94625fb8d088209f46650c8097196fec67f00c":["05b31981ae95144e6a2ad01ccaab1f2e5cdcb331"],"dd10f25652bcb979f0a522653b94f86ad65f6656":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05b31981ae95144e6a2ad01ccaab1f2e5cdcb331":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"dd10f25652bcb979f0a522653b94f86ad65f6656":["05b31981ae95144e6a2ad01ccaab1f2e5cdcb331"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}