{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#coord(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#coord(int,int).mjava","sourceNew":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  @Override\n  public abstract float coord(int overlap, int maxOverlap);\n\n","sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  @Override\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#coord(int,int).mjava","sourceNew":null,"sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  @Override\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#coord(int,int).mjava","sourceNew":null,"sourceOld":"  /** Computes a score factor based on the fraction of all query terms that a\n   * document contains.  This value is multiplied into scores.\n   *\n   * <p>The presence of a large portion of the query terms indicates a better\n   * match with the query, so implementations of this method usually return\n   * larger values when the ratio between these parameters is large and smaller\n   * values when the ratio between them is small.\n   *\n   * @param overlap the number of query terms matched in the document\n   * @param maxOverlap the total number of terms in the query\n   * @return a score factor based on term overlap with the query\n   */\n  @Override\n  public abstract float coord(int overlap, int maxOverlap);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}