{"path":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkLastModValidators(HttpServletRequest,HttpServletResponse,long).mjava","commits":[{"id":"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d","date":1203633859,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkLastModValidators(HttpServletRequest,HttpServletResponse,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check for modify time related conditional headers and set status \n   * \n   * @return true if no request processing is necessary and HTTP response status has been set, false otherwise.\n   * @throws IOException\n   */\n  public static boolean checkLastModValidators(final HttpServletRequest req,\n                                               final HttpServletResponse resp,\n                                               final long lastMod)\n    throws IOException {\n\n    try {\n      // First check for If-Modified-Since because this is the common\n      // used header by HTTP clients\n      final long modifiedSince = req.getDateHeader(\"If-Modified-Since\");\n      if (modifiedSince != -1L && lastMod <= modifiedSince) {\n        // Send a \"not-modified\"\n        sendNotModified(resp);\n        return true;\n      }\n      \n      final long unmodifiedSince = req.getDateHeader(\"If-Unmodified-Since\");\n      if (unmodifiedSince != -1L && lastMod > unmodifiedSince) {\n        // Send a \"precondition failed\"\n        sendPreconditionFailed(resp);\n        return true;\n      }\n    } catch (IllegalArgumentException iae) {\n      // one of our date headers was not formated properly, ignore it\n      /* NOOP */\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkLastModValidators(HttpServletRequest,HttpServletResponse,long).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkLastModValidators(HttpServletRequest,HttpServletResponse,long).mjava","sourceNew":"  /**\n   * Check for modify time related conditional headers and set status \n   * \n   * @return true if no request processing is necessary and HTTP response status has been set, false otherwise.\n   * @throws IOException\n   */\n  public static boolean checkLastModValidators(final HttpServletRequest req,\n                                               final HttpServletResponse resp,\n                                               final long lastMod)\n    throws IOException {\n\n    try {\n      // First check for If-Modified-Since because this is the common\n      // used header by HTTP clients\n      final long modifiedSince = req.getDateHeader(\"If-Modified-Since\");\n      if (modifiedSince != -1L && lastMod <= modifiedSince) {\n        // Send a \"not-modified\"\n        sendNotModified(resp);\n        return true;\n      }\n      \n      final long unmodifiedSince = req.getDateHeader(\"If-Unmodified-Since\");\n      if (unmodifiedSince != -1L && lastMod > unmodifiedSince) {\n        // Send a \"precondition failed\"\n        sendPreconditionFailed(resp);\n        return true;\n      }\n    } catch (IllegalArgumentException iae) {\n      // one of our date headers was not formated properly, ignore it\n      /* NOOP */\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check for modify time related conditional headers and set status \n   * \n   * @return true if no request processing is necessary and HTTP response status has been set, false otherwise.\n   * @throws IOException\n   */\n  public static boolean checkLastModValidators(final HttpServletRequest req,\n                                               final HttpServletResponse resp,\n                                               final long lastMod)\n    throws IOException {\n\n    try {\n      // First check for If-Modified-Since because this is the common\n      // used header by HTTP clients\n      final long modifiedSince = req.getDateHeader(\"If-Modified-Since\");\n      if (modifiedSince != -1L && lastMod <= modifiedSince) {\n        // Send a \"not-modified\"\n        sendNotModified(resp);\n        return true;\n      }\n      \n      final long unmodifiedSince = req.getDateHeader(\"If-Unmodified-Since\");\n      if (unmodifiedSince != -1L && lastMod > unmodifiedSince) {\n        // Send a \"precondition failed\"\n        sendPreconditionFailed(resp);\n        return true;\n      }\n    } catch (IllegalArgumentException iae) {\n      // one of our date headers was not formated properly, ignore it\n      /* NOOP */\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}