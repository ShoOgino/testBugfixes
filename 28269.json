{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","commits":[{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"/dev/null","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  public void abortMerges() {\n    finishMerges(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64ffebe62143a8d4c37d99b6ece6d430d948ebc","date":1408382164,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  public synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.abort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.abort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  public void abortMerges() {\n    finishMerges(false);\n  }\n\n","bugFix":null,"bugIntro":["15fbe8579d34349a8c79cbc5c933530dd5b6742a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15fbe8579d34349a8c79cbc5c933530dd5b6742a","date":1418066328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.abort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.abort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  public synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.abort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.abort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.abort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.abort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n    }\n\n    // These merges periodically check whether they have\n    // been aborted, and stop if so.  We wait here to make\n    // sure they all stop.  It should not take very long\n    // because the merge threads periodically check if\n    // they are aborted.\n    while(runningMerges.size() > 0) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n      doWait();\n    }\n\n    stopMerges = false;\n    notifyAll();\n\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.rateLimiter.setAbort();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b74780b4efed2011d2d1a19183689db904519e","date":1586516102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n\n    stopMerges = true;\n\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8a0bc175e864e198120c8694f8dbd34f0f2b7b","date":1588914174,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    assert 0 == mergingSegments.size();\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() throws IOException {\n    // Abort all pending & running merges:\n    IOUtils.applyToAll(pendingMerges, merge -> {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      abortOneMerge(merge);\n      mergeFinish(merge);\n    });\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() {\n    // Abort all pending & running merges:\n    for (final MergePolicy.OneMerge merge : pendingMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n      mergeFinish(merge);\n    }\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775b68a26e2d19d1b5f16cd18a3bc8df738a302","date":1598253342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#abortMerges().mjava","sourceNew":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() throws IOException {\n    merges.disable();\n    // Abort all pending & running merges:\n    IOUtils.applyToAll(pendingMerges, merge -> {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      abortOneMerge(merge);\n      mergeFinish(merge);\n    });\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","sourceOld":"  /** Aborts running merges.  Be careful when using this\n   *  method: when you abort a long-running merge, you lose\n   *  a lot of work that must later be redone. */\n  private synchronized void abortMerges() throws IOException {\n    // Abort all pending & running merges:\n    IOUtils.applyToAll(pendingMerges, merge -> {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n      }\n      abortOneMerge(merge);\n      mergeFinish(merge);\n    });\n    pendingMerges.clear();\n\n    for (final MergePolicy.OneMerge merge : runningMerges) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n      }\n      merge.setAborted();\n    }\n\n    // We wait here to make all merges stop.  It should not\n    // take very long because they periodically check if\n    // they are aborted.\n    while (runningMerges.size() + runningAddIndexesMerges.size() != 0) {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"now wait for \" + runningMerges.size()\n            + \" running merge/s to abort; currently running addIndexes: \" + runningAddIndexesMerges.size());\n      }\n\n      doWait();\n    }\n\n    notifyAll();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["7b8a0bc175e864e198120c8694f8dbd34f0f2b7b"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a775b68a26e2d19d1b5f16cd18a3bc8df738a302":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["15fbe8579d34349a8c79cbc5c933530dd5b6742a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b8a0bc175e864e198120c8694f8dbd34f0f2b7b":["92b74780b4efed2011d2d1a19183689db904519e"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"92b74780b4efed2011d2d1a19183689db904519e":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"15fbe8579d34349a8c79cbc5c933530dd5b6742a":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a775b68a26e2d19d1b5f16cd18a3bc8df738a302"]},"commit2Childs":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["a775b68a26e2d19d1b5f16cd18a3bc8df738a302"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"a775b68a26e2d19d1b5f16cd18a3bc8df738a302":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["92b74780b4efed2011d2d1a19183689db904519e"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"7b8a0bc175e864e198120c8694f8dbd34f0f2b7b":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["15fbe8579d34349a8c79cbc5c933530dd5b6742a"],"15fbe8579d34349a8c79cbc5c933530dd5b6742a":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"92b74780b4efed2011d2d1a19183689db904519e":["7b8a0bc175e864e198120c8694f8dbd34f0f2b7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}