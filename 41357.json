{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((CommonsHttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    CommonsHttpSolrServer client = (CommonsHttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((CommonsHttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    CommonsHttpSolrServer client = (CommonsHttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((CommonsHttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    CommonsHttpSolrServer client = (CommonsHttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((CommonsHttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    CommonsHttpSolrServer client = (CommonsHttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8b4dc0cb506204097b6e34b962947988b60e5d0","date":1342976066,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor();\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor();\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79ec7e176bd0b09932c017c341b5f1cae2a33b6","date":1343925223,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n//    for (SolrServer c : clients) {\n//      c.optimize();\n//      System.out.println(clients.get(0).request(new LukeRequest()));\n//    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b","date":1344027405,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n//    for (SolrServer c : clients) {\n//      c.optimize();\n//      System.out.println(clients.get(0).request(new LukeRequest()));\n//    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    //del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(201);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        \n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    \n    cmdDistrib.finish();\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(8, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    // debug stuff\n    for (SolrServer c : clients) {\n      c.optimize();\n      // distrib optimize is not working right yet, so call it on each client\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(8, executor);\n    \n    nodes.clear();\n    int cnt = atLeast(200);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      \n      cmd.solrDoc = sdoc(\"id\", id++);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n    }\n\n    cmdDistrib.finish();\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      System.out.println(resp);\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","d79ec7e176bd0b09932c017c341b5f1cae2a33b6","bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b"],"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(201);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        System.out.println(\"node props:\" + nodeProps);\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    \n    cmdDistrib.finish();\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(201);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        \n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    \n    cmdDistrib.finish();\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(201);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        System.out.println(\"node props:\" + nodeProps);\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    \n    cmdDistrib.finish();\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(201);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        System.out.println(\"node props:\" + nodeProps);\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    \n    cmdDistrib.finish();\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, executor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    // Test RetryNode\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    nodes = new ArrayList<Node>();\n\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1111111);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    assertEquals(numFoundBefore + 1, numFoundAfter);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    Response response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    response = cmdDistrib.getResponse();\n    \n    assertEquals(response.errors.toString(), 0, response.errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(5, updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","a69439d0df009e0bb0038d1e427159f449dd670d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    // Test RetryNode\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    nodes = new ArrayList<Node>();\n\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1111111);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    assertEquals(numFoundBefore + 1, numFoundAfter);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    // Test RetryNode\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    nodes = new ArrayList<Node>();\n\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1111111);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    assertEquals(numFoundBefore + 1, numFoundAfter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0491dc45f6b12f57e9c33751e9317a01995556c6","date":1385418725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNode();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    // Test RetryNode\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    nodes = new ArrayList<Node>();\n\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1111111);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    assertEquals(numFoundBefore + 1, numFoundAfter);\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28b49bc3bf9043888cb4243e659f6898fe2a95a9","date":1385594113,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNode();\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    cmd.solrDoc = sdoc(\"id\", 2);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", 3);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", 4);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = \"2\";\n    \n    \n\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    int id = 5;\n    \n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id++);\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    // Test RetryNode\n    cmdDistrib = new SolrCmdDistributor(updateExecutor);\n    final HttpSolrServer solrclient = (HttpSolrServer) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    nodes = new ArrayList<Node>();\n\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, \"[ff01::114]:33332\" + context, ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        ZkNodeProps leaderProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n            ZkStateReader.CORE_NAME_PROP, \"\");\n        this.nodeProps = new ZkCoreNodeProps(leaderProps);\n\n        return true;\n      }\n    };\n    \n\n    nodes.add(retryNode);\n    \n    \n    cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", 1111111);\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    \n    long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    assertEquals(numFoundBefore + 1, numFoundAfter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<Node>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      SolrCore core = cores.getCore(\"collection1\");\n      try {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {}\n          @Override\n          public void postSoftCommit() {}\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n              SolrIndexSearcher currentSearcher) {}\n        });\n      } finally {\n        core.close();\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de8b178432c3f622f49a56587c62efe7c95982ad","date":1396456307,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrServer) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrServer client = (HttpSolrServer) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrServer c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrServer c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrServer httpClient = (HttpSolrServer) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrServer c : clients) {\n      HttpSolrServer httpClient = (HttpSolrServer) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrServer c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(getShardCount(), commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    \n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    List<Node> nodes = new ArrayList<>();\n\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        ((HttpSolrClient) controlClient).getBaseURL(),\n        ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n    // add one doc to controlClient\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    \n    List<Error> errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    long numFound = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(1, numFound);\n    \n    HttpSolrClient client = (HttpSolrClient) clients.get(0);\n    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n        client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    \n    // add another 2 docs to control and 3 to client\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    \n    int id2 = id.incrementAndGet();\n    AddUpdateCommand cmd2 = new AddUpdateCommand(null);\n    cmd2.solrDoc = sdoc(\"id\", id2);\n\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd2, nodes, params);\n    \n    AddUpdateCommand cmd3 = new AddUpdateCommand(null);\n    cmd3.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    SolrDocumentList results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 3, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(3, numFound);\n    \n    // now delete doc 2 which is on both control and client1\n    \n    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);\n    dcmd.id = Integer.toString(id2);\n    \n\n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribDelete(dcmd, nodes, params);\n    \n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n    \n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    cmdDistrib.finish();\n\n    errors = cmdDistrib.getErrors();\n    \n    assertEquals(errors.toString(), 0, errors.size());\n    \n    \n    results = controlClient.query(new SolrQuery(\"*:*\")).getResults();\n    numFound = results.getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    numFound = client.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    assertEquals(results.toString(), 2, numFound);\n    \n    for (SolrClient c : clients) {\n      c.optimize();\n      //System.out.println(clients.get(0).request(new LukeRequest()));\n    }\n    \n    cmdDistrib = new SolrCmdDistributor(updateShardHandler);\n    \n    int cnt = atLeast(303);\n    for (int i = 0; i < cnt; i++) {\n      nodes.clear();\n      for (SolrClient c : clients) {\n        if (random().nextBoolean()) {\n          continue;\n        }\n        HttpSolrClient httpClient = (HttpSolrClient) c;\n        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n\n      }\n      AddUpdateCommand c = new AddUpdateCommand(null);\n      c.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      if (nodes.size() > 0) {\n        params = new ModifiableSolrParams();\n        cmdDistrib.distribAdd(c, nodes, params);\n      }\n    }\n    \n    nodes.clear();\n    \n    for (SolrClient c : clients) {\n      HttpSolrClient httpClient = (HttpSolrClient) c;\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n          httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      \n      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));\n    }\n    \n    final AtomicInteger commits = new AtomicInteger();\n    for(JettySolrRunner jetty : jettys) {\n      CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter().getFilter()).getCores();\n      try (SolrCore core = cores.getCore(\"collection1\")) {\n        core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {\n          @Override\n          public void init(NamedList args) {\n          }\n\n          @Override\n          public void postSoftCommit() {\n          }\n\n          @Override\n          public void postCommit() {\n            commits.incrementAndGet();\n          }\n\n          @Override\n          public void newSearcher(SolrIndexSearcher newSearcher,\n                                  SolrIndexSearcher currentSearcher) {\n          }\n        });\n      }\n    }\n    params = new ModifiableSolrParams();\n    params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);\n\n    cmdDistrib.distribCommit(ccmd, nodes, params);\n    \n    cmdDistrib.finish();\n\n    assertEquals(shardCount, commits.get());\n    \n    for (SolrClient c : clients) {\n      NamedList<Object> resp = c.request(new LukeRequest());\n      assertEquals(\"SOLR-3428: We only did adds - there should be no deletes\",\n          ((NamedList<Object>) resp.get(\"index\")).get(\"numDocs\"),\n          ((NamedList<Object>) resp.get(\"index\")).get(\"maxDoc\"));\n    }\n    \n    \n    testMaxRetries();\n    testOneRetry();\n    testRetryNodeAgainstBadAddress();\n    testRetryNodeWontRetrySocketError();\n    \n    testDistribOpenSearcher();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1525b4dfbc0d413b8d7247da232009778e624836","a69439d0df009e0bb0038d1e427159f449dd670d"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a69439d0df009e0bb0038d1e427159f449dd670d"],"a69439d0df009e0bb0038d1e427159f449dd670d":["1525b4dfbc0d413b8d7247da232009778e624836"],"bafca15d8e408346a67f4282ad1143b88023893b":["de8b178432c3f622f49a56587c62efe7c95982ad"],"de8b178432c3f622f49a56587c62efe7c95982ad":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b":["d79ec7e176bd0b09932c017c341b5f1cae2a33b6"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28b49bc3bf9043888cb4243e659f6898fe2a95a9":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"f2126b84bd093fa3d921582a109a0ee578c28126":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","1525b4dfbc0d413b8d7247da232009778e624836"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"5eb2511ababf862ea11e10761c70ee560cd84510":["e332392bbbdd01cb69ad6a89051f483cda38e15e","de8b178432c3f622f49a56587c62efe7c95982ad"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["28b49bc3bf9043888cb4243e659f6898fe2a95a9"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b"],"d79ec7e176bd0b09932c017c341b5f1cae2a33b6":["b8b4dc0cb506204097b6e34b962947988b60e5d0"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["a6378064655e76cd7b908b1cab4ce425b384b508"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"a6378064655e76cd7b908b1cab4ce425b384b508":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","28b49bc3bf9043888cb4243e659f6898fe2a95a9"],"1525b4dfbc0d413b8d7247da232009778e624836":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a7035935aa89f6951286e9005cbeb16e89a082a2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"de8b178432c3f622f49a56587c62efe7c95982ad":["bafca15d8e408346a67f4282ad1143b88023893b","5eb2511ababf862ea11e10761c70ee560cd84510"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"28b49bc3bf9043888cb4243e659f6898fe2a95a9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["de8b178432c3f622f49a56587c62efe7c95982ad","5eb2511ababf862ea11e10761c70ee560cd84510"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d79ec7e176bd0b09932c017c341b5f1cae2a33b6"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"a7035935aa89f6951286e9005cbeb16e89a082a2":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["a6378064655e76cd7b908b1cab4ce425b384b508"],"d79ec7e176bd0b09932c017c341b5f1cae2a33b6":["bb9db5a3da3585f1837b0e9e8fc69c45b5a8e86b"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0491dc45f6b12f57e9c33751e9317a01995556c6":["28b49bc3bf9043888cb4243e659f6898fe2a95a9"],"a6378064655e76cd7b908b1cab4ce425b384b508":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"1525b4dfbc0d413b8d7247da232009778e624836":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","f2126b84bd093fa3d921582a109a0ee578c28126","5eb2511ababf862ea11e10761c70ee560cd84510","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}