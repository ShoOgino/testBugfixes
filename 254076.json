{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof TempTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof TempTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02833f6a58f0cce6c4ee5547ff3e72773d259e3","date":1376754895,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof TempTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) {\n        // if (DEBUG) {\n        //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n        // }\n        assert clearEOF();\n        if (target.compareTo(term) != 0 || !termExists) {\n          assert otherState != null && otherState instanceof BlockTermState;\n          currentFrame = staticFrame;\n          currentFrame.state.copyFrom(otherState);\n          term.copyBytes(target);\n          currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n          assert currentFrame.metaDataUpto > 0;\n          validIndexPrefix = 0;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n          // }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}