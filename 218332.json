{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13406cad512adb18f0b9447f1f35385a56a7bd88","date":1445252017,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery that includes the underlying span scores\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this(wrappedQuery, function, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this.wrappedQuery = wrappedQuery;\n    this.function = function;\n  }\n\n","bugFix":["2e8525cf39738b3113cc2ef20025af7208403718"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery that includes the underlying span scores\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @deprecated Use {@link #PayloadScoreQuery(SpanQuery, PayloadFunction, PayloadDecoder)}\n   */\n  @Deprecated\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this(wrappedQuery, function, true);\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery that includes the underlying span scores\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this(wrappedQuery, function, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new PayloadScoreQuery that includes the underlying span scores\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @deprecated Use {@link #PayloadScoreQuery(SpanQuery, PayloadFunction, PayloadDecoder)}\n   */\n  @Deprecated\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function) {\n    this(wrappedQuery, function, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13406cad512adb18f0b9447f1f35385a56a7bd88":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"13406cad512adb18f0b9447f1f35385a56a7bd88":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}