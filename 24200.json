{"path":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor.LazyField#stringValue().mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor.LazyField#stringValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    @Override\n    synchronized public String stringValue() {\n      if (isBinary) {\n        return null;\n      } else {\n        if (fieldsData == null) {\n          String result = null;\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            byte[] bytes = new byte[toRead];\n            localFieldsStream.readBytes(bytes, 0, toRead);\n            result = new String(bytes, \"UTF-8\");\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n          if (cacheResult == true){\n            fieldsData = result;\n          }\n          return result;\n        } else {\n          return (String) fieldsData;\n        }\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          String result = null;\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            byte[] bytes = new byte[toRead];\n            localFieldsStream.readBytes(bytes, 0, toRead);\n            result = new String(bytes, \"UTF-8\");\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n          if (cacheResult == true){\n            fieldsData = result;\n          }\n          return result;\n        } else {\n          return (String) fieldsData;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor.LazyField#stringValue().mjava","sourceNew":null,"sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    @Override\n    synchronized public String stringValue() {\n      if (isBinary) {\n        return null;\n      } else {\n        if (fieldsData == null) {\n          String result = null;\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            byte[] bytes = new byte[toRead];\n            localFieldsStream.readBytes(bytes, 0, toRead);\n            result = new String(bytes, \"UTF-8\");\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n          if (cacheResult == true){\n            fieldsData = result;\n          }\n          return result;\n        } else {\n          return (String) fieldsData;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}