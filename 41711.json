{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","commits":[{"id":"5003664d14ef48a0557ce1d8a684b15d62efe912","date":1539883534,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && totalHits >= totalHitsThreshold && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5374ec368ef9441d694af8df95b2ffbae3d7f03b","date":1548748689,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && totalHits > totalHitsThreshold && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && totalHits >= totalHitsThreshold && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19eef45a852c3316ae52fdf941731448ece967a","date":1567670879,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached() && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && totalHits > totalHitsThreshold && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32dc2e73f68d239029f9fe76729eda505b75bb6e","date":1569593453,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()\n          && (queueFull || (bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0f))) {\n      float maxMinScore = Float.NEGATIVE_INFINITY;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        maxMinScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(maxMinScore);\n        }\n      }\n      if (bottomValueChecker != null) {\n        maxMinScore = Math.max(maxMinScore, bottomValueChecker.getBottomValue());\n      }\n      assert maxMinScore > 0f;\n      scorer.setMinCompetitiveScore(maxMinScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached() && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5319c194edd3bf49f39c6d198107ed213c1d3670","date":1569842580,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()\n          && (queueFull || (bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0f))) {\n      float maxMinScore = Float.NEGATIVE_INFINITY;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        maxMinScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(maxMinScore);\n        }\n      }\n      if (bottomValueChecker != null) {\n        maxMinScore = Math.max(maxMinScore, bottomValueChecker.getBottomValue());\n      }\n      assert maxMinScore > 0f;\n      scorer.setMinCompetitiveScore(maxMinScore);\n      minScore = maxMinScore;\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()\n          && (queueFull || (bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0f))) {\n      float maxMinScore = Float.NEGATIVE_INFINITY;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        maxMinScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(maxMinScore);\n        }\n      }\n      if (bottomValueChecker != null) {\n        maxMinScore = Math.max(maxMinScore, bottomValueChecker.getBottomValue());\n      }\n      assert maxMinScore > 0f;\n      scorer.setMinCompetitiveScore(maxMinScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00d3f1ad3bbb957062c4871ec23f49edda800c6","date":1569925943,"type":4,"author":"jimczi","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":null,"sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()\n          && (queueFull || (bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0f))) {\n      float maxMinScore = Float.NEGATIVE_INFINITY;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        maxMinScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(maxMinScore);\n        }\n      }\n      if (bottomValueChecker != null) {\n        maxMinScore = Math.max(maxMinScore, bottomValueChecker.getBottomValue());\n      }\n      assert maxMinScore > 0f;\n      scorer.setMinCompetitiveScore(maxMinScore);\n      minScore = maxMinScore;\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db0ef4e326916fc107ab6e066754d3ecba5197b","date":1570005243,"type":1,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable,boolean).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        float localMinScore = firstComparator.value(bottom.slot);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            bottomValueChecker.updateThreadLocalBottomValue(minCompetitiveScore);\n          }\n        }\n      }\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = globalMinScore;\n        }\n      }\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer, boolean checkQueue) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (checkQueue && queueFull) {\n        assert bottom != null && firstComparator != null;\n        float localMinScore = firstComparator.value(bottom.slot);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            bottomValueChecker.updateThreadLocalBottomValue(minCompetitiveScore);\n          }\n        }\n      }\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = globalMinScore;\n        }\n      }\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c10c01b195758b50e02599868e4093eb712f57","date":1570008306,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && hitsThresholdChecker.isThresholdReached()\n          && ((bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0) || queueFull)) {\n      assert firstComparator != null;\n      float bottomScore = 0f;\n\n      if (queueFull) {\n        bottomScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(bottomScore);\n        }\n      }\n\n      // Global bottom can only be greater than or equal to the local bottom score\n      // The updating of global bottom score for this hit before getting here should\n      // ensure that\n      if (bottomValueChecker != null && bottomValueChecker.getBottomValue() > bottomScore) {\n        bottomScore = bottomValueChecker.getBottomValue();\n      }\n\n      scorer.setMinCompetitiveScore(bottomScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached()) {\n      boolean hasChanged = false;\n      if (queueFull) {\n        assert bottom != null && firstComparator != null;\n        float localMinScore = firstComparator.value(bottom.slot);\n        if (localMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = localMinScore;\n          if (bottomValueChecker != null) {\n            bottomValueChecker.updateThreadLocalBottomValue(minCompetitiveScore);\n          }\n        }\n      }\n      if (bottomValueChecker != null) {\n        float globalMinScore = bottomValueChecker.getBottomValue();\n        if (globalMinScore > minCompetitiveScore) {\n          hasChanged = true;\n          minCompetitiveScore = globalMinScore;\n        }\n      }\n      if (hasChanged) {\n        scorer.setMinCompetitiveScore(minCompetitiveScore);\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && hitsThresholdChecker.isThresholdReached()\n          && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && hitsThresholdChecker.isThresholdReached()\n          && ((bottomValueChecker != null && bottomValueChecker.getBottomValue() > 0) || queueFull)) {\n      assert firstComparator != null;\n      float bottomScore = 0f;\n\n      if (queueFull) {\n        bottomScore = firstComparator.value(bottom.slot);\n        if (bottomValueChecker != null) {\n          bottomValueChecker.updateThreadLocalBottomValue(bottomScore);\n        }\n      }\n\n      // Global bottom can only be greater than or equal to the local bottom score\n      // The updating of global bottom score for this hit before getting here should\n      // ensure that\n      if (bottomValueChecker != null && bottomValueChecker.getBottomValue() > bottomScore) {\n        bottomScore = bottomValueChecker.getBottomValue();\n      }\n\n      scorer.setMinCompetitiveScore(bottomScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e0066943a75c6f4af395bcd7728a812943cbb63","date":1570723011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && queueFull\n          && hitsThresholdChecker.isThresholdReached()) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && hitsThresholdChecker.isThresholdReached()\n          && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":3,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && queueFull\n          && hitsThresholdChecker.isThresholdReached()) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore && hitsThresholdChecker.isThresholdReached() && queueFull) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      scorer.setMinCompetitiveScore(minScore);\n      totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#updateMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && queueFull\n          && hitsThresholdChecker.isThresholdReached()) {\n      assert bottom != null && relevanceComparator != null;\n      float minScore = relevanceComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMinCompetitiveScore(Scorable scorer) throws IOException {\n    if (canSetMinScore\n          && queueFull\n          && hitsThresholdChecker.isThresholdReached()) {\n      assert bottom != null && firstComparator != null;\n      float minScore = firstComparator.value(bottom.slot);\n      if (minScore > minCompetitiveScore) {\n        scorer.setMinCompetitiveScore(minScore);\n        minCompetitiveScore = minScore;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n        if (minScoreAcc != null) {\n          minScoreAcc.accumulate(bottom.doc, minScore);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e19eef45a852c3316ae52fdf941731448ece967a":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"807314aa41c10866aec273a0e54fd0d24d8971de":["f0c10c01b195758b50e02599868e4093eb712f57"],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["e19eef45a852c3316ae52fdf941731448ece967a"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["5319c194edd3bf49f39c6d198107ed213c1d3670"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["807314aa41c10866aec273a0e54fd0d24d8971de"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["e19eef45a852c3316ae52fdf941731448ece967a","6e0066943a75c6f4af395bcd7728a812943cbb63"],"0db0ef4e326916fc107ab6e066754d3ecba5197b":["f00d3f1ad3bbb957062c4871ec23f49edda800c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0c10c01b195758b50e02599868e4093eb712f57":["0db0ef4e326916fc107ab6e066754d3ecba5197b"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"5319c194edd3bf49f39c6d198107ed213c1d3670":["32dc2e73f68d239029f9fe76729eda505b75bb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"e19eef45a852c3316ae52fdf941731448ece967a":["32dc2e73f68d239029f9fe76729eda505b75bb6e","3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"807314aa41c10866aec273a0e54fd0d24d8971de":["6e0066943a75c6f4af395bcd7728a812943cbb63"],"32dc2e73f68d239029f9fe76729eda505b75bb6e":["5319c194edd3bf49f39c6d198107ed213c1d3670"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"f00d3f1ad3bbb957062c4871ec23f49edda800c6":["0db0ef4e326916fc107ab6e066754d3ecba5197b"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"0db0ef4e326916fc107ab6e066754d3ecba5197b":["f0c10c01b195758b50e02599868e4093eb712f57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"f0c10c01b195758b50e02599868e4093eb712f57":["807314aa41c10866aec273a0e54fd0d24d8971de"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["e19eef45a852c3316ae52fdf941731448ece967a"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5319c194edd3bf49f39c6d198107ed213c1d3670":["f00d3f1ad3bbb957062c4871ec23f49edda800c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}