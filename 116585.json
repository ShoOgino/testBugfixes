{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSamping().mjava","commits":[{"id":"8179b8076771d18179c95bd365eab8cda618f84a","date":1348552364,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSamping().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCountWithdepthUsingSamping() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c0af45b07833be5922ae261245816cc39091b6d","date":1354907459,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSamping().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSamping() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSamping().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCountWithdepthUsingSamping() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8179b8076771d18179c95bd365eab8cda618f84a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["8179b8076771d18179c95bd365eab8cda618f84a","5c0af45b07833be5922ae261245816cc39091b6d"],"5c0af45b07833be5922ae261245816cc39091b6d":["8179b8076771d18179c95bd365eab8cda618f84a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c0af45b07833be5922ae261245816cc39091b6d"]},"commit2Childs":{"8179b8076771d18179c95bd365eab8cda618f84a":["407687e67faf6e1f02a211ca078d8e3eed631027","5c0af45b07833be5922ae261245816cc39091b6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8179b8076771d18179c95bd365eab8cda618f84a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"5c0af45b07833be5922ae261245816cc39091b6d":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}