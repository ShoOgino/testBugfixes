{"path":"src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.STRING, reverse);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4d3bc5f3b22a6349ffb83e0232530ccd3967688","date":1152991783,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.STRING, reverse);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.STRING, reverse);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"b4d3bc5f3b22a6349ffb83e0232530ccd3967688":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b4d3bc5f3b22a6349ffb83e0232530ccd3967688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["b4d3bc5f3b22a6349ffb83e0232530ccd3967688"],"b4d3bc5f3b22a6349ffb83e0232530ccd3967688":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}