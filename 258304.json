{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits.value, memDocs.totalHits.value);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the Directory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory directory, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits.value, memDocs.totalHits.value);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits.value, memDocs.totalHits.value);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d77dafd89756a5161d244985903e3487ca109182"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}