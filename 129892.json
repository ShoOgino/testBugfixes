{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","commits":[{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null, true);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null, true);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null, true) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null, true);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null, true);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null, true) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, PostingsEnum.FLAG_FREQS);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, PostingsEnum.FLAG_FREQS);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq, true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2262f0d8ead49d04485950fba849e166dbe28fb","date":1451569279,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), true);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createWeight(searcher.rewrite(bq.build()), ScoreMode.COMPLETE, 1);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createWeight(searcher.rewrite(bq.build()), ScoreMode.COMPLETE, 1);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq.build(), ScoreMode.COMPLETE);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext());\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.optionalBulkScorer(reader.getContext());\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext()) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b2262f0d8ead49d04485950fba849e166dbe28fb","9fc47cb7b4346802411bb432f501ed0673d7119e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}