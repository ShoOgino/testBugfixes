{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","commits":[{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    final Random rand = newRandom();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","c00afe74a80796ed1f30a9509b150ff104746a1f","c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    final Random rand = newRandom();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6c7b564e6275fb0c0e137d84fda55b447c19d9c","date":1286438356,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    final Random rand = random;\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testCorruptionAfterDiskFullDuringMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCorruptionAfterDiskFullDuringMerge().mjava","sourceNew":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2593\n  public void testCorruptionAfterDiskFullDuringMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    //IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setReaderPooling(true));\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new SerialMergeScheduler()).setReaderPooling(true));\n\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(2);\n\n    Document doc = new Document();\n    doc.add(newField(\"f\", \"doctor who\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    w.commit();\n\n    w.deleteDocuments(new Term(\"f\", \"who\"));\n    w.addDocument(doc);\n    \n    // disk fills up!\n    FailTwiceDuringMerge ftdm = new FailTwiceDuringMerge();\n    ftdm.setDoFail();\n    dir.failOn(ftdm);\n\n    try {\n      w.commit();\n      fail(\"fake disk full IOExceptions not hit\");\n    } catch (IOException ioe) {\n      // expected\n      assertTrue(ftdm.didFail1);\n    }\n    _TestUtil.checkIndex(dir);\n    ftdm.clearDoFail();\n    w.addDocument(doc);\n    w.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1085ea837da8f1e96697e17cf73e1d08e7329261":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c","84b590669deb3d3a471cec6cb13b104b2ee94418"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"a6c7b564e6275fb0c0e137d84fda55b447c19d9c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"1085ea837da8f1e96697e17cf73e1d08e7329261":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["a6c7b564e6275fb0c0e137d84fda55b447c19d9c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a6c7b564e6275fb0c0e137d84fda55b447c19d9c":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}