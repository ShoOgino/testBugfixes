{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","commits":[{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, float boost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(boost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(boost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, float boost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(boost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(boost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","sourceNew":null,"sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, float boost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(boost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(boost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a82662cae660e76ded4de1e9b451633e523d83e1":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a82662cae660e76ded4de1e9b451633e523d83e1"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}