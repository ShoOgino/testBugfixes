{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","commits":[{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02c4407b4b9457dc4320063077c630e4c70f49d6","date":1344098895,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404or503(HttpSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","sourceNew":"  private void waitForNon404or503(HttpSolrServer collectionClient)\n      throws Exception {\n    SolrException exp = null;\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        if (!(e.code() == 403 || e.code() == 503)) {\n          throw e;\n        }\n        exp = e;\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - \" + exp.code() + \" : \" + collectionClient.getBaseURL());\n  }\n\n","sourceOld":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404or503(HttpSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","sourceNew":"  private void waitForNon404or503(HttpSolrServer collectionClient)\n      throws Exception {\n    SolrException exp = null;\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        if (!(e.code() == 403 || e.code() == 503)) {\n          throw e;\n        }\n        exp = e;\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - \" + exp.code() + \" : \" + collectionClient.getBaseURL());\n  }\n\n","sourceOld":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForNon404(HttpSolrServer).mjava","sourceNew":null,"sourceOld":"  private void waitForNon404(HttpSolrServer collectionClient)\n      throws Exception {\n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n    \n    while (System.currentTimeMillis() < timeoutAt) {\n      boolean missing = false;\n      try {\n        collectionClient.query(new SolrQuery(\"*:*\"));\n      } catch (SolrException e) {\n        // How do I get the response code!?\n        if (!e.getMessage().contains(\"(404)\")) {\n          throw e;\n        }\n        missing = true;\n      }\n      if (!missing) {\n        return;\n      }\n      Thread.sleep(50);\n    }\n    printLayout();\n    fail(\"Could not find the new collection - 404 : \" + collectionClient.getBaseURL());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02c4407b4b9457dc4320063077c630e4c70f49d6"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02c4407b4b9457dc4320063077c630e4c70f49d6"],"02c4407b4b9457dc4320063077c630e4c70f49d6":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02c4407b4b9457dc4320063077c630e4c70f49d6"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","02c4407b4b9457dc4320063077c630e4c70f49d6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"02c4407b4b9457dc4320063077c630e4c70f49d6":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}