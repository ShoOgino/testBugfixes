{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","commits":[{"id":"45346a9890012ac3b6612b55642d1aa56be51d45","date":1345458772,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1491861ccc4b32acaaafd00c1b50fb7babb02475","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4159c807d1d3d9b2f9221ee71879b62f5f5641e0","date":1397755681,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","sourceOld":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","sourceOld":"  protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","bugFix":["45346a9890012ac3b6612b55642d1aa56be51d45"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1491861ccc4b32acaaafd00c1b50fb7babb02475","date":1421260700,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_USE_RETRY) != null) {\n      HttpClientUtil.setUseRetry(httpClient,\n          config.getBool(HttpClientUtil.PROP_USE_RETRY));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","bugFix":["45346a9890012ac3b6612b55642d1aa56be51d45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n\n    // Intercept every request made through httpclient and validate it has a SolrHttpContext object.\n    httpClient.addRequestInterceptor(new HttpRequestInterceptor() {\n      @Override\n      public void process(final HttpRequest request, final HttpContext context) {\n        // Verify that a context object was passed in\n        final Object solrContext = context.getAttribute(SolrHttpContext.SOLR_CONTEXT_KEY);\n        if (solrContext == null || solrContext instanceof SolrHttpContext == false) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"A SolrHttpContext object must be passed in as context. Context: \" + context);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96daba67b9f57acb9af8bfd3400fc9622b32cc95","date":1438618981,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n\n    // Intercept every request made through httpclient and validate it has a SolrHttpContext object.\n    httpClient.addRequestInterceptor(new HttpRequestInterceptor() {\n      @Override\n      public void process(final HttpRequest request, final HttpContext context) {\n        // Verify that a context object was passed in\n        final Object solrContext = context.getAttribute(SolrHttpContext.SOLR_CONTEXT_KEY);\n        if (solrContext == null || solrContext instanceof SolrHttpContext == false) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"A SolrHttpContext object must be passed in as context. Context: \" + context);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientConfigurer#configure(DefaultHttpClient,SolrParams).mjava","sourceNew":null,"sourceOld":"  public void configure(DefaultHttpClient httpClient, SolrParams config) {\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS) != null) {\n      HttpClientUtil.setMaxConnections(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      HttpClientUtil.setMaxConnectionsPerHost(httpClient,\n          config.getInt(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_CONNECTION_TIMEOUT) != null) {\n      HttpClientUtil.setConnectionTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_SO_TIMEOUT) != null) {\n      HttpClientUtil.setSoTimeout(httpClient,\n          config.getInt(HttpClientUtil.PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(HttpClientUtil.PROP_FOLLOW_REDIRECTS) != null) {\n      HttpClientUtil.setFollowRedirects(httpClient,\n          config.getBool(HttpClientUtil.PROP_FOLLOW_REDIRECTS));\n    }\n    \n    // always call setUseRetry, whether it is in config or not\n    HttpClientUtil.setUseRetry(httpClient,\n        config.getBool(HttpClientUtil.PROP_USE_RETRY, true));\n    \n    final String basicAuthUser = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config\n        .get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    HttpClientUtil.setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(HttpClientUtil.PROP_ALLOW_COMPRESSION) != null) {\n      HttpClientUtil.setAllowCompression(httpClient,\n          config.getBool(HttpClientUtil.PROP_ALLOW_COMPRESSION));\n    }\n    \n    boolean sslCheckPeerName = toBooleanDefaultIfNull(\n        toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n    if(sslCheckPeerName == false) {\n      HttpClientUtil.setHostNameVerifier(httpClient, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45346a9890012ac3b6612b55642d1aa56be51d45"],"859081acf00749f5dd462772c571d611d4a4d2db":["96daba67b9f57acb9af8bfd3400fc9622b32cc95"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["1491861ccc4b32acaaafd00c1b50fb7babb02475"],"96daba67b9f57acb9af8bfd3400fc9622b32cc95":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45346a9890012ac3b6612b55642d1aa56be51d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45346a9890012ac3b6612b55642d1aa56be51d45"],"1491861ccc4b32acaaafd00c1b50fb7babb02475":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["4159c807d1d3d9b2f9221ee71879b62f5f5641e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"],"4159c807d1d3d9b2f9221ee71879b62f5f5641e0":["45346a9890012ac3b6612b55642d1aa56be51d45"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["96daba67b9f57acb9af8bfd3400fc9622b32cc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","45346a9890012ac3b6612b55642d1aa56be51d45","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"96daba67b9f57acb9af8bfd3400fc9622b32cc95":["859081acf00749f5dd462772c571d611d4a4d2db"],"45346a9890012ac3b6612b55642d1aa56be51d45":["001b25b42373b22a52f399dbf072f1224632e8e6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","4159c807d1d3d9b2f9221ee71879b62f5f5641e0"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"1491861ccc4b32acaaafd00c1b50fb7babb02475":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["1491861ccc4b32acaaafd00c1b50fb7babb02475"],"4159c807d1d3d9b2f9221ee71879b62f5f5641e0":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}