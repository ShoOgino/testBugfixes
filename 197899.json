{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","commits":[{"id":"519c3af92c13c12d3423d514eddc7688469bb70f","date":1358345593,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new FacetLabel(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new FacetLabel(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":null,"sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new FacetLabel(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new FacetLabel(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":null,"sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(fip, facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.facetRequests.size());\n    \n    fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["519c3af92c13c12d3423d514eddc7688469bb70f"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","519c3af92c13c12d3423d514eddc7688469bb70f"],"519c3af92c13c12d3423d514eddc7688469bb70f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","07155cdd910937cdf6877e48884d5782845c8b8b"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"519c3af92c13c12d3423d514eddc7688469bb70f":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","519c3af92c13c12d3423d514eddc7688469bb70f"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}