{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      // nocommit\n      //docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      // nocommit\n      //docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      // nocommit\n      //docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5947ccd7ba3770dcba5a0713dbd5496678256d9","date":1291744634,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    docWriter.pauseAllThreads();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n      // nocommit\n      //docWriter.setFlushedDocCount(0);\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      docWriter.resumeAllThreads();\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad27cbdf7398b36c6a478859f546c84d71cb251b","date":1296069528,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()} or any of the addIndexes methods, they\n   *    will receive {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will \n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);      \n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b4dec651d0a89767d1233eef7353f88a42bea0","date":1314786996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #optimize()}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #expungeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      infoStream.message(\"IW\", \"hit exception during deleteAll\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream != null) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f","date":1322855559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      infoStream.message(\"IW\", \"hit exception during deleteAll\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success && infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"hit exception during deleteAll\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll(false);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll();\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteAll().mjava","sourceNew":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll(false);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete all documents in the index.\n   *\n   * <p>This method will drop all buffered documents and will\n   *    remove all segments from the index. This change will not be\n   *    visible until a {@link #commit()} has been called. This method\n   *    can be rolled back using {@link #rollback()}.</p>\n   *\n   * <p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>\n   *\n   * <p>NOTE: this method will forcefully abort all merges\n   *    in progress.  If other threads are running {@link\n   *    #forceMerge}, {@link #addIndexes(IndexReader[])} or\n   *    {@link #forceMergeDeletes} methods, they may receive\n   *    {@link MergePolicy.MergeAbortedException}s.\n   */\n  public synchronized void deleteAll() throws IOException {\n    ensureOpen();\n    boolean success = false;\n    try {\n\n      // Abort any running merges\n      finishMerges(false);\n\n      // Remove any buffered docs\n      docWriter.abort();\n\n      // Remove all segments\n      segmentInfos.clear();\n\n      // Ask deleter to locate unreferenced files & remove them:\n      deleter.checkpoint(segmentInfos, false);\n      deleter.refresh();\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.dropAll(false);\n\n      // Mark that the index has changed\n      ++changeCount;\n      segmentInfos.changed();\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteAll\");\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception during deleteAll\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f","c5df35ab57c223ea11aec64b53bf611904f3dced"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8fe956d65251358d755c56f14fe8380644790e47","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["334c1175813aea771a71728cd2c4ee4754fd0603"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","ad27cbdf7398b36c6a478859f546c84d71cb251b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b4dec651d0a89767d1233eef7353f88a42bea0":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ad27cbdf7398b36c6a478859f546c84d71cb251b"],"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["334c1175813aea771a71728cd2c4ee4754fd0603"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ad27cbdf7398b36c6a478859f546c84d71cb251b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7b91922b55d15444d554721b352861d028eb8278":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["a1b4dec651d0a89767d1233eef7353f88a42bea0"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ad27cbdf7398b36c6a478859f546c84d71cb251b","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ad27cbdf7398b36c6a478859f546c84d71cb251b":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d118cdb655aab0c33b7e9cc4eea0cfae44a2701f"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab5cb6a74aefb78aa0569857970b9151dfe2e787","ad27cbdf7398b36c6a478859f546c84d71cb251b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a1b4dec651d0a89767d1233eef7353f88a42bea0":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d118cdb655aab0c33b7e9cc4eea0cfae44a2701f":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a1b4dec651d0a89767d1233eef7353f88a42bea0","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"334c1175813aea771a71728cd2c4ee4754fd0603":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"ad27cbdf7398b36c6a478859f546c84d71cb251b":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"8fe956d65251358d755c56f14fe8380644790e47":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}