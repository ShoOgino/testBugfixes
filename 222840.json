{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f8e877289fa7ac45397b98f3961b1db7b441b4","date":1498803623,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":null,"sourceOld":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  public static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null) ? null : StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr) ? \"\" : createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"39f8e877289fa7ac45397b98f3961b1db7b441b4":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39f8e877289fa7ac45397b98f3961b1db7b441b4"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","39f8e877289fa7ac45397b98f3961b1db7b441b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"39f8e877289fa7ac45397b98f3961b1db7b441b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}