{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#swapSearcher(IndexSearcher,long,boolean).mjava","commits":[{"id":"39d69912999d6e0acfb6eb6be558fcc165eee0b2","date":1308066875,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#swapSearcher(IndexSearcher,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Steals a reference from newSearcher:\n  private synchronized void swapSearcher(IndexSearcher newSearcher, long newSearchingGen, boolean applyDeletes) throws IOException {\n    //System.out.println(Thread.currentThread().getName() + \": swap searcher gen=\" + newSearchingGen + \" applyDeletes=\" + applyDeletes);\n    \n    // Always replace noDeletesCurrentSearcher:\n    if (noDeletesCurrentSearcher != null) {\n      noDeletesCurrentSearcher.getIndexReader().decRef();\n    }\n    noDeletesCurrentSearcher = newSearcher;\n    assert newSearchingGen > noDeletesSearchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" noDeletesSearchingGen=\" + noDeletesSearchingGen;\n    noDeletesSearchingGen.set(newSearchingGen);\n\n    if (applyDeletes) {\n      // Deletes were applied, so we also update currentSearcher:\n      if (currentSearcher != null) {\n        currentSearcher.getIndexReader().decRef();\n      }\n      currentSearcher = newSearcher;\n      if (newSearcher != null) {\n        newSearcher.getIndexReader().incRef();\n      }\n      assert newSearchingGen > searchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" searchingGen=\" + searchingGen;\n      searchingGen.set(newSearchingGen);\n    }\n\n    notifyAll();\n    //System.out.println(Thread.currentThread().getName() + \": done\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#swapSearcher(IndexSearcher,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Steals a reference from newSearcher:\n  private synchronized void swapSearcher(IndexSearcher newSearcher, long newSearchingGen, boolean applyDeletes) throws IOException {\n    //System.out.println(Thread.currentThread().getName() + \": swap searcher gen=\" + newSearchingGen + \" applyDeletes=\" + applyDeletes);\n    \n    // Always replace noDeletesCurrentSearcher:\n    if (noDeletesCurrentSearcher != null) {\n      noDeletesCurrentSearcher.getIndexReader().decRef();\n    }\n    noDeletesCurrentSearcher = newSearcher;\n    assert newSearchingGen > noDeletesSearchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" noDeletesSearchingGen=\" + noDeletesSearchingGen;\n    noDeletesSearchingGen.set(newSearchingGen);\n\n    if (applyDeletes) {\n      // Deletes were applied, so we also update currentSearcher:\n      if (currentSearcher != null) {\n        currentSearcher.getIndexReader().decRef();\n      }\n      currentSearcher = newSearcher;\n      if (newSearcher != null) {\n        newSearcher.getIndexReader().incRef();\n      }\n      assert newSearchingGen > searchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" searchingGen=\" + searchingGen;\n      searchingGen.set(newSearchingGen);\n    }\n\n    notifyAll();\n    //System.out.println(Thread.currentThread().getName() + \": done\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#swapSearcher(IndexSearcher,long,boolean).mjava","sourceNew":null,"sourceOld":"  // Steals a reference from newSearcher:\n  private synchronized void swapSearcher(IndexSearcher newSearcher, long newSearchingGen, boolean applyDeletes) throws IOException {\n    //System.out.println(Thread.currentThread().getName() + \": swap searcher gen=\" + newSearchingGen + \" applyDeletes=\" + applyDeletes);\n    \n    // Always replace noDeletesCurrentSearcher:\n    if (noDeletesCurrentSearcher != null) {\n      noDeletesCurrentSearcher.getIndexReader().decRef();\n    }\n    noDeletesCurrentSearcher = newSearcher;\n    assert newSearchingGen > noDeletesSearchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" noDeletesSearchingGen=\" + noDeletesSearchingGen;\n    noDeletesSearchingGen.set(newSearchingGen);\n\n    if (applyDeletes) {\n      // Deletes were applied, so we also update currentSearcher:\n      if (currentSearcher != null) {\n        currentSearcher.getIndexReader().decRef();\n      }\n      currentSearcher = newSearcher;\n      if (newSearcher != null) {\n        newSearcher.getIndexReader().incRef();\n      }\n      assert newSearchingGen > searchingGen.get(): \"newSearchingGen=\" + newSearchingGen + \" searchingGen=\" + searchingGen;\n      searchingGen.set(newSearchingGen);\n    }\n\n    notifyAll();\n    //System.out.println(Thread.currentThread().getName() + \": done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606baff722a317c76a92b111d183b54b6e6e5741":["39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["606baff722a317c76a92b111d183b54b6e6e5741"]},"commit2Childs":{"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["606baff722a317c76a92b111d183b54b6e6e5741","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"606baff722a317c76a92b111d183b54b6e6e5741":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}