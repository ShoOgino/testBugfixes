{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseBits#gallop(long).mjava","commits":[{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseBits#gallop(long).mjava","pathOld":"/dev/null","sourceNew":"    /** Gallop forward and stop as soon as an index is found that is greater than\n     *  the given docId. {@code index} will store an index that stores a value\n     *  that is &lt;= {@code docId} while the return value will give an index\n     *  that stores a value that is &gt; {@code docId}. These indices can then be\n     *  used to binary search. */\n    private long gallop(long docId) {\n      index++;\n      this.docId = nextDocId;\n      long hiIndex = index + 1;\n\n      while (true) {\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          nextDocId = maxDoc;\n          break;\n        }\n\n        final long hiDocId = docIds.get(hiIndex);\n        if (hiDocId > docId) {\n          nextDocId = hiDocId;\n          break;\n        }\n\n        final long delta = hiIndex - index;\n        index = hiIndex;\n        this.docId = hiDocId;\n        hiIndex += delta << 1; // double the step each time\n      }\n      return hiIndex;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseBits#gallop(long).mjava","sourceNew":null,"sourceOld":"    /** Gallop forward and stop as soon as an index is found that is greater than\n     *  the given docId. {@code index} will store an index that stores a value\n     *  that is &lt;= {@code docId} while the return value will give an index\n     *  that stores a value that is &gt; {@code docId}. These indices can then be\n     *  used to binary search. */\n    private long gallop(long docId) {\n      index++;\n      this.docId = nextDocId;\n      long hiIndex = index + 1;\n\n      while (true) {\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          nextDocId = maxDoc;\n          break;\n        }\n\n        final long hiDocId = docIds.get(hiIndex);\n        if (hiDocId > docId) {\n          nextDocId = hiDocId;\n          break;\n        }\n\n        final long delta = hiIndex - index;\n        index = hiIndex;\n        this.docId = hiDocId;\n        hiIndex += delta << 1; // double the step each time\n      }\n      return hiIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseBits#gallop(long).mjava","sourceNew":null,"sourceOld":"    /** Gallop forward and stop as soon as an index is found that is greater than\n     *  the given docId. {@code index} will store an index that stores a value\n     *  that is &lt;= {@code docId} while the return value will give an index\n     *  that stores a value that is &gt; {@code docId}. These indices can then be\n     *  used to binary search. */\n    private long gallop(long docId) {\n      index++;\n      this.docId = nextDocId;\n      long hiIndex = index + 1;\n\n      while (true) {\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          nextDocId = maxDoc;\n          break;\n        }\n\n        final long hiDocId = docIds.get(hiIndex);\n        if (hiDocId > docId) {\n          nextDocId = hiDocId;\n          break;\n        }\n\n        final long delta = hiIndex - index;\n        index = hiIndex;\n        this.docId = hiDocId;\n        hiIndex += delta << 1; // double the step each time\n      }\n      return hiIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseBits#gallop(long).mjava","sourceNew":null,"sourceOld":"    /** Gallop forward and stop as soon as an index is found that is greater than\n     *  the given docId. {@code index} will store an index that stores a value\n     *  that is &lt;= {@code docId} while the return value will give an index\n     *  that stores a value that is &gt; {@code docId}. These indices can then be\n     *  used to binary search. */\n    private long gallop(long docId) {\n      index++;\n      this.docId = nextDocId;\n      long hiIndex = index + 1;\n\n      while (true) {\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          nextDocId = maxDoc;\n          break;\n        }\n\n        final long hiDocId = docIds.get(hiIndex);\n        if (hiDocId > docId) {\n          nextDocId = hiDocId;\n          break;\n        }\n\n        final long delta = hiIndex - index;\n        index = hiIndex;\n        this.docId = hiDocId;\n        hiIndex += delta << 1; // double the step each time\n      }\n      return hiIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}