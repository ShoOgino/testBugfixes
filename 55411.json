{"path":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader#prepareSubReaders(List[CompositeReader],BitSet).mjava","commits":[{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader#prepareSubReaders(List[CompositeReader],BitSet).mjava","pathOld":"/dev/null","sourceNew":"  private static IndexReader[] prepareSubReaders(List<CompositeReader> parallelReaders, BitSet ignoreStoredFieldsSet) throws IOException {\n    if (parallelReaders.isEmpty()) {\n      return new IndexReader[0];\n    } else {\n      // hierarchically build the same subreader structure as the first CompositeReader with Parallel*Readers:\n      final IndexReader[]\n        firstSubReaders = parallelReaders.get(0).getSequentialSubReaders(),\n        subReaders = new IndexReader[firstSubReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (firstSubReaders[i] instanceof AtomicReader) {\n          // we simply enable closing of subReaders, to prevent incRefs on subReaders\n          // -> for synthetic subReaders, close() is never called by our doClose()\n          final ParallelAtomicReader.Builder builder = new ParallelAtomicReader.Builder(true); \n          for (int j = 0, c = parallelReaders.size(); j < c; j++) {\n            builder.add((AtomicReader) parallelReaders.get(j).getSequentialSubReaders()[i], ignoreStoredFieldsSet.get(j));\n          }\n          subReaders[i] = builder.build();\n        } else {\n          assert firstSubReaders[i] instanceof CompositeReader;\n          // we simply enable closing of subReaders, to prevent incRefs on subReaders\n          // -> for synthetic subReaders, close() is never called by our doClose()\n          final ParallelCompositeReader.Builder builder = new ParallelCompositeReader.Builder(true); \n          for (int j = 0, c = parallelReaders.size(); j < c; j++) {\n            builder.add((CompositeReader) parallelReaders.get(j).getSequentialSubReaders()[i], ignoreStoredFieldsSet.get(j));\n          }\n          subReaders[i] = builder.build();\n        }\n      }\n      return subReaders;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelCompositeReader#prepareSubReaders(List[CompositeReader],BitSet).mjava","sourceNew":null,"sourceOld":"  private static IndexReader[] prepareSubReaders(List<CompositeReader> parallelReaders, BitSet ignoreStoredFieldsSet) throws IOException {\n    if (parallelReaders.isEmpty()) {\n      return new IndexReader[0];\n    } else {\n      // hierarchically build the same subreader structure as the first CompositeReader with Parallel*Readers:\n      final IndexReader[]\n        firstSubReaders = parallelReaders.get(0).getSequentialSubReaders(),\n        subReaders = new IndexReader[firstSubReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (firstSubReaders[i] instanceof AtomicReader) {\n          // we simply enable closing of subReaders, to prevent incRefs on subReaders\n          // -> for synthetic subReaders, close() is never called by our doClose()\n          final ParallelAtomicReader.Builder builder = new ParallelAtomicReader.Builder(true); \n          for (int j = 0, c = parallelReaders.size(); j < c; j++) {\n            builder.add((AtomicReader) parallelReaders.get(j).getSequentialSubReaders()[i], ignoreStoredFieldsSet.get(j));\n          }\n          subReaders[i] = builder.build();\n        } else {\n          assert firstSubReaders[i] instanceof CompositeReader;\n          // we simply enable closing of subReaders, to prevent incRefs on subReaders\n          // -> for synthetic subReaders, close() is never called by our doClose()\n          final ParallelCompositeReader.Builder builder = new ParallelCompositeReader.Builder(true); \n          for (int j = 0, c = parallelReaders.size(); j < c; j++) {\n            builder.add((CompositeReader) parallelReaders.get(j).getSequentialSubReaders()[i], ignoreStoredFieldsSet.get(j));\n          }\n          subReaders[i] = builder.build();\n        }\n      }\n      return subReaders;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08b385e33541f6749e71618c9ab36fad908a7ed0"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}