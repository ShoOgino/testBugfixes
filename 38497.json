{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing \n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897d47a3d78c0956b96658436566279d040b95b9","date":1447761616,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkFieldCacheSource(QParser).mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used to get a FieldCacheSource, throwing\n   * an appropriate exception (including the field name) if it is not.  \n   * FieldType subclasses can choose to call this method in their \n   * getValueSource implementation \n   * @see FieldType#getValueSource\n   */\n  public void checkFieldCacheSource(QParser parser) throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not use FieldCache on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":["fa64435b5902ce266c23755a4a00691a3285dab8","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"897d47a3d78c0956b96658436566279d040b95b9":["73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897d47a3d78c0956b96658436566279d040b95b9"],"73bb5a57dc75b54a39494f99986599cae7dff417":["fa64435b5902ce266c23755a4a00691a3285dab8"]},"commit2Childs":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fa64435b5902ce266c23755a4a00691a3285dab8":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"c26f00b574427b55127e869b935845554afde1fa":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"897d47a3d78c0956b96658436566279d040b95b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","897d47a3d78c0956b96658436566279d040b95b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}