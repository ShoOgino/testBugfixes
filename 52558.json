{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","commits":[{"id":"3b89f9365dec76fdc0fc53acb3664f3502497a07","date":1379201945,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void truthCompile(Type expected, boolean truth) {\n    if (expected == Type.INT_TYPE) {\n        methodVisitor.push(truth);\n    } else if (expected == Type.LONG_TYPE) {\n        methodVisitor.push((long) (truth ? 1 : 0));\n    } else if (expected == Type.DOUBLE_TYPE) {\n        methodVisitor.push(truth ? 1. : 0.);\n    } else {\n      throw new IllegalStateException(\"Invalid expected type\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48d894ce9ddefda113b6e8f5b111640e753cd1c","date":1379202853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","sourceNew":"  private void truthCompile(Type expected, boolean truth) {\n    if (expected == Type.INT_TYPE) {\n        methodVisitor.push(truth);\n    } else if (expected == Type.LONG_TYPE) {\n        methodVisitor.push(truth ? 1L : 0L);\n    } else if (expected == Type.DOUBLE_TYPE) {\n        methodVisitor.push(truth ? 1. : 0.);\n    } else {\n      throw new IllegalStateException(\"Invalid expected type\");\n    }\n  }\n\n","sourceOld":"  private void truthCompile(Type expected, boolean truth) {\n    if (expected == Type.INT_TYPE) {\n        methodVisitor.push(truth);\n    } else if (expected == Type.LONG_TYPE) {\n        methodVisitor.push((long) (truth ? 1 : 0));\n    } else if (expected == Type.DOUBLE_TYPE) {\n        methodVisitor.push(truth ? 1. : 0.);\n    } else {\n      throw new IllegalStateException(\"Invalid expected type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06b29443688b24c8ad26729a4a05578e0c12a3bf","date":1379203716,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#pushBoolean(Type,boolean).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#truthCompile(Type,boolean).mjava","sourceNew":"  private void pushBoolean(Type expected, boolean truth) {\n    switch (expected.getSort()) {\n      case Type.INT:\n        methodVisitor.push(truth);\n        break;\n      case Type.LONG:\n        methodVisitor.push(truth ? 1L : 0L);\n        break;\n      case Type.DOUBLE:\n        methodVisitor.push(truth ? 1. : 0.);\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid expected type: \" + expected);\n    }\n  }\n\n","sourceOld":"  private void truthCompile(Type expected, boolean truth) {\n    if (expected == Type.INT_TYPE) {\n        methodVisitor.push(truth);\n    } else if (expected == Type.LONG_TYPE) {\n        methodVisitor.push(truth ? 1L : 0L);\n    } else if (expected == Type.DOUBLE_TYPE) {\n        methodVisitor.push(truth ? 1. : 0.);\n    } else {\n      throw new IllegalStateException(\"Invalid expected type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48d894ce9ddefda113b6e8f5b111640e753cd1c":["3b89f9365dec76fdc0fc53acb3664f3502497a07"],"06b29443688b24c8ad26729a4a05578e0c12a3bf":["e48d894ce9ddefda113b6e8f5b111640e753cd1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b89f9365dec76fdc0fc53acb3664f3502497a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e48d894ce9ddefda113b6e8f5b111640e753cd1c":["06b29443688b24c8ad26729a4a05578e0c12a3bf"],"06b29443688b24c8ad26729a4a05578e0c12a3bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b89f9365dec76fdc0fc53acb3664f3502497a07","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b89f9365dec76fdc0fc53acb3664f3502497a07":["e48d894ce9ddefda113b6e8f5b111640e753cd1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06b29443688b24c8ad26729a4a05578e0c12a3bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}