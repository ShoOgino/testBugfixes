{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","commits":[{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #openIfChanged(IndexReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb378f8bdee16a26810e086303a4a86b4930ea12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["8a8259c922a83abc544609227a60d48e5ee93e7e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","eb378f8bdee16a26810e086303a4a86b4930ea12","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893d07555f01912f57b453a320e4d46363a31b50":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["8a8259c922a83abc544609227a60d48e5ee93e7e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}