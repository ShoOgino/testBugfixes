{"path":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerQueue == null) {\n      initScorerQueue();\n    }\n    if (scorerQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      target = currentDoc + 1;\n    }\n    do {\n      Scorer top = (Scorer) scorerQueue.top();\n      if (top.doc() >= target) {\n        return advanceAfterCurrent();\n      } else if (top.skipTo(target)) {\n        scorerQueue.adjustTop();\n      } else {\n        scorerQueue.pop();\n        if (scorerQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed","7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c62564d5adf82d1fc178ea3e881841b5ae83a94","date":1144164358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","sourceNew":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerQueue == null) {\n      initScorerQueue();\n    }\n    if (scorerQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      Scorer top = (Scorer) scorerQueue.top();\n      if (top.doc() >= target) {\n        return advanceAfterCurrent();\n      } else if (top.skipTo(target)) {\n        scorerQueue.adjustTop();\n      } else {\n        scorerQueue.pop();\n        if (scorerQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerQueue == null) {\n      initScorerQueue();\n    }\n    if (scorerQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      target = currentDoc + 1;\n    }\n    do {\n      Scorer top = (Scorer) scorerQueue.top();\n      if (top.doc() >= target) {\n        return advanceAfterCurrent();\n      } else if (top.skipTo(target)) {\n        scorerQueue.adjustTop();\n      } else {\n        scorerQueue.pop();\n        if (scorerQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed","date":1161132968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","sourceNew":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerDocQueue == null) {\n      initScorerDocQueue();\n    }\n    if (queueSize < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent();\n      } else if (! scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (--queueSize < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerQueue == null) {\n      initScorerQueue();\n    }\n    if (scorerQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      Scorer top = (Scorer) scorerQueue.top();\n      if (top.doc() >= target) {\n        return advanceAfterCurrent();\n      } else if (top.skipTo(target)) {\n        scorerQueue.adjustTop();\n      } else {\n        scorerQueue.pop();\n        if (scorerQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7be534ca83a593a45a836cbffd544f2671d9ca60","date":1237394690,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","sourceNew":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent();\n      } else if (! scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerDocQueue == null) {\n      initScorerDocQueue();\n    }\n    if (queueSize < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent();\n      } else if (! scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (--queueSize < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","sourceNew":"  /**\n   * Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return true iff there is such a match.\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * <br>The implementation uses the skipTo() method on the subscorers.\n   * @param target The target document number.\n   * @return true iff there is such a match.\n   */\n  public boolean skipTo(int target) throws IOException {\n    if (scorerDocQueue.size() < minimumNrMatchers) {\n      return false;\n    }\n    if (target <= currentDoc) {\n      return true;\n    }\n    do {\n      if (scorerDocQueue.topDoc() >= target) {\n        return advanceAfterCurrent();\n      } else if (! scorerDocQueue.topSkipToAndAdjustElsePop(target)) {\n        if (scorerDocQueue.size() < minimumNrMatchers) {\n          return false;\n        }\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#skipTo(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Skips to the first match beyond the current whose document number is\n   * greater than or equal to a given target. <br>\n   * When this method is used the {@link #explain(int)} method should not be\n   * used. <br>\n   * The implementation uses the skipTo() method on the subscorers.\n   * \n   * @param target\n   *          The target document number.\n   * @return true iff there is such a match.\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"30a558487f2298c2c19ceca9103c1b6865d64708":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"]},"commit2Childs":{"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}