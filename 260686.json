{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongConversionAndOrdering().mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","sourceOld":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    BytesRefBuilder last = new BytesRefBuilder();\n    BytesRefBuilder act = new BytesRefBuilder();\n    for (long l=-100000L; l<100000L; l++) {\n      LegacyNumericUtils.longToPrefixCoded(l, 0, act);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last (BytesRef)\", last.get().compareTo(act.get()) < 0 );\n        assertTrue(\"actual bigger than last (as String)\", last.get().utf8ToString().compareTo(act.get().utf8ToString()) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, LegacyNumericUtils.prefixCodedToLong(act.get()));\n      // next step\n      last.copyBytes(act);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}