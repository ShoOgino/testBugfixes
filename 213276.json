{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    executorLauncher.shutdown();\n\n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"040bf6d317e5bde94816bd7fe6eb0ed324306e2a","date":1544756375,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","sourceNew":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","sourceOld":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    executorLauncher.shutdown();\n\n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","date":1544802186,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","sourceNew":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","sourceOld":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    executorLauncher.shutdown();\n\n    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","sourceNew":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n    log.info(\"waitForNode: {}\", jetty.getNodeName());\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","sourceOld":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForNode(JettySolrRunner,int).mjava","sourceNew":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n     if (log.isInfoEnabled()) {\n       log.info(\"waitForNode: {}\", jetty.getNodeName());\n     }\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","sourceOld":"  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)\n      throws IOException, InterruptedException, TimeoutException {\n    log.info(\"waitForNode: {}\", jetty.getNodeName());\n\n    ZkStateReader reader = getSolrClient().getZkStateReader();\n\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> n.contains(jetty.getNodeName()));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b06f42faae0ab79dde1a569756990bb96283580d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9":["b06f42faae0ab79dde1a569756990bb96283580d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9","040bf6d317e5bde94816bd7fe6eb0ed324306e2a"],"040bf6d317e5bde94816bd7fe6eb0ed324306e2a":["a3c1f2dfc9523bc98b4548d58a9f81ad16872cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b06f42faae0ab79dde1a569756990bb96283580d":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}