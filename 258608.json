{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n\n    NamedList<Object> details = new NamedList<Object>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.US);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,int,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, int numberToKeep, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      if(numberToKeep<Integer.MAX_VALUE) {\n        deleteOldBackups(numberToKeep);\n      }\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT, Locale.ROOT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n      \n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8785ebaa8c9f6606d8d022896363371d6831523a","date":1402757850,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d359645acebeba5edce0f1186d99aa81bbe546","date":1402921077,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir.getDirectory().toFile());\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        fileCopier.copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fef3c83faf41df65635bce953c6b00b539608c9","date":1415547075,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir.getDirectory().toFile());\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    String directoryName = null;\n\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir.getDirectory().toFile());\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.close();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc099c69eb723a6ff1fd0aa6def62a565d959c","date":1415568013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir.getDirectory().toFile());\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot...\");\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","date":1428245942,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName));\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"285cdc737de75b7cc7c284a156b20214deb67bca":["34d359645acebeba5edce0f1186d99aa81bbe546"],"8785ebaa8c9f6606d8d022896363371d6831523a":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"34d359645acebeba5edce0f1186d99aa81bbe546":["8785ebaa8c9f6606d8d022896363371d6831523a"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"72dc099c69eb723a6ff1fd0aa6def62a565d959c":["5fef3c83faf41df65635bce953c6b00b539608c9"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","34d359645acebeba5edce0f1186d99aa81bbe546"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["72dc099c69eb723a6ff1fd0aa6def62a565d959c","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["72dc099c69eb723a6ff1fd0aa6def62a565d959c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5fef3c83faf41df65635bce953c6b00b539608c9":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"c26f00b574427b55127e869b935845554afde1fa":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"285cdc737de75b7cc7c284a156b20214deb67bca":["5fef3c83faf41df65635bce953c6b00b539608c9"],"8785ebaa8c9f6606d8d022896363371d6831523a":["34d359645acebeba5edce0f1186d99aa81bbe546"],"53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"34d359645acebeba5edce0f1186d99aa81bbe546":["285cdc737de75b7cc7c284a156b20214deb67bca","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["8785ebaa8c9f6606d8d022896363371d6831523a","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"72dc099c69eb723a6ff1fd0aa6def62a565d959c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["55b50463286869f584cf849d1587a0fcd54d1dfa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5fef3c83faf41df65635bce953c6b00b539608c9":["72dc099c69eb723a6ff1fd0aa6def62a565d959c"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["53a2ad2f01f02358cf0cdc7b0cbe5b7e7323eb72","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","55b50463286869f584cf849d1587a0fcd54d1dfa","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}