{"path":"backwards/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"backwards/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}