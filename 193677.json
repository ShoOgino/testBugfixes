{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Create the More like query from a PriorityQueue\r\n     */\r\n    private Query createQuery(PriorityQueue q) {\r\n        BooleanQuery query = new BooleanQuery();\r\n        Object cur;\r\n        int qterms = 0;\r\n        float bestScore = 0;\r\n\r\n        while (((cur = q.pop()) != null)) {\r\n            Object[] ar = (Object[]) cur;\r\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\r\n\r\n            if (boost) {\r\n                if (qterms == 0) {\r\n                    bestScore = ((Float) ar[2]).floatValue();\r\n                }\r\n                float myScore = ((Float) ar[2]).floatValue();\r\n\r\n                tq.setBoost(myScore / bestScore);\r\n            }\r\n\r\n            try {\r\n                query.add(tq, BooleanClause.Occur.SHOULD);\r\n            }\r\n            catch (BooleanQuery.TooManyClauses ignore) {\r\n                break;\r\n            }\r\n\r\n            qterms++;\r\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return query;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\r\n     * Create the More like query from a PriorityQueue\r\n     */\r\n    private Query createQuery(PriorityQueue q) {\r\n        BooleanQuery query = new BooleanQuery();\r\n        Object cur;\r\n        int qterms = 0;\r\n        float bestScore = 0;\r\n\r\n        while (((cur = q.pop()) != null)) {\r\n            Object[] ar = (Object[]) cur;\r\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\r\n\r\n            if (boost) {\r\n                if (qterms == 0) {\r\n                    bestScore = ((Float) ar[2]).floatValue();\r\n                }\r\n                float myScore = ((Float) ar[2]).floatValue();\r\n\r\n                tq.setBoost(myScore / bestScore);\r\n            }\r\n\r\n            try {\r\n                query.add(tq, BooleanClause.Occur.SHOULD);\r\n            }\r\n            catch (BooleanQuery.TooManyClauses ignore) {\r\n                break;\r\n            }\r\n\r\n            qterms++;\r\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return query;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ec885674566fc1fa7869f52f030c3a4f8d80ab6","date":1247590576,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["5ec885674566fc1fa7869f52f030c3a4f8d80ab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ec885674566fc1fa7869f52f030c3a4f8d80ab6":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["5ec885674566fc1fa7869f52f030c3a4f8d80ab6"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"5ec885674566fc1fa7869f52f030c3a4f8d80ab6":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}