{"path":"lucene/src/java/org/apache/lucene/util/IOUtils#getDecodingReader(InputStream,Charset).mjava","commits":[{"id":"a24f16e684000b5854634d7139339a792cc97927","date":1320888085,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#getDecodingReader(InputStream,Charset).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wrapping the given {@link InputStream} in a reader using a {@link CharsetDecoder}.\n   * Unlike Java's defaults this reader will throw an exception if your it detects \n   * the read charset doesn't match the expected {@link Charset}. \n   * <p>\n   * Decoding readers are useful to load configuration files, stopword lists or synonym files\n   * to detect character set problems. However, its not recommended to use as a common purpose \n   * reader.\n   * \n   * @param stream the stream to wrap in a reader\n   * @param charSet the expected charset\n   * @return a wrapping reader\n   */\n  public static Reader getDecodingReader(InputStream stream, Charset charSet) {\n    final CharsetDecoder charSetDecoder = charSet.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    return new BufferedReader(new InputStreamReader(stream, charSetDecoder));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#getDecodingReader(InputStream,Charset).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#getDecodingReader(InputStream,Charset).mjava","sourceNew":"  /**\n   * Wrapping the given {@link InputStream} in a reader using a {@link CharsetDecoder}.\n   * Unlike Java's defaults this reader will throw an exception if your it detects \n   * the read charset doesn't match the expected {@link Charset}. \n   * <p>\n   * Decoding readers are useful to load configuration files, stopword lists or synonym files\n   * to detect character set problems. However, its not recommended to use as a common purpose \n   * reader.\n   * \n   * @param stream the stream to wrap in a reader\n   * @param charSet the expected charset\n   * @return a wrapping reader\n   */\n  public static Reader getDecodingReader(InputStream stream, Charset charSet) {\n    final CharsetDecoder charSetDecoder = charSet.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    return new BufferedReader(new InputStreamReader(stream, charSetDecoder));\n  }\n\n","sourceOld":"  /**\n   * Wrapping the given {@link InputStream} in a reader using a {@link CharsetDecoder}.\n   * Unlike Java's defaults this reader will throw an exception if your it detects \n   * the read charset doesn't match the expected {@link Charset}. \n   * <p>\n   * Decoding readers are useful to load configuration files, stopword lists or synonym files\n   * to detect character set problems. However, its not recommended to use as a common purpose \n   * reader.\n   * \n   * @param stream the stream to wrap in a reader\n   * @param charSet the expected charset\n   * @return a wrapping reader\n   */\n  public static Reader getDecodingReader(InputStream stream, Charset charSet) {\n    final CharsetDecoder charSetDecoder = charSet.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    return new BufferedReader(new InputStreamReader(stream, charSetDecoder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a24f16e684000b5854634d7139339a792cc97927":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a24f16e684000b5854634d7139339a792cc97927"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a24f16e684000b5854634d7139339a792cc97927":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a24f16e684000b5854634d7139339a792cc97927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}