{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    RealDistribution rd = (RealDistribution)first;\n    Number predictOver = (Number)second;\n    \n    return rd.cumulativeProbability(predictOver.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}