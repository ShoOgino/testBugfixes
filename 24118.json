{"path":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7e960b22866c3adab1ce41b4db8c659c841654bb","7e960b22866c3adab1ce41b4db8c659c841654bb","7e960b22866c3adab1ce41b4db8c659c841654bb","5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","a697d0472461db648ff3f697d6b99115204c6054","a697d0472461db648ff3f697d6b99115204c6054","a697d0472461db648ff3f697d6b99115204c6054","bb6348d79165730d693bd2e2181bd06534dd0917","bb6348d79165730d693bd2e2181bd06534dd0917","bb6348d79165730d693bd2e2181bd06534dd0917","fa687b84635cf8674b125b033b5f1a97f32175f0","fa687b84635cf8674b125b033b5f1a97f32175f0","fa687b84635cf8674b125b033b5f1a97f32175f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ConnectionManager#process(WatchedEvent).mjava","sourceNew":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","sourceOld":"  public synchronized void process(WatchedEvent event) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Watcher \" + this + \" name:\" + name + \" got event \" + event\n          + \" path:\" + event.getPath() + \" type:\" + event.getType());\n    }\n\n    state = event.getState();\n    if (state == KeeperState.SyncConnected) {\n      connected = true;\n      clientConnected.countDown();\n    } else if (state == KeeperState.Expired) {\n      \n      connected = false;\n      log.info(\"Attempting to reconnect to ZooKeeper...\");\n\n      try {\n        connectionStrategy.reconnect(zkServerAddress, zkClientTimeout, this, new ZkClientConnectionStrategy.ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper keeper) throws InterruptedException, TimeoutException, IOException {\n           waitForConnected(SolrZkClient.DEFAULT_CLIENT_CONNECT_TIMEOUT);\n           client.updateKeeper(keeper);\n           if(onReconnect != null) {\n             onReconnect.command();\n           }\n           ConnectionManager.this.connected = true;\n          }\n        });\n      } catch (Exception e) {\n        log.error(\"\", e);\n      }\n\n      log.info(\"Connected:\" + connected);\n    } else if (state == KeeperState.Disconnected) {\n      // ZooKeeper client will recover when it can\n      // TODO: this needs to be investigated more\n      connected = false;\n    } else {\n      connected = false;\n    }\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}