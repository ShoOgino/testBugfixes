{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","commits":[{"id":"47d9d581b0b317125672636196fa3c73bbcabc56","date":1400178129,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame).mjava","sourceNew":"  void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":"  void endBlock(BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(SegmentTermsEnum.Frame).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","sourceNew":"  void endBlock(SegmentTermsEnum.Frame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","sourceOld":"  void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n    final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n    final int subBlockCount = frame.entCount - termCount;\n    totalTermCount += termCount;\n    if (termCount != 0 && subBlockCount != 0) {\n      mixedBlockCount++;\n    } else if (termCount != 0) {\n      termsOnlyBlockCount++;\n    } else if (subBlockCount != 0) {\n      subBlocksOnlyBlockCount++;\n    } else {\n      throw new IllegalStateException();\n    }\n    endBlockCount++;\n    final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n    assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n    totalBlockOtherBytes += otherBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e50f0da93c6dcee20d8792637b1786e2c34975e9":["47d9d581b0b317125672636196fa3c73bbcabc56"],"47d9d581b0b317125672636196fa3c73bbcabc56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e50f0da93c6dcee20d8792637b1786e2c34975e9":[],"47d9d581b0b317125672636196fa3c73bbcabc56":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["47d9d581b0b317125672636196fa3c73bbcabc56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e50f0da93c6dcee20d8792637b1786e2c34975e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}