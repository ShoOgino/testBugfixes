{"path":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public NearSpans(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n    this.inOrder = query.isInOrder();\n\n    SpanQuery[] clauses = query.getClauses();     // initialize spans & list\n    queue = new SpanQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =                            // construct clause spans\n        new SpansCell(clauses[i].getSpans(reader));\n      ordered.add(cell);                          // add to ordered\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5","date":1076364222,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpans(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n    this.inOrder = query.isInOrder();\n\n    SpanQuery[] clauses = query.getClauses();     // initialize spans & list\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =                            // construct clause spans\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);                          // add to ordered\n    }\n  }\n\n","sourceOld":"  public NearSpans(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n    this.inOrder = query.isInOrder();\n\n    SpanQuery[] clauses = query.getClauses();     // initialize spans & list\n    queue = new SpanQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =                            // construct clause spans\n        new SpansCell(clauses[i].getSpans(reader));\n      ordered.add(cell);                          // add to ordered\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#NearSpans(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n    }\n  }\n\n","sourceOld":"  public NearSpans(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n    this.inOrder = query.isInOrder();\n\n    SpanQuery[] clauses = query.getClauses();     // initialize spans & list\n    queue = new CellQueue(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =                            // construct clause spans\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);                          // add to ordered\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}