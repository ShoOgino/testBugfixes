{"path":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns one greater than the largest possible document number.\n    This may be used to, e.g., determine how big to allocate an array which\n    will have an element for every document number in an index.\n   */\n  abstract public int maxDoc();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","sourceNew":"  /** Returns one greater than the largest possible document number.\n    This may be used to, e.g., determine how big to allocate an array which\n    will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","sourceOld":"  /** Returns one greater than the largest possible document number.\n    This may be used to, e.g., determine how big to allocate an array which\n    will have an element for every document number in an index.\n   */\n  abstract public int maxDoc();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","sourceNew":"  /** Returns one greater than the largest possible document number.\n   This may be used to, e.g., determine how big to allocate an array which\n   will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","sourceOld":"  /** Returns one greater than the largest possible document number.\n    This may be used to, e.g., determine how big to allocate an array which\n    will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","sourceNew":"  /** Returns one greater than the largest possible document number.\n   * This may be used to, e.g., determine how big to allocate an array which\n   * will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","sourceOld":"  /** Returns one greater than the largest possible document number.\n   This may be used to, e.g., determine how big to allocate an array which\n   will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#maxDoc().mjava","sourceNew":"  /** Returns one greater than the largest possible document number.\n   * This may be used to, e.g., determine how big to allocate an array which\n   * will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","sourceOld":"  /** Returns one greater than the largest possible document number.\n   * This may be used to, e.g., determine how big to allocate an array which\n   * will have an element for every document number in an index.\n   */\n  public abstract int maxDoc();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}