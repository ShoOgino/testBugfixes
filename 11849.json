{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","sourceOld":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","sourceOld":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Throwable e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","bugFix":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] not found\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n    \n  }\n\n","sourceOld":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    SolrCore core = coreContainer.getCore(cname);\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try {\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n      if (core != null)\n        core.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] not found\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n    \n  }\n\n","sourceOld":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] not found\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestApplyUpdatesAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleRequestApplyUpdatesAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.NAME, \"\");\n    log.info(\"Applying buffered updates on core: \" + cname);\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core == null)\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Core [\" + cname + \"] not found\");\n      UpdateLog updateLog = core.getUpdateHandler().getUpdateLog();\n      if (updateLog.getState() != UpdateLog.State.BUFFERING)  {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Core \" + cname + \" not in buffering state\");\n      }\n      Future<UpdateLog.RecoveryInfo> future = updateLog.applyBufferedUpdates();\n      if (future == null) {\n        log.info(\"No buffered updates available. core=\" + cname);\n        rsp.add(\"core\", cname);\n        rsp.add(\"status\", \"EMPTY_BUFFER\");\n        return;\n      }\n      UpdateLog.RecoveryInfo report = future.get();\n      if (report.failed) {\n        SolrException.log(log, \"Replay failed\");\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Replay failed\");\n      }\n      coreContainer.getZkController().publish(core.getCoreDescriptor(), Replica.State.ACTIVE);\n      rsp.add(\"core\", cname);\n      rsp.add(\"status\", \"BUFFER_APPLIED\");\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\"Recovery was interrupted\", e);\n    } catch (Exception e) {\n      if (e instanceof SolrException)\n        throw (SolrException)e;\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not apply buffered updates\", e);\n    } finally {\n      if (req != null) req.close();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"da888af1ab894358122a22229051215f58cf4d54":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"fa0876236f0bd8be403747120d248bdd42b75a96":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["da888af1ab894358122a22229051215f58cf4d54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["fa0876236f0bd8be403747120d248bdd42b75a96"],"da888af1ab894358122a22229051215f58cf4d54":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["da888af1ab894358122a22229051215f58cf4d54"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}