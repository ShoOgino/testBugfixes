{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    }\n\n    if (!input.incrementToken())\n      return false;\n    \n    wrapper.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n    wrapper.setStartOffset(offsetAtt.startOffset());\n    wrapper.setEndOffset(offsetAtt.endOffset());\n    wrapper.setFlags(flagsAtt.getFlags());\n    wrapper.setType(typeAtt.type());\n    wrapper.setPositionIncrement(posIncAtt.getPositionIncrement());\n    wrapper.setPayload(payloadAtt.getPayload());\n    \n    decompose(wrapper);\n\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    }\n\n    if (!input.incrementToken())\n      return false;\n    \n    wrapper.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n    wrapper.setStartOffset(offsetAtt.startOffset());\n    wrapper.setEndOffset(offsetAtt.endOffset());\n    wrapper.setFlags(flagsAtt.getFlags());\n    wrapper.setType(typeAtt.type());\n    wrapper.setPositionIncrement(posIncAtt.getPositionIncrement());\n    wrapper.setPayload(payloadAtt.getPayload());\n    \n    decompose(wrapper);\n\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    }\n\n    if (!input.incrementToken())\n      return false;\n    \n    wrapper.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n    wrapper.setStartOffset(offsetAtt.startOffset());\n    wrapper.setEndOffset(offsetAtt.endOffset());\n    wrapper.setFlags(flagsAtt.getFlags());\n    wrapper.setType(typeAtt.type());\n    wrapper.setPositionIncrement(posIncAtt.getPositionIncrement());\n    wrapper.setPayload(payloadAtt.getPayload());\n    \n    decompose(wrapper);\n\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    }\n\n    if (!input.incrementToken())\n      return false;\n    \n    wrapper.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());\n    wrapper.setStartOffset(offsetAtt.startOffset());\n    wrapper.setEndOffset(offsetAtt.endOffset());\n    wrapper.setFlags(flagsAtt.getFlags());\n    wrapper.setType(typeAtt.type());\n    wrapper.setPositionIncrement(posIncAtt.getPositionIncrement());\n    wrapper.setPayload(payloadAtt.getPayload());\n    \n    decompose(wrapper);\n\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e15bea9339982eec538668b67ae252b28e0003e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e15bea9339982eec538668b67ae252b28e0003e","date":1319539476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!tokens.isEmpty()) {\n      assert current != null;\n      CompoundToken token = tokens.removeFirst();\n      restoreState(current); // keep all other attributes untouched\n      termAtt.setEmpty().append(token.txt);\n      offsetAtt.setOffset(token.startOffset, token.endOffset);\n      posIncAtt.setPositionIncrement(0);\n      return true;\n    }\n\n    current = null; // not really needed, but for safety\n    if (input.incrementToken()) {\n      // Only words longer than minWordSize get processed\n      if (termAtt.length() >= this.minWordSize) {\n        decompose();\n        // only capture the state if we really need it for producing new tokens\n        if (!tokens.isEmpty()) {\n          current = captureState();\n        }\n      }\n      // return original token:\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    }\n\n    if (!input.incrementToken())\n      return false;\n    \n    wrapper.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n    wrapper.setStartOffset(offsetAtt.startOffset());\n    wrapper.setEndOffset(offsetAtt.endOffset());\n    wrapper.setFlags(flagsAtt.getFlags());\n    wrapper.setType(typeAtt.type());\n    wrapper.setPositionIncrement(posIncAtt.getPositionIncrement());\n    wrapper.setPayload(payloadAtt.getPayload());\n    \n    decompose(wrapper);\n\n    if (tokens.size() > 0) {\n      setToken(tokens.removeFirst());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["a7347509fad0711ac30cb15a746e9a3830a38ebd","9b5756469957918cac40a831acec9cf01c8c2bb3","7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!tokens.isEmpty()) {\n      assert current != null;\n      CompoundToken token = tokens.removeFirst();\n      restoreState(current); // keep all other attributes untouched\n      termAtt.setEmpty().append(token.txt);\n      offsetAtt.setOffset(token.startOffset, token.endOffset);\n      posIncAtt.setPositionIncrement(0);\n      return true;\n    }\n\n    current = null; // not really needed, but for safety\n    if (input.incrementToken()) {\n      // Only words longer than minWordSize get processed\n      if (termAtt.length() >= this.minWordSize) {\n        decompose();\n        // only capture the state if we really need it for producing new tokens\n        if (!tokens.isEmpty()) {\n          current = captureState();\n        }\n      }\n      // return original token:\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!tokens.isEmpty()) {\n      assert current != null;\n      CompoundToken token = tokens.removeFirst();\n      restoreState(current); // keep all other attributes untouched\n      termAtt.setEmpty().append(token.txt);\n      offsetAtt.setOffset(token.startOffset, token.endOffset);\n      posIncAtt.setPositionIncrement(0);\n      return true;\n    }\n\n    current = null; // not really needed, but for safety\n    if (input.incrementToken()) {\n      // Only words longer than minWordSize get processed\n      if (termAtt.length() >= this.minWordSize) {\n        decompose();\n        // only capture the state if we really need it for producing new tokens\n        if (!tokens.isEmpty()) {\n          current = captureState();\n        }\n      }\n      // return original token:\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e15bea9339982eec538668b67ae252b28e0003e"],"1e15bea9339982eec538668b67ae252b28e0003e":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e15bea9339982eec538668b67ae252b28e0003e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["1e15bea9339982eec538668b67ae252b28e0003e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}