{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkCompositePayloads(Collection[byte[]]).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkCompositePayloads(Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#acceptPosition(Spans,SpanCollector).mjava","sourceNew":"  /**\n   * Check to see if the collected payloads match the required set.\n   * @param candidate a collection of payloads from the current Spans\n   * @return whether or not the payloads match\n   */\n  protected AcceptStatus checkCompositePayloads(Collection<byte[]> candidate) {\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans, SpanCollector collector) throws IOException {\n\n    PayloadSpanCollector payloadCollector = (PayloadSpanCollector) collector;\n\n    payloadCollector.reset();\n    spans.collect(payloadCollector);\n\n    Collection<byte[]> candidate = payloadCollector.getPayloads();\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3","date":1434444713,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkCompositePayloads(Collection[byte[]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check to see if the collected payloads match the required set.\n   * @param candidate a collection of payloads from the current Spans\n   * @return whether or not the payloads match\n   */\n  protected AcceptStatus checkCompositePayloads(Collection<byte[]> candidate) {\n    if (candidate.size() == payloadToMatch.size()) {\n      //TODO: check the byte arrays are the same\n      //hmm, can't rely on order here\n      int matches = 0;\n      for (byte[] candBytes : candidate) {\n        //Unfortunately, we can't rely on order, so we need to compare all\n        for (byte[] payBytes : payloadToMatch) {\n          if (Arrays.equals(candBytes, payBytes) == true) {\n            matches++;\n            break;\n          }\n        }\n      }\n      if (matches == payloadToMatch.size()){\n        //we've verified all the bytes\n        return AcceptStatus.YES;\n      } else {\n        return AcceptStatus.NO;\n      }\n    } else {\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["29aea3139c4326c0501d75d51059855463220279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}