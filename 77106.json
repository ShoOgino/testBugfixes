{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","commits":[{"id":"cad4d876350c7790594c78dc3c3fb1718bf06dc7","date":1417321437,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,CachingTokenFilter).mjava","sourceNew":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   * @param query The current Query\n   * @param fieldName The name of the field\n   * @param request The current SolrQueryRequest\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, TokenStream tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = new Highlighter(\n        getFormatter(fieldName, params),\n        getEncoder(fieldName, params),\n        getSpanQueryScorer(query, fieldName, tokenStream, request));\n    \n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","sourceOld":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   * @param query The current Query\n   * @param fieldName The name of the field\n   * @param request The current SolrQueryRequest\n   * @param tokenStream document text CachingTokenStream\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, CachingTokenFilter tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = null;\n    \n    highlighter = new Highlighter(\n        getFormatter(fieldName, params),\n        getEncoder(fieldName, params),\n        getSpanQueryScorer(query, fieldName, tokenStream, request));\n    \n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943562acd5eb31fa2fb7384927091158a85ce9fe","date":1428934087,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","sourceNew":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   * @param query The current Query\n   * @param fieldName The name of the field\n   * @param request The current SolrQueryRequest\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, TokenStream tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = new Highlighter(\n        getFormatter(fieldName, params),\n        getEncoder(fieldName, params),\n        getSpanQueryScorer(query, fieldName, tokenStream, request));\n\n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","sourceOld":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   * @param query The current Query\n   * @param fieldName The name of the field\n   * @param request The current SolrQueryRequest\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, TokenStream tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = new Highlighter(\n        getFormatter(fieldName, params),\n        getEncoder(fieldName, params),\n        getSpanQueryScorer(query, fieldName, tokenStream, request));\n    \n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getPhraseHighlighter(Query,String,SolrQueryRequest,TokenStream).mjava","sourceNew":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   *\n   * @param query       The current Query\n   * @param fieldName   The name of the field\n   * @param request     The current SolrQueryRequest\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, TokenStream tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = new Highlighter(\n            getFormatter(fieldName, params),\n            getEncoder(fieldName, params),\n            getSpanQueryScorer(query, fieldName, tokenStream, request));\n\n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","sourceOld":"  /**\n   * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.\n   * @param query The current Query\n   * @param fieldName The name of the field\n   * @param request The current SolrQueryRequest\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  protected Highlighter getPhraseHighlighter(Query query, String fieldName, SolrQueryRequest request, TokenStream tokenStream) throws IOException {\n    SolrParams params = request.getParams();\n    Highlighter highlighter = new Highlighter(\n        getFormatter(fieldName, params),\n        getEncoder(fieldName, params),\n        getSpanQueryScorer(query, fieldName, tokenStream, request));\n\n    highlighter.setTextFragmenter(getFragmenter(fieldName, params));\n\n    return highlighter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"943562acd5eb31fa2fb7384927091158a85ce9fe":["cad4d876350c7790594c78dc3c3fb1718bf06dc7"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["943562acd5eb31fa2fb7384927091158a85ce9fe"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"943562acd5eb31fa2fb7384927091158a85ce9fe":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["943562acd5eb31fa2fb7384927091158a85ce9fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cad4d876350c7790594c78dc3c3fb1718bf06dc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}