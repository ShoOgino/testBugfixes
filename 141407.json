{"path":"backwards/src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the documents in the rage [start .. start+howMany) that were\n   * collected by this collector. Note that if start >= pq.size(), an empty\n   * TopDocs is returned, and if pq.size() - start &lt; howMany, then only the\n   * available documents in [start .. pq.size()) are returned.<br>\n   * This method is useful to call in case pagination of search results is\n   * allowed by the search application, as well as it attempts to optimize the\n   * memory used by allocating only as much as requested by howMany.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different range, you should call {@link #topDocs()} and work with the\n   * returned {@link TopDocs} object, which will contain all the results this\n   * search execution collected.\n   */\n  public final TopDocs topDocs(int start, int howMany) {\n    \n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    int size = totalHits < pq.size() ? totalHits : pq.size();\n\n    // Don't bother to throw an exception, just return an empty TopDocs in case\n    // the parameters are invalid or out of range.\n    if (start < 0 || start >= size || howMany <= 0) {\n      return newTopDocs(null, start);\n    }\n\n    // We know that start < pqsize, so just fix howMany. \n    howMany = Math.min(size - start, howMany);\n    ScoreDoc[] results = new ScoreDoc[howMany];\n\n    // pq's pop() returns the 'least' element in the queue, therefore need\n    // to discard the first ones, until we reach the requested range.\n    // Note that this loop will usually not be executed, since the common usage\n    // should be that the caller asks for the last howMany results. However it's\n    // needed here for completeness.\n    for (int i = pq.size() - start - howMany; i > 0; i--) { pq.pop(); }\n    \n    // Get the requested results from pq.\n    populateResults(results, howMany);\n    \n    return newTopDocs(results, start);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/TopDocsCollector#topDocs(int,int).mjava","sourceNew":"  /**\n   * Returns the documents in the rage [start .. start+howMany) that were\n   * collected by this collector. Note that if start >= pq.size(), an empty\n   * TopDocs is returned, and if pq.size() - start &lt; howMany, then only the\n   * available documents in [start .. pq.size()) are returned.<br>\n   * This method is useful to call in case pagination of search results is\n   * allowed by the search application, as well as it attempts to optimize the\n   * memory used by allocating only as much as requested by howMany.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different range, you should call {@link #topDocs()} and work with the\n   * returned {@link TopDocs} object, which will contain all the results this\n   * search execution collected.\n   */\n  public final TopDocs topDocs(int start, int howMany) {\n    \n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    int size = totalHits < pq.size() ? totalHits : pq.size();\n\n    // Don't bother to throw an exception, just return an empty TopDocs in case\n    // the parameters are invalid or out of range.\n    if (start < 0 || start >= size || howMany <= 0) {\n      return newTopDocs(null, start);\n    }\n\n    // We know that start < pqsize, so just fix howMany. \n    howMany = Math.min(size - start, howMany);\n    ScoreDoc[] results = new ScoreDoc[howMany];\n\n    // pq's pop() returns the 'least' element in the queue, therefore need\n    // to discard the first ones, until we reach the requested range.\n    // Note that this loop will usually not be executed, since the common usage\n    // should be that the caller asks for the last howMany results. However it's\n    // needed here for completeness.\n    for (int i = pq.size() - start - howMany; i > 0; i--) { pq.pop(); }\n    \n    // Get the requested results from pq.\n    populateResults(results, howMany);\n    \n    return newTopDocs(results, start);\n  }\n\n","sourceOld":"  /**\n   * Returns the documents in the rage [start .. start+howMany) that were\n   * collected by this collector. Note that if start >= pq.size(), an empty\n   * TopDocs is returned, and if pq.size() - start &lt; howMany, then only the\n   * available documents in [start .. pq.size()) are returned.<br>\n   * This method is useful to call in case pagination of search results is\n   * allowed by the search application, as well as it attempts to optimize the\n   * memory used by allocating only as much as requested by howMany.<br>\n   * <b>NOTE:</b> you cannot call this method more than once for each search\n   * execution. If you need to call it more than once, passing each time a\n   * different range, you should call {@link #topDocs()} and work with the\n   * returned {@link TopDocs} object, which will contain all the results this\n   * search execution collected.\n   */\n  public final TopDocs topDocs(int start, int howMany) {\n    \n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    int size = totalHits < pq.size() ? totalHits : pq.size();\n\n    // Don't bother to throw an exception, just return an empty TopDocs in case\n    // the parameters are invalid or out of range.\n    if (start < 0 || start >= size || howMany <= 0) {\n      return newTopDocs(null, start);\n    }\n\n    // We know that start < pqsize, so just fix howMany. \n    howMany = Math.min(size - start, howMany);\n    ScoreDoc[] results = new ScoreDoc[howMany];\n\n    // pq's pop() returns the 'least' element in the queue, therefore need\n    // to discard the first ones, until we reach the requested range.\n    // Note that this loop will usually not be executed, since the common usage\n    // should be that the caller asks for the last howMany results. However it's\n    // needed here for completeness.\n    for (int i = pq.size() - start - howMany; i > 0; i--) { pq.pop(); }\n    \n    // Get the requested results from pq.\n    populateResults(results, howMany);\n    \n    return newTopDocs(results, start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}