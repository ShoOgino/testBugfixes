{"path":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}