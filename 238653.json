{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["37fd782242ee26ee7b4ad18dddec17004c1da7ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":["37fd782242ee26ee7b4ad18dddec17004c1da7ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37fd782242ee26ee7b4ad18dddec17004c1da7ff","date":1516061714,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numReadOnlyReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numReadOnlyReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numReadOnlyReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numReadOnlyReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numReadOnlyReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    \n    Slice s = docCollection.getSlices().iterator().next();\n    try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n      assertEquals(1, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n      //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n      try (HttpSolrClient readOnlyReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n        while (true) {\n          try {\n            assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                1, readOnlyReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n            break;\n          } catch (AssertionError e) {\n            if (t.hasTimedOut()) {\n              throw e;\n            } else {\n              Thread.sleep(100);\n            }\n          }\n        }\n        SolrQuery req = new SolrQuery(\n            \"qt\", \"/admin/plugins\",\n            \"stats\", \"true\");\n        QueryResponse statsResponse = readOnlyReplicaClient.query(req);\n        assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n            0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n\n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n\n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse,\n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n      \n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n      \n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse, \n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n\n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n\n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse,\n              0L, ((Map<String, Object>)(statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n\n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n\n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse,\n              0L, ((Map<String, Object>)((NamedList<Object>)statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testAddDocs().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n\n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n\n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse,\n              0L, ((Map<String, Object>)(statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testAddDocs() throws Exception {\n    int numPullReplicas = 1 + random().nextInt(3);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected collection to be created with 1 shard and \" + (numPullReplicas + 1) + \" replicas\", collectionName, clusterShape(1, numPullReplicas + 1));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, numPullReplicas, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    boolean reloaded = false;\n    int numDocs = 0;\n    while (true) {\n      numDocs++;\n      cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", String.valueOf(numDocs), \"foo\", \"bar\"));\n      cluster.getSolrClient().commit(collectionName);\n\n      Slice s = docCollection.getSlices().iterator().next();\n      try (HttpSolrClient leaderClient = getHttpSolrClient(s.getLeader().getCoreUrl())) {\n        assertEquals(numDocs, leaderClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      }\n\n      TimeOut t = new TimeOut(REPLICATION_TIMEOUT_SECS, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      for (Replica r:s.getReplicas(EnumSet.of(Replica.Type.PULL))) {\n        //TODO: assert replication < REPLICATION_TIMEOUT_SECS\n        try (HttpSolrClient pullReplicaClient = getHttpSolrClient(r.getCoreUrl())) {\n          while (true) {\n            try {\n              assertEquals(\"Replica \" + r.getName() + \" not up to date after 10 seconds\",\n                  numDocs, pullReplicaClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n              break;\n            } catch (AssertionError e) {\n              if (t.hasTimedOut()) {\n                throw e;\n              } else {\n                Thread.sleep(100);\n              }\n            }\n          }\n          SolrQuery req = new SolrQuery(\n              \"qt\", \"/admin/plugins\",\n              \"stats\", \"true\");\n          QueryResponse statsResponse = pullReplicaClient.query(req);\n          assertEquals(\"Replicas shouldn't process the add document request: \" + statsResponse,\n              0L, ((Map<String, Object>)(statsResponse.getResponse()).findRecursive(\"plugins\", \"UPDATE\", \"updateHandler\", \"stats\")).get(\"UPDATE.updateHandler.adds\"));\n        }\n      }\n      if (reloaded) {\n        break;\n      } else {\n        // reload\n        CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)\n        .process(cluster.getSolrClient());\n        assertEquals(0, response.getStatus());\n        reloaded = true;\n      }\n    }\n    assertUlogPresence(docCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37fd782242ee26ee7b4ad18dddec17004c1da7ff":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","37fd782242ee26ee7b4ad18dddec17004c1da7ff"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"37fd782242ee26ee7b4ad18dddec17004c1da7ff":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["37fd782242ee26ee7b4ad18dddec17004c1da7ff","b94236357aaa22b76c10629851fe4e376e0cea82"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}