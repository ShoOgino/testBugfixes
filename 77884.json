{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    for (int i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","sourceNew":null,"sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    for (int i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}