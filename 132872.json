{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"bugIntro":["119ae5b0966bbb5d6948c7f86207613595764d2e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"119ae5b0966bbb5d6948c7f86207613595764d2e","date":1357249026,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw new RuntimeException(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"bugIntro":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw new RuntimeException(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        if (doSave && rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del and field updates files.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw new RuntimeException(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del file.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw new RuntimeException(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      IOUtils.reThrow(priorE);\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint w/ deleter, because we just\n            // created created new _X_N.del and field updates files.\n            deleter.checkpoint(segmentInfos, false);\n          }\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (priorE != null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw new RuntimeException(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      IOUtils.reThrow(priorE);\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentInfoPerCommit,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      IOUtils.reThrow(priorE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      IOUtils.reThrow(priorE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            IOUtils.reThrow(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      IOUtils.reThrow(priorE);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert infoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","date":1512420564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":["119ae5b0966bbb5d6948c7f86207613595764d2e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","date":1521393811,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          if (doSave) {\n            throw IOUtils.rethrowAlways(t);\n          } else if (priorE == null) {\n            priorE = t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":null,"sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      Throwable priorE = null;\n      final Iterator<Map.Entry<SegmentCommitInfo,ReadersAndUpdates>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndUpdates rld = it.next().getValue();\n        try {\n          if (doSave && rld.writeLiveDocs(directory)) {\n            // Make sure we only write del docs and field updates for a live segment:\n            assert assertInfoIsLive(rld.info);\n            // Must checkpoint because we just\n            // created new _X_N.del and field updates files;\n            // don't call IW.checkpoint because that also\n            // increments SIS.version, which we do not want to\n            // do here: it was done previously (after we\n            // invoked BDS.applyDeletes), whereas here all we\n            // did was move the state to disk:\n            checkpointNoSIS();\n          }\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        try {\n          rld.dropReaders();\n        } catch (Throwable t) {\n          priorE = IOUtils.useOrSuppress(priorE, t);\n          if (doSave) {\n            throw t;\n          }\n        }\n      }\n      assert readerMap.size() == 0;\n      if (priorE != null) {\n        throw IOUtils.rethrowAlways(priorE);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["119ae5b0966bbb5d6948c7f86207613595764d2e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","119ae5b0966bbb5d6948c7f86207613595764d2e"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"119ae5b0966bbb5d6948c7f86207613595764d2e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1926100d9b67becc9701c54266fee3ba7878a5f0"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","119ae5b0966bbb5d6948c7f86207613595764d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"119ae5b0966bbb5d6948c7f86207613595764d2e":["e072d0b1fc19e0533d8ce432eed245196bca6fde","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef":["203e3fcf513c02ee2c07015f2ce277e26dc60907","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}