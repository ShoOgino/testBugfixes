{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","commits":[{"id":"060a4475f4072d4ea46bb4ec479dbaf1f207901a","date":1528389530,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n    RequestWriter.ContentWriter contentWriter = request.getContentWriter(CommonParams.JAVABIN_MIME);\n    final String cType = contentWriter == null ? CommonParams.JAVABIN_MIME : contentWriter.getContentType();\n\n    return Collections.singleton(new ContentStreamBase() {\n\n      @Override\n      public InputStream getStream() throws IOException {\n        BAOS baos = new BAOS();\n        if (contentWriter != null) {\n          contentWriter.write(baos);\n        } else {\n          new BinaryRequestWriter().write(request, baos);\n        }\n        return new ByteArrayInputStream(baos.toByteArray());\n      }\n\n      @Override\n      public String getContentType() {\n        return cType;\n\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n    RequestWriter.ContentWriter contentWriter = request.getContentWriter(CommonParams.JAVABIN_MIME);\n    final String cType = contentWriter == null ? CommonParams.JAVABIN_MIME : contentWriter.getContentType();\n\n    return Collections.singleton(new ContentStreamBase() {\n\n      @Override\n      public InputStream getStream() throws IOException {\n        BAOS baos = new BAOS();\n        if (contentWriter != null) {\n          contentWriter.write(baos);\n        } else {\n          new BinaryRequestWriter().write(request, baos);\n        }\n        return new ByteArrayInputStream(baos.toByteArray());\n      }\n\n      @Override\n      public String getContentType() {\n        return cType;\n\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n    RequestWriter.ContentWriter contentWriter = request.getContentWriter(CommonParams.JAVABIN_MIME);\n    final String cType = contentWriter == null ? CommonParams.JAVABIN_MIME : contentWriter.getContentType();\n\n    return Collections.singleton(new ContentStreamBase() {\n\n      @Override\n      public InputStream getStream() throws IOException {\n        BAOS baos = new BAOS();\n        if (contentWriter != null) {\n          contentWriter.write(baos);\n        } else {\n          new BinaryRequestWriter().write(request, baos);\n        }\n        return new ByteArrayInputStream(baos.toByteArray());\n      }\n\n      @Override\n      public String getContentType() {\n        return cType;\n\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216b828f4f2341ae2e70eb7585059e3576e4cb99","date":1570451249,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","sourceNew":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      final ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      final Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n\n    final RequestWriter.ContentWriter contentWriter = request.getContentWriter(null);\n\n    String cType;\n    final BAOS baos = new BAOS();\n    if (contentWriter != null) {\n      contentWriter.write(baos);\n      cType = contentWriter.getContentType();\n    } else {\n      final RequestWriter rw = supplier.newRequestWriter();\n      cType = rw.getUpdateContentType();\n      rw.write(request, baos);\n    }\n\n    final byte[] buf = baos.toByteArray();\n    if (buf.length > 0) {\n      return Collections.singleton(new ContentStreamBase() {\n\n        @Override\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(buf);\n        }\n\n        @Override\n        public String getContentType() {\n          return cType;\n        }\n      });\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n    RequestWriter.ContentWriter contentWriter = request.getContentWriter(CommonParams.JAVABIN_MIME);\n    final String cType = contentWriter == null ? CommonParams.JAVABIN_MIME : contentWriter.getContentType();\n\n    return Collections.singleton(new ContentStreamBase() {\n\n      @Override\n      public InputStream getStream() throws IOException {\n        BAOS baos = new BAOS();\n        if (contentWriter != null) {\n          contentWriter.write(baos);\n        } else {\n          new BinaryRequestWriter().write(request, baos);\n        }\n        return new ByteArrayInputStream(baos.toByteArray());\n      }\n\n      @Override\n      public String getContentType() {\n        return cType;\n\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","sourceNew":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      final ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      final Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n\n    final RequestWriter.ContentWriter contentWriter = request.getContentWriter(null);\n\n    String cType;\n    final BAOS baos = new BAOS();\n    if (contentWriter != null) {\n      contentWriter.write(baos);\n      cType = contentWriter.getContentType();\n    } else {\n      final RequestWriter rw = supplier.newRequestWriter();\n      cType = rw.getUpdateContentType();\n      rw.write(request, baos);\n    }\n\n    final byte[] buf = baos.toByteArray();\n    if (buf.length > 0) {\n      return Collections.singleton(new ContentStreamBase() {\n\n        @Override\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(buf);\n        }\n\n        @Override\n        public String getContentType() {\n          return cType;\n        }\n      });\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n    RequestWriter.ContentWriter contentWriter = request.getContentWriter(CommonParams.JAVABIN_MIME);\n    final String cType = contentWriter == null ? CommonParams.JAVABIN_MIME : contentWriter.getContentType();\n\n    return Collections.singleton(new ContentStreamBase() {\n\n      @Override\n      public InputStream getStream() throws IOException {\n        BAOS baos = new BAOS();\n        if (contentWriter != null) {\n          contentWriter.write(baos);\n        } else {\n          new BinaryRequestWriter().write(request, baos);\n        }\n        return new ByteArrayInputStream(baos.toByteArray());\n      }\n\n      @Override\n      public String getContentType() {\n        return cType;\n\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getContentStreams(SolrRequest).mjava","sourceNew":"  private Set<ContentStream> getContentStreams(@SuppressWarnings({\"rawtypes\"})SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      final ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      final Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n\n    final RequestWriter.ContentWriter contentWriter = request.getContentWriter(null);\n\n    String cType;\n    final BAOS baos = new BAOS();\n    if (contentWriter != null) {\n      contentWriter.write(baos);\n      cType = contentWriter.getContentType();\n    } else {\n      final RequestWriter rw = supplier.newRequestWriter();\n      cType = rw.getUpdateContentType();\n      rw.write(request, baos);\n    }\n\n    final byte[] buf = baos.toByteArray();\n    if (buf.length > 0) {\n      return Collections.singleton(new ContentStreamBase() {\n\n        @Override\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(buf);\n        }\n\n        @Override\n        public String getContentType() {\n          return cType;\n        }\n      });\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private Set<ContentStream> getContentStreams(SolrRequest request) throws IOException {\n    if (request.getMethod() == SolrRequest.METHOD.GET) return null;\n    if (request instanceof ContentStreamUpdateRequest) {\n      final ContentStreamUpdateRequest csur = (ContentStreamUpdateRequest) request;\n      final Collection<ContentStream> cs = csur.getContentStreams();\n      if (cs != null) return new HashSet<>(cs);\n    }\n\n    final RequestWriter.ContentWriter contentWriter = request.getContentWriter(null);\n\n    String cType;\n    final BAOS baos = new BAOS();\n    if (contentWriter != null) {\n      contentWriter.write(baos);\n      cType = contentWriter.getContentType();\n    } else {\n      final RequestWriter rw = supplier.newRequestWriter();\n      cType = rw.getUpdateContentType();\n      rw.write(request, baos);\n    }\n\n    final byte[] buf = baos.toByteArray();\n    if (buf.length > 0) {\n      return Collections.singleton(new ContentStreamBase() {\n\n        @Override\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(buf);\n        }\n\n        @Override\n        public String getContentType() {\n          return cType;\n        }\n      });\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["216b828f4f2341ae2e70eb7585059e3576e4cb99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"b0b597c65628ca9e73913a07e81691f8229bae35":["060a4475f4072d4ea46bb4ec479dbaf1f207901a","216b828f4f2341ae2e70eb7585059e3576e4cb99"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","060a4475f4072d4ea46bb4ec479dbaf1f207901a"]},"commit2Childs":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["bd25fa3647fa73152703b8dccb4fb5f43633de20","b0b597c65628ca9e73913a07e81691f8229bae35"],"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["216b828f4f2341ae2e70eb7585059e3576e4cb99","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b0b597c65628ca9e73913a07e81691f8229bae35","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["060a4475f4072d4ea46bb4ec479dbaf1f207901a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}