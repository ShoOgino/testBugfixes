{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#doCreate(CoreDescriptor).mjava","commits":[{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#doCreate(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCore doCreate(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cee0d276a5aee45373d831d0328b4544eec95754","date":1343349574,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#doCreate(CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  private SolrCore doCreate(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    log.info(\"Creating SolrCore '{}' using instanceDir: {}\", \n             dcore.getName(), instanceDir);\n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.ROOT).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    if (zkController == null && core.getUpdateHandler().getUpdateLog() != null) {\n      // always kick off recovery if we are in standalone mode.\n      core.getUpdateHandler().getUpdateLog().recoverFromLog();\n    }\n\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"044244fb346dc6965d217fce709880d0e3bc2e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cee0d276a5aee45373d831d0328b4544eec95754":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cee0d276a5aee45373d831d0328b4544eec95754"]},"commit2Childs":{"044244fb346dc6965d217fce709880d0e3bc2e9f":["cee0d276a5aee45373d831d0328b4544eec95754"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"cee0d276a5aee45373d831d0328b4544eec95754":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}