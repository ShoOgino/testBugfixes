{"path":"src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList,String,Properties,Class).mjava","commits":[{"id":"4f1a1d7f1604a41328b566b1be0c5ad6038117e8","date":1252499131,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList,String,Properties,Class).mjava","pathOld":"/dev/null","sourceNew":"  private void addVal(NamedList nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList,String,Properties,Class).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList,String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}