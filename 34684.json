{"path":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery#setSlop(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery#setSlop(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/PhraseQuery#setSlop(int).mjava","sourceNew":"  /** Sets the number of other words permitted between words in query phrase.\n    If zero, then this is an exact phrase search.  For larger values this works\n    like a <code>WITHIN</code> or <code>NEAR</code> operator.\n\n    <p>The slop is in fact an edit-distance, where the units correspond to\n    moves of terms in the query phrase out of position.  For example, to switch\n    the order of two words requires two moves (the first move places the words\n    atop one another), so to permit re-orderings of phrases, the slop must be\n    at least two.\n\n    <p>More exact matches are scored higher than sloppier matches, thus search\n    results are sorted by exactness.\n\n    <p>The slop is zero by default, requiring exact matches.*/\n  public void setSlop(int s) { slop = s; }\n\n","sourceOld":"  /** Sets the number of other words permitted between words in query phrase.\n    If zero, then this is an exact phrase search.  For larger values this works\n    like a <code>WITHIN</code> or <code>NEAR</code> operator.\n\n    <p>The slop is in fact an edit-distance, where the units correspond to\n    moves of terms in the query phrase out of position.  For example, to switch\n    the order of two words requires two moves (the first move places the words\n    atop one another), so to permit re-orderings of phrases, the slop must be\n    at least two.\n\n    <p>More exact matches are scored higher than sloppier matches, thus search\n    results are sorted by exactness.\n\n    <p>The slop is zero by default, requiring exact matches.*/\n  public void setSlop(int s) { slop = s; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery#setSlop(int).mjava","sourceNew":null,"sourceOld":"  /** Sets the number of other words permitted between words in query phrase.\n    If zero, then this is an exact phrase search.  For larger values this works\n    like a <code>WITHIN</code> or <code>NEAR</code> operator.\n\n    <p>The slop is in fact an edit-distance, where the units correspond to\n    moves of terms in the query phrase out of position.  For example, to switch\n    the order of two words requires two moves (the first move places the words\n    atop one another), so to permit re-orderings of phrases, the slop must be\n    at least two.\n\n    <p>More exact matches are scored higher than sloppier matches, thus search\n    results are sorted by exactness.\n\n    <p>The slop is zero by default, requiring exact matches.*/\n  public void setSlop(int s) { slop = s; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}