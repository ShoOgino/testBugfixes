{"path":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","commits":[{"id":"79b3c136afb2422d938f87bce41900b92d0b27c1","date":1488420247,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"/dev/null","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"722b26faad817b96f481562bf5754c39525bab1c","date":1506436320,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n  }\n\n","bugFix":null,"bugIntro":["a2736176c89a0cd1b5cf70785dcbaa365a67282b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64c2a46b477cb149a2ef770913d276e9da2f756a","date":1506501094,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70 minimum\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\", \"hl.fragsizeIsMinimum\", \"true\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 90\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"90\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 100\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"100\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","bugFix":null,"bugIntro":["a2736176c89a0cd1b5cf70785dcbaa365a67282b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70 minimum\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\", \"hl.fragsizeIsMinimum\", \"true\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 90\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"90\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 100\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"100\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\", \n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2736176c89a0cd1b5cf70785dcbaa365a67282b","date":1594042297,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter#testBreakIteratorCustom().mjava","sourceNew":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70 minimum\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\", \"hl.fragsizeIsMinimum\", \"true\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 70 avg\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\", \"hl.fragsizeIsMinimum\", \"false\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 90 avg\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"90\", \"hl.fragsizeIsMinimum\", \"false\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 100 avg\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"100\", \"hl.fragsizeIsMinimum\", \"false\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","sourceOld":"  public void testBreakIteratorCustom() {\n    assertU(adoc(\"text\", \"This document contains # special characters, while the other document contains the same # special character.\", \"id\", \"103\"));\n    assertU(adoc(\"text\", \"While the other document contains the same # special character.\", \"id\", \"104\"));\n    assertU(commit());\n    assertQ(\"CUSTOM breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"different breakiterator\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"-1\"),\n        \"//lst[@name='highlighting']/lst[@name='104']/arr[@name='text']/str='While the other <em>document</em> contains the same #'\");\n\n    assertQ(\"CUSTOM breakiterator with fragsize 70 minimum\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\", \"hl.fragsizeIsMinimum\", \"true\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 70\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"70\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 90\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"90\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains #'\");\n    assertQ(\"CUSTOM breakiterator with fragsize 100\",\n        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"SEPARATOR\",\"hl.bs.separator\",\"#\",\"hl.fragsize\", \"100\"),\n        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='This <em>document</em> contains # special characters, while the other <em>document</em> contains the same #'\");\n  }\n\n","bugFix":["722b26faad817b96f481562bf5754c39525bab1c","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"722b26faad817b96f481562bf5754c39525bab1c":["79b3c136afb2422d938f87bce41900b92d0b27c1"],"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["64c2a46b477cb149a2ef770913d276e9da2f756a"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["64c2a46b477cb149a2ef770913d276e9da2f756a","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["79b3c136afb2422d938f87bce41900b92d0b27c1","64c2a46b477cb149a2ef770913d276e9da2f756a"],"79b3c136afb2422d938f87bce41900b92d0b27c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64c2a46b477cb149a2ef770913d276e9da2f756a":["79b3c136afb2422d938f87bce41900b92d0b27c1","722b26faad817b96f481562bf5754c39525bab1c"],"a2736176c89a0cd1b5cf70785dcbaa365a67282b":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2736176c89a0cd1b5cf70785dcbaa365a67282b"]},"commit2Childs":{"722b26faad817b96f481562bf5754c39525bab1c":["64c2a46b477cb149a2ef770913d276e9da2f756a"],"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","a2736176c89a0cd1b5cf70785dcbaa365a67282b"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"79b3c136afb2422d938f87bce41900b92d0b27c1":["722b26faad817b96f481562bf5754c39525bab1c","6240b74b884c5587f2a4062dd27d6c32bf228889","64c2a46b477cb149a2ef770913d276e9da2f756a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79b3c136afb2422d938f87bce41900b92d0b27c1"],"64c2a46b477cb149a2ef770913d276e9da2f756a":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a2736176c89a0cd1b5cf70785dcbaa365a67282b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}