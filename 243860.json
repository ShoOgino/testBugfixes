{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) ArrayUtil.quickSort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) ArrayUtil.quickSort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) ArrayUtil.quickSort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) ArrayUtil.quickSort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) ArrayUtil.quickSort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["4d7a70709df2f3ba961939504c75098e92da8b99"],"4d7a70709df2f3ba961939504c75098e92da8b99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["4d7a70709df2f3ba961939504c75098e92da8b99","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"4d7a70709df2f3ba961939504c75098e92da8b99":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}