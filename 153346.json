{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getCounts();\n    assertEquals(\"null (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93bee32f95de853915b2f9402e76ed24ef97f43e","date":1384460894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, null);\n    assertEquals(\"null (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getCounts();\n    assertEquals(\"null (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n    assertEquals(\"field (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, null);\n    assertEquals(\"null (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n    assertEquals(\"value=101 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n    assertEquals(\"field (101)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    FacetsCollector fc = new FacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    FacetResult result = facets.getTopChildren(10, \"field\");\n    assertEquals(\"value=101 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    RangeFacetCounts facets = new RangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true));\n    \n    SimpleFacetResult result = facets.getTopChildren(10, \"field\");\n    assertEquals(\"value=101 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\",\n                 result.toString());\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["93bee32f95de853915b2f9402e76ed24ef97f43e"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["ce7aff7772c162c15d520e31af46c555f60d5c3b"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["93bee32f95de853915b2f9402e76ed24ef97f43e"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["ce7aff7772c162c15d520e31af46c555f60d5c3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}