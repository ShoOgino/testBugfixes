{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,Predicate[BytesRef]).mjava","commits":[{"id":"862ed062e72c1c01ecd8593b17804ac02b69cf0e","date":1486641184,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,Predicate[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             Predicate<BytesRef> termFilter) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we filter earlier than this to make it more efficient?\n      if (termFilter != null && !termFilter.test(facetEntry.getValue())) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             String contains,\n                                             boolean ignoreCase) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we do contains earlier than this to make it more efficient?\n      if (contains != null && !contains(facetEntry.getValue().utf8ToString(), contains, ignoreCase)) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c487301885230cc0dace89dc10bcb055560e047b","date":1563428297,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,Predicate[BytesRef]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedCounts(SolrIndexSearcher,DocSet,String,boolean,int,int,int,boolean,String,String,Predicate[BytesRef]).mjava","sourceNew":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             Predicate<BytesRef> termFilter) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    String[] groupFields = groupingSpecification != null? groupingSpecification.getFields(): null;\n    final String groupField = ArrayUtils.isNotEmpty(groupFields) ? groupFields[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we filter earlier than this to make it more efficient?\n      if (termFilter != null && !termFilter.test(facetEntry.getValue())) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","sourceOld":"  public NamedList<Integer> getGroupedCounts(SolrIndexSearcher searcher,\n                                             DocSet base,\n                                             String field,\n                                             boolean multiToken,\n                                             int offset,\n                                             int limit,\n                                             int mincount,\n                                             boolean missing,\n                                             String sort,\n                                             String prefix,\n                                             Predicate<BytesRef> termFilter) throws IOException {\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    final String groupField  = groupingSpecification != null ? groupingSpecification.getFields()[0] : null;\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    BytesRef prefixBytesRef = prefix != null ? new BytesRef(prefix) : null;\n    final TermGroupFacetCollector collector = TermGroupFacetCollector.createTermGroupFacetCollector(groupField, field, multiToken, prefixBytesRef, 128);\n    \n    Collector groupWrapper = getInsanityWrapper(groupField, collector);\n    Collector fieldWrapper = getInsanityWrapper(field, groupWrapper);\n    // When GroupedFacetCollector can handle numerics we can remove the wrapped collectors\n    searcher.search(base.getTopFilter(), fieldWrapper);\n    \n    boolean orderByCount = sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY);\n    TermGroupFacetCollector.GroupedFacetResult result \n      = collector.mergeSegmentResults(limit < 0 ? Integer.MAX_VALUE : \n                                      (offset + limit), \n                                      mincount, orderByCount);\n\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n    FieldType facetFieldType = searcher.getSchema().getFieldType(field);\n    NamedList<Integer> facetCounts = new NamedList<>();\n    List<TermGroupFacetCollector.FacetEntry> scopedEntries \n      = result.getFacetEntries(offset, limit < 0 ? Integer.MAX_VALUE : limit);\n    for (TermGroupFacetCollector.FacetEntry facetEntry : scopedEntries) {\n      //:TODO:can we filter earlier than this to make it more efficient?\n      if (termFilter != null && !termFilter.test(facetEntry.getValue())) {\n        continue;\n      }\n      facetFieldType.indexedToReadable(facetEntry.getValue(), charsRef);\n      facetCounts.add(charsRef.toString(), facetEntry.getCount());\n    }\n\n    if (missing) {\n      facetCounts.add(null, result.getTotalMissingCount());\n    }\n\n    return facetCounts;\n  }\n\n","bugFix":["7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c487301885230cc0dace89dc10bcb055560e047b":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c487301885230cc0dace89dc10bcb055560e047b"]},"commit2Childs":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["c487301885230cc0dace89dc10bcb055560e047b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"c487301885230cc0dace89dc10bcb055560e047b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}