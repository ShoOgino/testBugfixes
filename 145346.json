{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"/dev/null","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getLiveNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getLiveNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getClusterState().getLiveNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getClusterState().getLiveNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(SolrCloudManager cloudManager) {\n      this.nodes = new ArrayList<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      this.cloudManager = cloudManager;\n      for (String node : nodes) {\n        collections.addAll(cloudManager.getNodeStateProvider().getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n      for (String c : collections) {\n        addClausesForCollection(stateProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, cloudManager));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":["ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":[],"98f11c416d30e556e0004a9a84960702d12d35b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}