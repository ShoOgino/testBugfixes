{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackgroundPurges() throws IOException, InterruptedException {\n\n    MonitorConfiguration config = new MonitorConfiguration().setPurgeFrequency(1, TimeUnit.SECONDS);\n    try (Monitor monitor = new Monitor(ANALYZER, Presearcher.NO_FILTERING, config)) {\n\n      assertEquals(-1, monitor.getQueryCacheStats().lastPurged);\n\n      for (int i = 0; i < 100; i++) {\n        monitor.register(newMonitorQuery(i));\n      }\n      monitor.deleteById(\"5\");\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(100, monitor.getQueryCacheStats().cachedQueries);\n\n      TimeUnit.SECONDS.sleep(2);\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(99, monitor.getQueryCacheStats().cachedQueries);\n      assertTrue(monitor.getQueryCacheStats().lastPurged > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c73b582eb171053cec0dca7271cafbe55c62e","date":1561048343,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","pathOld":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","sourceNew":"  public void testBackgroundPurges() throws IOException, InterruptedException {\n\n    MonitorConfiguration config = new MonitorConfiguration().setPurgeFrequency(50, TimeUnit.MILLISECONDS);\n    try (Monitor monitor = new Monitor(ANALYZER, Presearcher.NO_FILTERING, config)) {\n\n      assertEquals(-1, monitor.getQueryCacheStats().lastPurged);\n\n      for (int i = 0; i < 100; i++) {\n        monitor.register(newMonitorQuery(i));\n      }\n      assertEquals(100, monitor.getQueryCacheStats().cachedQueries);\n\n      monitor.deleteById(\"5\");\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n\n      CountDownLatch latch = new CountDownLatch(1);\n      monitor.addQueryIndexUpdateListener(new MonitorUpdateListener() {\n        @Override\n        public void onPurge() {\n          latch.countDown();\n        }\n      });\n\n      assertTrue(latch.await(5, TimeUnit.SECONDS));\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(99, monitor.getQueryCacheStats().cachedQueries);\n      assertTrue(monitor.getQueryCacheStats().lastPurged > 0);\n    }\n  }\n\n","sourceOld":"  public void testBackgroundPurges() throws IOException, InterruptedException {\n\n    MonitorConfiguration config = new MonitorConfiguration().setPurgeFrequency(1, TimeUnit.SECONDS);\n    try (Monitor monitor = new Monitor(ANALYZER, Presearcher.NO_FILTERING, config)) {\n\n      assertEquals(-1, monitor.getQueryCacheStats().lastPurged);\n\n      for (int i = 0; i < 100; i++) {\n        monitor.register(newMonitorQuery(i));\n      }\n      monitor.deleteById(\"5\");\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(100, monitor.getQueryCacheStats().cachedQueries);\n\n      TimeUnit.SECONDS.sleep(2);\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(99, monitor.getQueryCacheStats().cachedQueries);\n      assertTrue(monitor.getQueryCacheStats().lastPurged > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13311d0df341412b239e738250dd815ed5dcbfd2","date":1561367052,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","pathOld":"lucene/monitor/src/test/org/apache/lucene/monitor/TestCachePurging#testBackgroundPurges().mjava","sourceNew":"  public void testBackgroundPurges() throws IOException, InterruptedException {\n\n    MonitorConfiguration config = new MonitorConfiguration().setPurgeFrequency(50, TimeUnit.MILLISECONDS);\n    try (Monitor monitor = new Monitor(ANALYZER, Presearcher.NO_FILTERING, config)) {\n\n      assertEquals(-1, monitor.getQueryCacheStats().lastPurged);\n\n      for (int i = 0; i < 100; i++) {\n        monitor.register(newMonitorQuery(i));\n      }\n      assertEquals(100, monitor.getQueryCacheStats().cachedQueries);\n\n      monitor.deleteById(\"5\");\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n\n      CountDownLatch latch = new CountDownLatch(1);\n      monitor.addQueryIndexUpdateListener(new MonitorUpdateListener() {\n        @Override\n        public void onPurge() {\n          // It can sometimes take a couple of purge runs to get everything in sync\n          if (monitor.getQueryCacheStats().cachedQueries == 99)\n            latch.countDown();\n        }\n      });\n\n      assertTrue(latch.await(5, TimeUnit.SECONDS));\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(99, monitor.getQueryCacheStats().cachedQueries);\n      assertTrue(monitor.getQueryCacheStats().lastPurged > 0);\n    }\n  }\n\n","sourceOld":"  public void testBackgroundPurges() throws IOException, InterruptedException {\n\n    MonitorConfiguration config = new MonitorConfiguration().setPurgeFrequency(50, TimeUnit.MILLISECONDS);\n    try (Monitor monitor = new Monitor(ANALYZER, Presearcher.NO_FILTERING, config)) {\n\n      assertEquals(-1, monitor.getQueryCacheStats().lastPurged);\n\n      for (int i = 0; i < 100; i++) {\n        monitor.register(newMonitorQuery(i));\n      }\n      assertEquals(100, monitor.getQueryCacheStats().cachedQueries);\n\n      monitor.deleteById(\"5\");\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n\n      CountDownLatch latch = new CountDownLatch(1);\n      monitor.addQueryIndexUpdateListener(new MonitorUpdateListener() {\n        @Override\n        public void onPurge() {\n          latch.countDown();\n        }\n      });\n\n      assertTrue(latch.await(5, TimeUnit.SECONDS));\n      assertEquals(99, monitor.getQueryCacheStats().queries);\n      assertEquals(99, monitor.getQueryCacheStats().cachedQueries);\n      assertTrue(monitor.getQueryCacheStats().lastPurged > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13311d0df341412b239e738250dd815ed5dcbfd2":["e15c73b582eb171053cec0dca7271cafbe55c62e"],"e15c73b582eb171053cec0dca7271cafbe55c62e":["7c529b189e09de25455d82ebd7260748cf11ee14"],"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13311d0df341412b239e738250dd815ed5dcbfd2"]},"commit2Childs":{"13311d0df341412b239e738250dd815ed5dcbfd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15c73b582eb171053cec0dca7271cafbe55c62e":["13311d0df341412b239e738250dd815ed5dcbfd2"],"7c529b189e09de25455d82ebd7260748cf11ee14":["e15c73b582eb171053cec0dca7271cafbe55c62e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}