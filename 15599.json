{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","sourceNew":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.type(), rightDocValues.type());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","sourceOld":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.type(), rightDocValues.type());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","sourceNew":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.getType(), rightDocValues.getType());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","sourceOld":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.type(), rightDocValues.type());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","sourceNew":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.getType(), rightDocValues.getType());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","sourceOld":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.type(), rightDocValues.type());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","sourceNew":null,"sourceOld":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.getType(), rightDocValues.getType());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(DocValues,DocValues).mjava","sourceNew":null,"sourceOld":"  public void assertDocValues(DocValues leftDocValues, DocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    assertEquals(info, leftDocValues.getType(), rightDocValues.getType());\n    assertEquals(info, leftDocValues.getValueSize(), rightDocValues.getValueSize());\n    assertDocValuesSource(leftDocValues.getDirectSource(), rightDocValues.getDirectSource());\n    assertDocValuesSource(leftDocValues.getSource(), rightDocValues.getSource());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}