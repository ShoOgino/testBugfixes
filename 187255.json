{"path":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(sparseSet.iterator());\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(sparseSet.iterator());\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(new SparseFixedBitSetIterator(sparseSet, 0L));\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(sparseSet.iterator());\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(new BitSetIterator(sparseSet, 0L));\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(new SparseFixedBitSetIterator(sparseSet, 0L));\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#or(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    if (denseSet != null) {\n      // already upgraded\n      denseSet.or(it);\n      return;\n    }\n\n    final long itCost = it.cost();\n    costUpperBound += itCost;\n    if (costUpperBound >= threshold) {\n      costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n      if (costUpperBound >= threshold) {\n        // upgrade\n        denseSet = new FixedBitSet(maxDoc);\n        denseSet.or(it);\n        if (sparseSet != null) {\n          denseSet.or(new BitSetIterator(sparseSet, 0L));\n        }\n        return;\n      }\n    }\n\n    // we are still sparse\n    if (sparseSet == null) {\n      sparseSet = new SparseFixedBitSet(maxDoc);\n    }\n    sparseSet.or(it);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b012914a8110b2ff1d075ed1ef72aa57084d4897"]},"commit2Childs":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}