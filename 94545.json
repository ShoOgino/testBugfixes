{"path":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","sourceNew":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","sourceOld":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","sourceNew":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","sourceOld":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","sourceNew":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","sourceOld":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","sourceNew":null,"sourceOld":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["2106271e380c198349e0f6eac0395bb462913fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}