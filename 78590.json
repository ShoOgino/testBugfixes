{"path":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","commits":[{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, runClasses.getFailureCount());\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, runClasses.getFailureCount());\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    assertFailureCount(1, runClasses);\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, runClasses.getFailureCount());\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d524d41bd211f811312cf6639e3792dae4df6cbb","date":1398850727,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    assertFailureCount(1, runClasses);\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, runClasses.getFailureCount());\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestExceptionInBeforeClassHooks#testExceptionInBeforeClassFailsTheTest().mjava","sourceNew":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    assertFailureCount(1, runClasses);\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionInBeforeClassFailsTheTest() {\n    Result runClasses = JUnitCore.runClasses(Nested1.class);\n    assertFailureCount(1, runClasses);\n    Assert.assertEquals(1, runClasses.getRunCount());\n    Assert.assertTrue(runClasses.getFailures().get(0).getTrace().contains(\"foobar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d524d41bd211f811312cf6639e3792dae4df6cbb":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","d524d41bd211f811312cf6639e3792dae4df6cbb","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}