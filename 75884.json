{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","sourceOld":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","sourceOld":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int length = this.length < other.length ? this.length : other.length;\n    for (int i = 0, j = 0; i < length; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int length = this.length < other.length ? this.length : other.length;\n    for (int i = 0, j = 0; i < length; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this CategoryPath with the other CategoryPath for lexicographic\n   * order. \n   * Returns a negative integer, zero, or a positive integer as this\n   * CategoryPath lexicographically precedes, equals to, or lexicographically follows \n   * the other CategoryPath.\n   */\n  public int compareTo(CategoryPath other) {\n    int minlength = (this.length() < other.length()) ? this.length() : other.length();\n    int ch = 0;\n    for (int co = 0 ; co < minlength; co++) {\n      if (this.ends[co] <= other.ends[co]) {\n        for ( ; ch < this.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        if (this.ends[co] < other.ends[co]) {\n          return -1;\n        }\n      } else /* this.ends[co] > other.ends[co] */ {\n        for ( ; ch < other.ends[co] ; ch++) {\n          if (this.chars[ch] != other.chars[ch]) {\n            return this.chars[ch] - other.chars[ch];\n          }\n        }\n        return +1;\n      }\n    }\n    // one is a prefix of the other\n    return this.length() - other.length();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449e3e5d86c2c7742ce15084568c860029c09c36","date":1358424551,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int length = this.length < other.length ? this.length : other.length;\n    for (int i = 0, j = 0; i < length; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    int length = this.length < other.length ? this.length : other.length;\n    for (int i = 0, j = 0; i < length; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link FacetLabel} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(FacetLabel other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","449e3e5d86c2c7742ce15084568c860029c09c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"449e3e5d86c2c7742ce15084568c860029c09c36":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["449e3e5d86c2c7742ce15084568c860029c09c36","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["449e3e5d86c2c7742ce15084568c860029c09c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","449e3e5d86c2c7742ce15084568c860029c09c36"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"449e3e5d86c2c7742ce15084568c860029c09c36":["c4015cd39dff8d4dec562d909f9766debac53aa6","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}