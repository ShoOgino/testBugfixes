{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      try {\n        SolrRequestParsers.parseQueryString(s);\n        fail(\"Should throw SolrException\");\n      } catch (SolrException se) {\n        // pass\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      try {\n        SolrRequestParsers.parseQueryString(s);\n        fail(\"Should throw SolrException\");\n      } catch (SolrException se) {\n        // pass\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      expectThrows(SolrException.class, () -> SolrRequestParsers.parseQueryString(s));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      try {\n        SolrRequestParsers.parseQueryString(s);\n        fail(\"Should throw SolrException\");\n      } catch (SolrException se) {\n        // pass\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      expectThrows(SolrException.class, () -> SolrRequestParsers.parseQueryString(s));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      try {\n        SolrRequestParsers.parseQueryString(s);\n        fail(\"Should throw SolrException\");\n      } catch (SolrException se) {\n        // pass\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      expectThrows(SolrException.class, () -> SolrRequestParsers.parseQueryString(s));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUrlParamParsing() throws Exception\n  {\n    final String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\", \"\" },               // empty\n      { \"\\u20AC\", \"%E2%82%ac\" } // euro, also with lowercase escapes\n    };\n    \n    for( String[] tst : teststr ) {\n      SolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&\" );\n      assertEquals( tst[0], params.get( \"val\" ) );\n      params = SolrRequestParsers.parseQueryString( \"&&val=\"+tst[1]+\"&&&val=\"+tst[1]+\"&\" );\n      assertArrayEquals(new String[]{tst[0],tst[0]}, params.getParams(\"val\") );\n   }\n    \n    SolrParams params = SolrRequestParsers.parseQueryString(\"val\");\n    assertEquals(\"\", params.get(\"val\"));\n    \n    params = SolrRequestParsers.parseQueryString(\"val&foo=bar=bar&muh&\");\n    assertEquals(\"\", params.get(\"val\"));\n    assertEquals(\"bar=bar\", params.get(\"foo\"));\n    assertEquals(\"\", params.get(\"muh\"));\n    \n    final String[] invalid = {\n      \"q=h%FCllo\",     // non-UTF-8\n      \"q=h\\u00FCllo\",  // encoded string is not pure US-ASCII\n      \"q=hallo%\",      // incomplete escape\n      \"q=hallo%1\",     // incomplete escape\n      \"q=hallo%XX123\", // invalid digit 'X' in escape\n      \"=hallo\"         // missing key\n    };\n    for (String s : invalid) {\n      try {\n        SolrRequestParsers.parseQueryString(s);\n        fail(\"Should throw SolrException\");\n      } catch (SolrException se) {\n        // pass\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c26f00b574427b55127e869b935845554afde1fa","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}