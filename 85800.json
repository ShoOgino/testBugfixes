{"path":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param input\n   *            The stream of category tokens.\n   * @param indexingParams\n   *            The indexing params to use.\n   * @throws IOException\n   */\n  public EnhancementsCategoryTokenizer(TokenStream input,\n      EnhancementsIndexingParams indexingParams) throws IOException {\n    super(input, indexingParams);\n    payloadBytes = new byte[Vint8.MAXIMUM_BYTES_NEEDED\n        * (indexingParams.getCategoryEnhancements().size() + 1)];\n    enhancements = indexingParams.getCategoryEnhancements();\n    if (enhancements != null) {\n      // create array of bytes per enhancement\n      enhancementBytes = new byte[enhancements.size()][];\n      // write once the number of enhancements in the payload bytes\n      nStart = Vint8.encode(enhancements.size(), payloadBytes, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param input\n   *            The stream of category tokens.\n   * @param indexingParams\n   *            The indexing params to use.\n   * @throws IOException\n   */\n  public EnhancementsCategoryTokenizer(TokenStream input,\n      EnhancementsIndexingParams indexingParams) throws IOException {\n    super(input, indexingParams);\n    payloadBytes = new byte[Vint8.MAXIMUM_BYTES_NEEDED\n        * (indexingParams.getCategoryEnhancements().size() + 1)];\n    enhancements = indexingParams.getCategoryEnhancements();\n    if (enhancements != null) {\n      // create array of bytes per enhancement\n      enhancementBytes = new byte[enhancements.size()][];\n      // write once the number of enhancements in the payload bytes\n      nStart = Vint8.encode(enhancements.size(), payloadBytes, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param input\n   *            The stream of category tokens.\n   * @param indexingParams\n   *            The indexing params to use.\n   * @throws IOException\n   */\n  public EnhancementsCategoryTokenizer(TokenStream input,\n      EnhancementsIndexingParams indexingParams) throws IOException {\n    super(input, indexingParams);\n    payloadBytes = new byte[Vint8.MAXIMUM_BYTES_NEEDED\n        * (indexingParams.getCategoryEnhancements().size() + 1)];\n    enhancements = indexingParams.getCategoryEnhancements();\n    if (enhancements != null) {\n      // create array of bytes per enhancement\n      enhancementBytes = new byte[enhancements.size()][];\n      // write once the number of enhancements in the payload bytes\n      nStart = Vint8.encode(enhancements.size(), payloadBytes, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/EnhancementsCategoryTokenizer#EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param input\n   *            The stream of category tokens.\n   * @param indexingParams\n   *            The indexing params to use.\n   * @throws IOException\n   */\n  public EnhancementsCategoryTokenizer(TokenStream input,\n      EnhancementsIndexingParams indexingParams) throws IOException {\n    super(input, indexingParams);\n    payloadBytes = new byte[Vint8.MAXIMUM_BYTES_NEEDED\n        * (indexingParams.getCategoryEnhancements().size() + 1)];\n    enhancements = indexingParams.getCategoryEnhancements();\n    if (enhancements != null) {\n      // create array of bytes per enhancement\n      enhancementBytes = new byte[enhancements.size()][];\n      // write once the number of enhancements in the payload bytes\n      nStart = Vint8.encode(enhancements.size(), payloadBytes, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param input\n   *            The stream of category tokens.\n   * @param indexingParams\n   *            The indexing params to use.\n   * @throws IOException\n   */\n  public EnhancementsCategoryTokenizer(TokenStream input,\n      EnhancementsIndexingParams indexingParams) throws IOException {\n    super(input, indexingParams);\n    payloadBytes = new byte[Vint8.MAXIMUM_BYTES_NEEDED\n        * (indexingParams.getCategoryEnhancements().size() + 1)];\n    enhancements = indexingParams.getCategoryEnhancements();\n    if (enhancements != null) {\n      // create array of bytes per enhancement\n      enhancementBytes = new byte[enhancements.size()][];\n      // write once the number of enhancements in the payload bytes\n      nStart = Vint8.encode(enhancements.size(), payloadBytes, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}