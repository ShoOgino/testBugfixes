{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","commits":[{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,LeafSimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, LeafSimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","sourceNew":null,"sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}