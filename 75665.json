{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape();\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape();\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a92ffe0d2961113e5588e614f8dc22b42bf10a95","date":1503304229,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape(pm);\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape();\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b","date":1503230479,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape(pm);\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape();\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3051d6122751c8f6cc1e9cf24592658b59843ec2","date":1503298024,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape(pm);\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape();\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testGeoConcaveRelationshipCase1().mjava","sourceNew":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(xyScaling=0.8568069516722363 zScaling=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(xyScaling=0.8568069516722363 zScaling=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape(pm);\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(zScaling);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(zScaling));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","sourceOld":"  @Test\n  public void testGeoConcaveRelationshipCase1() {\n    /*\n   [junit4]   1> doc=906 matched but should not\n   [junit4]   1>   point=[lat=-0.9825762558001477, lon=2.4832136904725273]\n   [junit4]   1>   quantized=[X=-0.4505446160475436, Y=0.34850109186970535, Z=-0.8539966368663765]\n\ndoc=906 added here:\n\n   [junit4]   1>   cycle: cell=107836 parentCellID=107835 x: -1147288468 TO -742350917, y: -1609508490 TO 1609508490, z: -2147483647 TO 2147483647, splits: 3 queue.size()=1\n   [junit4]   1>     minx=-0.6107484000858642 maxx=-0.39518364125756916 miny=-0.8568069517709872 maxy=0.8568069517709872 minz=-1.1431930485939341 maxz=1.1431930485939341\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\nshape:\n   [junit4]   1> TEST: iter=18 shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {\n   planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=0.6664570999069251, lon=2.0855825542851574],\n   [lat=-0.23953537010974632, lon=1.8498724094352876]]}, GeoConcavePolygon: {planetmodel=PlanetModel(ab=0.8568069516722363 c=1.1431930483277637), points=\n   [[lat=1.1577814487635816, lon=1.6283601832010004],\n   [lat=-0.23953537010974632, lon=1.8498724094352876],\n   [lat=-1.1766904875978805, lon=-2.1346828411344436]]}]}\n    */\n    PlanetModel pm = new PlanetModel(0.8568069516722363, 1.1431930483277637);\n    // Build the polygon\n    GeoCompositeMembershipShape c = new GeoCompositeMembershipShape(pm);\n    List<GeoPoint> points1 = new ArrayList<>();\n    points1.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points1.add(new GeoPoint(pm, 0.6664570999069251, 2.0855825542851574));\n    points1.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    BitSet p1bits = new BitSet();\n    c.addShape(new GeoConvexPolygon(pm, points1, p1bits, true));\n    List<GeoPoint> points2 = new ArrayList<>();\n    points2.add(new GeoPoint(pm, 1.1577814487635816, 1.6283601832010004));\n    points2.add(new GeoPoint(pm, -0.23953537010974632, 1.8498724094352876));\n    points2.add(new GeoPoint(pm, -1.1766904875978805, -2.1346828411344436));\n    BitSet p2bits = new BitSet();\n    p2bits.set(1, true);\n    c.addShape(new GeoConcavePolygon(pm, points2, p2bits, false));\n    //System.out.println(c);\n    \n    GeoPoint point = new GeoPoint(pm, -0.9825762558001477, 2.4832136904725273);\n    GeoPoint quantizedPoint = new GeoPoint(-0.4505446160475436, 0.34850109186970535, -0.8539966368663765);\n    \n    GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(pm,\n      -0.6107484000858642, -0.39518364125756916, -0.8568069517709872, 0.8568069517709872, -1.1431930485939341, 1.1431930485939341);\n    //System.out.println(\"relationship = \"+xyzSolid.getRelationship(c));\n    assertTrue(xyzSolid.getRelationship(c) == GeoArea.OVERLAPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["40aa98241c87d86a0077beb8023713d93a0becfe","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["a92ffe0d2961113e5588e614f8dc22b42bf10a95"],"a92ffe0d2961113e5588e614f8dc22b42bf10a95":["40aa98241c87d86a0077beb8023713d93a0becfe","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["3051d6122751c8f6cc1e9cf24592658b59843ec2","a92ffe0d2961113e5588e614f8dc22b42bf10a95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a92ffe0d2961113e5588e614f8dc22b42bf10a95":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b","3051d6122751c8f6cc1e9cf24592658b59843ec2","a92ffe0d2961113e5588e614f8dc22b42bf10a95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","3051d6122751c8f6cc1e9cf24592658b59843ec2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}