{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","commits":[{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryIntersects(byte[]).mjava","sourceNew":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContains(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the query intersects the encoded triangle */\n  protected boolean queryIntersects(byte[] t) {\n\n    // 1. query contains any triangle points\n    if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n      return true;\n    }\n\n    int aY = NumericUtils.sortableBytesToInt(t, 0);\n    int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n    int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n    int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n    int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n    int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","sourceNew":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContains(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","sourceNew":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#intersectsTriangle(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","sourceNew":"  /** Checks if the rectangle intersects the provided triangle **/\n  public boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9feee35369998c08f5168e0808e67e09857d5bac":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9feee35369998c08f5168e0808e67e09857d5bac"]},"commit2Childs":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["e4fccad460342b1af30cb328cc8297751a218d78"],"9feee35369998c08f5168e0808e67e09857d5bac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["9feee35369998c08f5168e0808e67e09857d5bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"e4fccad460342b1af30cb328cc8297751a218d78":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}