{"path":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    searcher.close();\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    writer.commit();\n    IndexReader ir = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(ir);\n    Weight fake = new TermQuery(new Term(\"fake\", \"weight\")).createWeight(searcher);\n    Scorer s = new SimpleScorer(fake);\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["790e1fde4caa765b3faaad3fbcd25c6973450336","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}