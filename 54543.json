{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88d4ca668409948aba3fb1b3708964e6035630b","date":1340974374,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  @Override\n  public void set(final int index, final long value) {\n    // The abstract index in a contiguous bit stream\n    final long majorBitPos = (long)index * bitsPerValue;\n    // The index in the backing long-array\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    // The number of value-bits in the second long\n    final long endBits = (majorBitPos & MOD_MASK) + bpvMinusBlockSize;\n\n    if (endBits <= 0) { // Single block\n      blocks[elementPos] = blocks[elementPos] &  ~(maskRight << -endBits)\n         | (value << -endBits);\n      return;\n    }\n    // Two blocks\n    blocks[elementPos] = blocks[elementPos] &  ~(maskRight >>> endBits)\n        | (value >>> endBits);\n    blocks[elementPos+1] = blocks[elementPos+1] &  (~0L >>> endBits)\n        | (value << (BLOCK_SIZE - endBits));\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  @Override\n  public void set(final int index, final long value) {\n    // The abstract index in a contiguous bit stream\n    final long majorBitPos = (long)index * bitsPerValue;\n    // The index in the backing long-array\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    // The number of value-bits in the second long\n    final long endBits = (majorBitPos & MOD_MASK) + bpvMinusBlockSize;\n\n    if (endBits <= 0) { // Single block\n      blocks[elementPos] = blocks[elementPos] &  ~(maskRight << -endBits)\n         | (value << -endBits);\n      return;\n    }\n    // Two blocks\n    blocks[elementPos] = blocks[elementPos] &  ~(maskRight >>> endBits)\n        | (value >>> endBits);\n    blocks[elementPos+1] = blocks[elementPos+1] &  (~0L >>> endBits)\n        | (value << (BLOCK_SIZE - endBits));\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e88d4ca668409948aba3fb1b3708964e6035630b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e88d4ca668409948aba3fb1b3708964e6035630b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e88d4ca668409948aba3fb1b3708964e6035630b"]},"commit2Childs":{"e88d4ca668409948aba3fb1b3708964e6035630b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e88d4ca668409948aba3fb1b3708964e6035630b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}