{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testDegenerateRelationships().mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testDegenerateRelationships().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDegenerateRelationships() {\n    GeoArea solid;\n    GeoShape shape;\n    \n    // Basic test of the factory method - non-degenerate\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a degenerate point, not on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a degenerate point that IS on the sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    \n    // Build a shape degenerate in (x,z), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,z) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for y-z check\n    \n    // Build a shape that is degenerate in x, which has zero points intersecting sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 1.1, 1.2);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a complete circle\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a half circle in Y\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for degenerate Y\n    // MHL for degenerate Z\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testDegenerateRelationships().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testDegenerateRelationships().mjava","sourceNew":"  @Test\n  public void testDegenerateRelationships() {\n    GeoArea solid;\n    GeoShape shape;\n    \n    // Basic test of the factory method - non-degenerate\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a degenerate point, not on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a degenerate point that IS on the sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    \n    // Build a shape degenerate in (x,z), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,z) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for y-z check\n    \n    // Build a shape that is degenerate in x, which has zero points intersecting sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 1.1, 1.2);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a complete circle\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a half circle in Y\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for degenerate Y\n    // MHL for degenerate Z\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDegenerateRelationships() {\n    GeoArea solid;\n    GeoShape shape;\n    \n    // Basic test of the factory method - non-degenerate\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a degenerate point, not on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a degenerate point that IS on the sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    \n    // Build a shape degenerate in (x,z), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,z) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for y-z check\n    \n    // Build a shape that is degenerate in x, which has zero points intersecting sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 1.1, 1.2);\n    // disjoint with everything?\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a complete circle\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a half circle in Y\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for degenerate Y\n    // MHL for degenerate Z\n    \n  }\n\n","bugFix":["f64b7098768253180859cd8faeae6b1a185b06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/XYZSolidTest#testDegenerateRelationships().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/XYZSolidTest#testDegenerateRelationships().mjava","sourceNew":"  @Test\n  public void testDegenerateRelationships() {\n    GeoArea solid;\n    GeoShape shape;\n    \n    // Basic test of the factory method - non-degenerate\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a degenerate point, not on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a degenerate point that IS on the sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    \n    // Build a shape degenerate in (x,z), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,z) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for y-z check\n    \n    // Build a shape that is degenerate in x, which has zero points intersecting sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 1.1, 1.2);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a complete circle\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a half circle in Y\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for degenerate Y\n    // MHL for degenerate Z\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDegenerateRelationships() {\n    GeoArea solid;\n    GeoShape shape;\n    \n    // Basic test of the factory method - non-degenerate\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0);\n    // Any shape, except whole world, should be within.\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.WITHIN, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    // An XYZSolid represents a surface shape, which when larger than the world is in fact\n    // the entire world, so it should overlap the world.\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a degenerate point, not on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a degenerate point that IS on the sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -0.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 0.0, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    \n    // Build a shape degenerate in (x,z), which has no points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 0.0, 0.0);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,z) which has one point on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape degenerate in (x,y) which has two points on sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, 0.0, 0.0);\n    // inside everything that it touches?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for y-z check\n    \n    // Build a shape that is degenerate in x, which has zero points intersecting sphere\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, -0.1, 0.1);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is degenerate in x, which has zero points intersecting sphere, second variation\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -0.1, 0.1, 1.1, 1.2);\n    // disjoint with everything?\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a complete circle\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, -1.1, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // Build a shape that is disjoint in X but intersects sphere in a half circle in Y\n    solid = GeoAreaFactory.makeGeoArea(PlanetModel.SPHERE, 0.0, 0.0, 0.0, 1.1, -1.1, 1.1);\n    // inside everything that it touches?\n    shape = new GeoWorld(PlanetModel.SPHERE);\n    assertEquals(GeoArea.CONTAINS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, 0.0, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -Math.PI * 0.5, 0.1);\n    assertEquals(GeoArea.DISJOINT, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n    shape = new GeoStandardCircle(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0, 0.1);\n    assertEquals(GeoArea.OVERLAPS, solid.getRelationship(shape));\n\n    // MHL for degenerate Y\n    // MHL for degenerate Z\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}