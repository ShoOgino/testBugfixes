{"path":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.substring(zkHost.indexOf(\"/\"));\n    zkChroot = zkChroot.startsWith(\"/\") ? zkChroot.substring(1) : zkChroot;\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    String zkConnectionString = zkHost.substring(0, zkHost.indexOf(\"/\"));\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.substring(zkHost.indexOf(\"/\"));\n    zkChroot = zkChroot.startsWith(\"/\") ? zkChroot.substring(1) : zkChroot;\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    String zkConnectionString = zkHost.substring(0, zkHost.indexOf(\"/\"));\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.substring(zkHost.indexOf(\"/\"));\n    zkChroot = zkChroot.startsWith(\"/\") ? zkChroot.substring(1) : zkChroot;\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    String zkConnectionString = zkHost.substring(0, zkHost.indexOf(\"/\"));\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","date":1477294600,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.substring(zkHost.indexOf(\"/\"));\n    zkChroot = zkChroot.startsWith(\"/\") ? zkChroot.substring(1) : zkChroot;\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    String zkConnectionString = zkHost.substring(0, zkHost.indexOf(\"/\"));\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":["20be168d828ac40d262f85364d02f15b491dd88b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.substring(zkHost.indexOf(\"/\"));\n    zkChroot = zkChroot.startsWith(\"/\") ? zkChroot.substring(1) : zkChroot;\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    String zkConnectionString = zkHost.substring(0, zkHost.indexOf(\"/\"));\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7e60660726fd43b5f9d130e3de39e69252227a","date":1502275613,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException ex) {\n      // ignore?\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","ff7e60660726fd43b5f9d130e3de39e69252227a"],"ff7e60660726fd43b5f9d130e3de39e69252227a":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8e31f4c53592021b9ddc25f3a0ec34f6eb14d663"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["ff7e60660726fd43b5f9d130e3de39e69252227a"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","ff7e60660726fd43b5f9d130e3de39e69252227a"],"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663":["20be168d828ac40d262f85364d02f15b491dd88b"],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"ff7e60660726fd43b5f9d130e3de39e69252227a":["58884af1f68e9d61c217c753fbd6266d86a63b14","5e0ac06a3dde3a146042d8eb8820dc45326e9263","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"8e31f4c53592021b9ddc25f3a0ec34f6eb14d663":["58884af1f68e9d61c217c753fbd6266d86a63b14","ff7e60660726fd43b5f9d130e3de39e69252227a","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"20be168d828ac40d262f85364d02f15b491dd88b":["8e31f4c53592021b9ddc25f3a0ec34f6eb14d663","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}