{"path":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","commits":[{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      final long numBytes = (docID - (lastDocID+1))*size;\n      final byte zero = 0;\n      for (long i = 0; i < numBytes; i++) {\n        datOut.writeByte(zero);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      final long numBytes = (docID - (lastDocID+1))*size;\n      final byte zero = 0;\n      for (long i = 0; i < numBytes; i++) {\n        datOut.writeByte(zero);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      final long numBytes = (docID - (lastDocID+1))*size;\n      final byte zero = 0;\n      for (long i = 0; i < numBytes; i++) {\n        datOut.writeByte(zero);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      writeZeros((docID - (lastDocID+1)), datOut);\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      final long numBytes = (docID - (lastDocID+1))*size;\n      final byte zero = 0;\n      for (long i = 0; i < numBytes; i++) {\n        datOut.writeByte(zero);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      writeZeros((docID - (lastDocID+1)), datOut);\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      writeZeros((docID - (lastDocID+1)), datOut);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(IndexOutput,int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      writeZeros((docID - (lastDocID+1)), datOut);\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(IndexOutput datOut, int docID) throws IOException {\n      assert size >= 0;\n      writeZeros((docID - (lastDocID+1)), datOut);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["85eb75e0c0203e44dcf686f35876cf6080f3a671","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["85eb75e0c0203e44dcf686f35876cf6080f3a671","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}