{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random.nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random.nextInt(fieldTypes.size()+2);\n      boolean asc = random.nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#createSort(IndexSchema,List[FldType],String[]).mjava","sourceNew":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","sourceOld":"  public static Comparator<Doc> createSort(IndexSchema schema, List<FldType> fieldTypes, String[] out) {\n    StringBuilder sortSpec = new StringBuilder();\n    int nSorts = random().nextInt(4);\n    List<Comparator<Doc>> comparators = new ArrayList<Comparator<Doc>>();\n    for (int i=0; i<nSorts; i++) {\n      if (i>0) sortSpec.append(',');\n\n      int which = random().nextInt(fieldTypes.size()+2);\n      boolean asc = random().nextBoolean();\n      if (which == fieldTypes.size()) {\n        // sort by score\n        sortSpec.append(\"score\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"score\", asc, false, false, false));\n      } else if (which == fieldTypes.size() + 1) {\n        // sort by docid\n        sortSpec.append(\"_docid_\").append(asc ? \" asc\" : \" desc\");\n        comparators.add(createComparator(\"_docid_\", asc, false, false, false));\n      } else {\n        String field = fieldTypes.get(which).fname;\n        sortSpec.append(field).append(asc ? \" asc\" : \" desc\");\n        SchemaField sf = schema.getField(field);\n        comparators.add(createComparator(field, asc, sf.sortMissingLast(), sf.sortMissingFirst(), !(sf.sortMissingLast()||sf.sortMissingFirst()) ));\n      }\n    }\n\n    out[0] = sortSpec.length() > 0 ? sortSpec.toString() : null;\n\n    if (comparators.size() == 0) {\n      // default sort is by score desc\n      comparators.add(createComparator(\"score\", false, false, false, false));      \n    }\n\n    return createComparator(comparators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}