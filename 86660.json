{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(SORTED_SET);\n\n    // First write docToOrdCounts, except we \"aggregate\" the\n    // counts so they turn into addresses, and add a final\n    // value = the total aggregate:\n    addNumericFieldValues(field, new Iterable<Number>() {\n\n        // Just aggregates the count values so they become\n        // \"addresses\", and adds one more value in the end\n        // (the final sum):\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> iter = docToOrdCount.iterator();\n\n          return new Iterator<Number>() {\n\n            long sum;\n            boolean ended;\n\n            @Override\n            public boolean hasNext() {\n              return iter.hasNext() || !ended;\n            }\n\n            @Override\n            public Number next() {\n              long toReturn = sum;\n\n              if (iter.hasNext()) {\n                Number n = iter.next();\n                if (n != null) {\n                  sum += n.longValue();\n                }\n              } else if (!ended) {\n                ended = true;\n              } else {\n                assert false;\n              }\n\n              return toReturn;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n\n    // Write ordinals for all docs, appended into one big\n    // numerics:\n    addNumericFieldValues(field, ords);\n      \n    // write the values as binary\n    addBinaryFieldValues(field, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(SORTED_SET);\n\n    // First write docToOrdCounts, except we \"aggregate\" the\n    // counts so they turn into addresses, and add a final\n    // value = the total aggregate:\n    addNumericFieldValues(field, new Iterable<Number>() {\n\n        // Just aggregates the count values so they become\n        // \"addresses\", and adds one more value in the end\n        // (the final sum):\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> iter = docToOrdCount.iterator();\n\n          return new Iterator<Number>() {\n\n            long sum;\n            boolean ended;\n\n            @Override\n            public boolean hasNext() {\n              return iter.hasNext() || !ended;\n            }\n\n            @Override\n            public Number next() {\n              long toReturn = sum;\n\n              if (iter.hasNext()) {\n                Number n = iter.next();\n                if (n != null) {\n                  sum += n.longValue();\n                }\n              } else if (!ended) {\n                ended = true;\n              } else {\n                assert false;\n              }\n\n              return toReturn;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n\n    // Write ordinals for all docs, appended into one big\n    // numerics:\n    addNumericFieldValues(field, ords);\n      \n    // write the values as binary\n    addBinaryFieldValues(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(SORTED_SET);\n\n    // First write docToOrdCounts, except we \"aggregate\" the\n    // counts so they turn into addresses, and add a final\n    // value = the total aggregate:\n    addNumericFieldValues(field, new Iterable<Number>() {\n\n        // Just aggregates the count values so they become\n        // \"addresses\", and adds one more value in the end\n        // (the final sum):\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> iter = docToOrdCount.iterator();\n\n          return new Iterator<Number>() {\n\n            long sum;\n            boolean ended;\n\n            @Override\n            public boolean hasNext() {\n              return iter.hasNext() || !ended;\n            }\n\n            @Override\n            public Number next() {\n              long toReturn = sum;\n\n              if (iter.hasNext()) {\n                Number n = iter.next();\n                if (n != null) {\n                  sum += n.longValue();\n                }\n              } else if (!ended) {\n                ended = true;\n              } else {\n                assert false;\n              }\n\n              return toReturn;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n          };\n        }\n      });\n\n    // Write ordinals for all docs, appended into one big\n    // numerics:\n    addNumericFieldValues(field, ords);\n      \n    // write the values as binary\n    addBinaryFieldValues(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n    \n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  // note: this might not be the most efficient... but it's fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    \n    if (isSingleValued(docToOrdCount)) {\n      meta.writeByte(SORTED_SET_SINGLETON);\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, singletonView(docToOrdCount, ords, -1L));\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    } else {\n      meta.writeByte(SORTED_SET);\n\n      // First write docToOrdCounts, except we \"aggregate\" the\n      // counts so they turn into addresses, and add a final\n      // value = the total aggregate:\n      addNumericFieldValues(field, countToAddressIterator(docToOrdCount));\n\n      // Write ordinals for all docs, appended into one big\n      // numerics:\n      addNumericFieldValues(field, ords);\n      \n      // write the values as binary\n      addBinaryFieldValues(field, values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}