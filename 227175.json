{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/IndexingNestedDocuments#testIndexingAnonKids().mjava","commits":[{"id":"0b5e0da3b576580fb2128e87467fa5f579ca2c33","date":1599081383,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/IndexingNestedDocuments#testIndexingAnonKids().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Demo of using anonymous children when indexing hierarchical documents.\n   * This test code is used as an 'include' from the ref-guide\n   */\n  public void testIndexingAnonKids() throws Exception {\n    final String collection = \"test_anon\";\n    CollectionAdminRequest.createCollection(collection, ANON_KIDS_CONFIG, 1, 1).process(cluster.getSolrClient());\n    cluster.getSolrClient().setDefaultCollection(collection);\n    \n    //\n    // DO NOT MODIFY THESE EXAMPLE DOCS WITH OUT MAKING THE SAME CHANGES TO THE JSON AND XML\n    // EQUIVILENT EXAMPLES IN 'indexing-nested-documents.adoc'\n    //\n\n    // tag::anon-kids[]\n    final SolrClient client = getSolrClient();\n\n    final SolrInputDocument p1 = new SolrInputDocument();\n    p1.setField(\"id\", \"P11!prod\");\n    p1.setField(\"type_s\", \"PRODUCT\");\n    p1.setField(\"name_s\", \"Swingline Stapler\");\n    p1.setField(\"description_t\", \"The Cadillac of office staplers ...\");\n    {\n      final SolrInputDocument s1 = new SolrInputDocument();\n      s1.setField(\"id\", \"P11!S21\");\n      s1.setField(\"type_s\", \"SKU\");\n      s1.setField(\"color_s\", \"RED\");\n      s1.setField(\"price_i\", 42);\n      { \n        final SolrInputDocument m1 = new SolrInputDocument();\n        m1.setField(\"id\", \"P11!D41\");\n        m1.setField(\"type_s\", \"MANUAL\");\n        m1.setField(\"name_s\", \"Red Swingline Brochure\");\n        m1.setField(\"pages_i\", 1);\n        m1.setField(\"content_t\", \"...\");\n\n        s1.addChildDocument(m1);\n      }\n\n      final SolrInputDocument s2 = new SolrInputDocument();\n      s2.setField(\"id\", \"P11!S31\");\n      s2.setField(\"type_s\", \"SKU\");\n      s2.setField(\"color_s\", \"BLACK\");\n      s2.setField(\"price_i\", 3);\n\n      final SolrInputDocument m1 = new SolrInputDocument();\n      m1.setField(\"id\", \"P11!D51\");\n      m1.setField(\"type_s\", \"MANUAL\");\n      m1.setField(\"name_s\", \"Quick Reference Guide\");\n      m1.setField(\"pages_i\", 1);\n      m1.setField(\"content_t\", \"How to use your stapler ...\");\n\n      final SolrInputDocument m2 = new SolrInputDocument();\n      m2.setField(\"id\", \"P11!D61\");\n      m2.setField(\"type_s\", \"MANUAL\");\n      m2.setField(\"name_s\", \"Warranty Details\");\n      m2.setField(\"pages_i\", 42);\n      m2.setField(\"content_t\", \"... lifetime guarantee ...\");\n\n      p1.addChildDocuments(Arrays.asList(s1, s2, m1, m2));\n    }\n    \n    client.add(p1);\n    // end::anon-kids[]\n    \n    client.commit();\n\n    final SolrDocumentList docs = getSolrClient().query\n      (new SolrQuery(\"description_t:Cadillac\").set(\"fl\", \"*,[child parentFilter='type_s:PRODUCT']\")).getResults();\n    \n    assertEquals(1, docs.getNumFound());\n    assertEquals(\"P11!prod\", docs.get(0).getFieldValue(\"id\"));\n\n    // [child] returns a flat list of all (anon) descendents\n    assertEquals(5, docs.get(0).getChildDocumentCount());\n    assertEquals(5, docs.get(0).getChildDocuments().size());\n\n    // flat list is depth first...\n    final SolrDocument red_stapler_brochure = docs.get(0).getChildDocuments().get(0);\n    assertEquals(\"P11!D41\", red_stapler_brochure.getFieldValue(\"id\"));\n    \n    final SolrDocument red_stapler = docs.get(0).getChildDocuments().get(1);\n    assertEquals(\"P11!S21\", red_stapler.getFieldValue(\"id\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}