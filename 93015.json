{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if ((flags & PostingsEnum.FLAG_POSITIONS) >= PostingsEnum.FLAG_POSITIONS) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if ((flags & PostingsEnum.FLAG_POSITIONS) >= PostingsEnum.FLAG_POSITIONS) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":["6bded7e784a0edc186af47e44fc86f73b8288791"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bded7e784a0edc186af47e44fc86f73b8288791","date":1424816170,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if ((flags & PostingsEnum.POSITIONS) >= PostingsEnum.POSITIONS) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (hasPos && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (hasPos && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n        if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (!hasPos) {\n            return null;\n          }\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectIntersectTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (hasPos && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos().reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF().reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum().reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n        if (hasPos && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              return new LowFreqDocsEnum(liveDocs, posLen).reset(postings);\n            } else {\n              return new LowFreqDocsEnumNoPos(liveDocs).reset(postings);\n            }\n          } else {\n            return new LowFreqDocsEnumNoTF(liveDocs).reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n          //  System.out.println(\"DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return new HighFreqDocsEnum(liveDocs).reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6bded7e784a0edc186af47e44fc86f73b8288791"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["6bded7e784a0edc186af47e44fc86f73b8288791","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bded7e784a0edc186af47e44fc86f73b8288791":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["6bded7e784a0edc186af47e44fc86f73b8288791"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6bded7e784a0edc186af47e44fc86f73b8288791":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}