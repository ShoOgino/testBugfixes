{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int,int).mjava","commits":[{"id":"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601","date":1594220892,"type":1,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#makeCharRange(int,int).mjava","sourceNew":"  static RegExp makeCharRange(int flags, int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    return newLeafNode(flags, Kind.REGEXP_CHAR_RANGE, null, 0, 0, 0, 0, from, to);\n  }\n\n","sourceOld":"  static RegExp makeCharRange(int from, int to) {\n    if (from > to) \n      throw new IllegalArgumentException(\"invalid range: from (\" + from + \") cannot be > to (\" + to + \")\");\n    return newLeafNode(Kind.REGEXP_CHAR_RANGE, null, 0, 0, 0, 0, from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}