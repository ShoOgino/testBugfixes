{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6225820ca5f401e2fe460f36e4a919a384cef6c","date":1393272577,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        // TODO: this sucks\n        if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#sliceCmd(ClusterState,ModifiableSolrParams,String,Slice).mjava","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher,\n                        Slice slice, ShardHandler shardHandler) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, String stateMatcher, Slice slice) {\n    Map<String,Replica> shards = slice.getReplicasMap();\n    Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n    for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n      final ZkNodeProps node = shardEntry.getValue();\n      if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE,\n            node.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n        ShardRequest sreq = new ShardRequest();\n        sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n        // yes, they must use same admin handler path everywhere...\n        cloneParams.set(\"qt\", adminPath);\n        sreq.purpose = 1;\n        sreq.shards = new String[] {replica};\n        sreq.actualShards = sreq.shards;\n        sreq.params = cloneParams;\n        log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n            + \" params:\" + sreq.params);\n        shardHandler.submit(sreq, replica, sreq.params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"b7605579001505896d48b07160075a5c8b8e128e":["e6225820ca5f401e2fe460f36e4a919a384cef6c","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["e6225820ca5f401e2fe460f36e4a919a384cef6c"],"e6225820ca5f401e2fe460f36e4a919a384cef6c":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f26f74e4969851a019d28f10315cb1c77786f22"]},"commit2Childs":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"e6225820ca5f401e2fe460f36e4a919a384cef6c":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["e6225820ca5f401e2fe460f36e4a919a384cef6c"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}