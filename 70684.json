{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","commits":[{"id":"25833e37398c5210d7bddaca9d14de45e194439a","date":1294165371,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b","9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bb50752d43a65ef1b623eabdb8e865983d3cd6","date":1304257984,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher.search(fieldCache, 25);\n    TopDocs filterDocs = searcher.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod#assertSame(String).mjava","sourceNew":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","sourceOld":"  /** Test fieldcache rewrite against filter rewrite */\n  @Override\n  protected void assertSame(String regexp) throws IOException {   \n    RegexpQuery fieldCache = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    fieldCache.setRewriteMethod(new FieldCacheRewriteMethod());\n    \n    RegexpQuery filter = new RegexpQuery(new Term(\"field\", regexp), RegExp.NONE);\n    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);\n    TopDocs filterDocs = searcher2.search(filter, 25);\n\n    CheckHits.checkEqual(fieldCache, fieldCacheDocs.scoreDocs, filterDocs.scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25833e37398c5210d7bddaca9d14de45e194439a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["25833e37398c5210d7bddaca9d14de45e194439a","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"00743482822ec0841b0344a37944b666e6a0228d":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25833e37398c5210d7bddaca9d14de45e194439a"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["25833e37398c5210d7bddaca9d14de45e194439a"],"25833e37398c5210d7bddaca9d14de45e194439a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00743482822ec0841b0344a37944b666e6a0228d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","25833e37398c5210d7bddaca9d14de45e194439a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"00743482822ec0841b0344a37944b666e6a0228d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"25833e37398c5210d7bddaca9d14de45e194439a":["70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","00743482822ec0841b0344a37944b666e6a0228d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}