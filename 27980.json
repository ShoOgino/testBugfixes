{"path":"solr/core/src/test/org/apache/solr/cloud/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","commits":[{"id":"b2ad92550399520cc0148c3ee5ca087706f12da4","date":1478270512,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","sourceNew":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","sourceOld":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestHdfsCloudBackupRestore#testConfigBackupOnly(String,String).mjava","sourceNew":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","sourceOld":"  protected void testConfigBackupOnly(String configName, String collectionName) throws Exception {\n    String backupName = \"configonlybackup\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName())\n        .setIndexBackupStrategy(CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY);\n    backup.process(solrClient);\n\n    Map<String,String> params = new HashMap<>();\n    params.put(\"location\", \"/backup\");\n    params.put(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n\n    HdfsBackupRepository repo = new HdfsBackupRepository();\n    repo.init(new NamedList<>(params));\n    BackupManager mgr = new BackupManager(repo, solrClient.getZkStateReader());\n\n    URI baseLoc = repo.createURI(\"/backup\");\n\n    Properties props = mgr.readBackupProperties(baseLoc, backupName);\n    assertNotNull(props);\n    assertEquals(collectionName, props.getProperty(COLLECTION_NAME_PROP));\n    assertEquals(backupName, props.getProperty(BACKUP_NAME_PROP));\n    assertEquals(configName, props.getProperty(COLL_CONF));\n\n    DocCollection collectionState = mgr.readCollectionState(baseLoc, backupName, collectionName);\n    assertNotNull(collectionState);\n    assertEquals(collectionName, collectionState.getName());\n\n    URI configDirLoc = repo.resolve(baseLoc, backupName, ZK_STATE_DIR, CONFIG_STATE_DIR, configName);\n    assertTrue(repo.exists(configDirLoc));\n\n    Collection<String> expected = Arrays.asList(BACKUP_PROPS_FILE, ZK_STATE_DIR);\n    URI backupLoc = repo.resolve(baseLoc, backupName);\n    String[] dirs = repo.listAll(backupLoc);\n    for (String d : dirs) {\n      assertTrue(expected.contains(d));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b2ad92550399520cc0148c3ee5ca087706f12da4","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b2ad92550399520cc0148c3ee5ca087706f12da4"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b2ad92550399520cc0148c3ee5ca087706f12da4"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","b2ad92550399520cc0148c3ee5ca087706f12da4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"b2ad92550399520cc0148c3ee5ca087706f12da4":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}