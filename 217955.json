{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}