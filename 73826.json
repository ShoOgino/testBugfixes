{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    \n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","sourceNew":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    String configFileParam = (String) requestParams.get(\"config\");\n    configFile = configFileParam;\n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","sourceOld":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    \n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","bugFix":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","sourceNew":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    String configFileParam = (String) requestParams.get(\"config\");\n    configFile = configFileParam;\n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","sourceOld":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    \n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","sourceNew":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    String configFileParam = (String) requestParams.get(\"config\");\n    configFile = configFileParam;\n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","sourceOld":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    \n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(SolrQueryRequest,Map[String,Object],ContentStream).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RequestInfo#RequestInfo(Map[String,Object],ContentStream).mjava","sourceNew":"  public RequestInfo(SolrQueryRequest request, Map<String,Object> requestParams, ContentStream stream) {\n    this.request = request;\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    String configFileParam = (String) requestParams.get(\"config\");\n    configFile = configFileParam;\n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","sourceOld":"  public RequestInfo(Map<String,Object> requestParams, ContentStream stream) {\n    this.contentStream = stream;    \n    if (requestParams.containsKey(\"command\")) { \n      command = (String) requestParams.get(\"command\");\n    } else {\n      command = null;\n    }    \n    boolean debugMode = StrUtils.parseBool((String) requestParams.get(\"debug\"), false);    \n    if (debugMode) {\n      debug = true;\n      debugInfo = new DebugInfo(requestParams);\n    } else {\n      debug = false;\n      debugInfo = null;\n    }       \n    if (requestParams.containsKey(\"clean\")) {\n      clean = StrUtils.parseBool( (String) requestParams.get(\"clean\"), true);\n    } else if (DataImporter.DELTA_IMPORT_CMD.equals(command) || DataImporter.IMPORT_CMD.equals(command)) {\n      clean = false;\n    } else  {\n      clean = debug ? false : true;\n    }    \n    optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"), false);\n    if(optimize) {\n      commit = true;\n    } else {\n      commit = StrUtils.parseBool( (String) requestParams.get(\"commit\"), (debug ? false : true));\n    }      \n    if (requestParams.containsKey(\"rows\")) {\n      rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n    } else {\n      rows = debug ? 10 : Long.MAX_VALUE;\n    }      \n    \n    if (requestParams.containsKey(\"start\")) {\n      start = Integer.parseInt((String) requestParams.get(\"start\"));\n    } else {\n      start = 0;\n    }\n    syncMode = StrUtils.parseBool((String) requestParams.get(\"synchronous\"), false);    \n    \n    Object o = requestParams.get(\"entity\");     \n    List<String> modifiableEntities = null;\n    if(o != null) {\n      if (o instanceof String) {\n        modifiableEntities = new ArrayList<String>();\n        modifiableEntities.add((String) o);\n      } else if (o instanceof List<?>) {\n        @SuppressWarnings(\"unchecked\")\n        List<String> modifiableEntities1 = new ArrayList<String>((List<String>) o);\n        modifiableEntities = modifiableEntities1;\n      } \n      entitiesToRun = Collections.unmodifiableList(modifiableEntities);\n    } else {\n      entitiesToRun = null;\n    }\n    String configFileParam = (String) requestParams.get(\"config\");\n    configFile = configFileParam;\n    String dataConfigParam = (String) requestParams.get(\"dataConfig\");\n    if (dataConfigParam != null && dataConfigParam.trim().length() == 0) {\n      // Empty data-config param is not valid, change it to null\n      dataConfigParam = null;\n    }\n    dataConfig = dataConfigParam;\n    this.rawParams = Collections.unmodifiableMap(new HashMap<String,Object>(requestParams));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["5101aff20e65c9a285c274627ec956eb5409d253"],"5101aff20e65c9a285c274627ec956eb5409d253":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}