{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ModClause(CharSequence).mjava","sourceNew":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n  final public QueryNode ModClause(CharSequence field) throws ParseException {\n  QueryNode q;\n  ModifierQueryNode.Modifier mods;\n    mods = Modifiers();\n    q = Clause(field);\n                if (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n                        q = new ModifierQueryNode(q, mods);\n                }\n                {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}