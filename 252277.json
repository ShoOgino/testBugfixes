{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(DataOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":"  public void save(DataOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    // TODO: really we should encode this as an arc, arriving\n    // to the root node, instead of special casing here:\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":null,"sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#save(IndexOutput).mjava","sourceNew":null,"sourceOld":"  public void save(IndexOutput out) throws IOException {\n    if (startNode == -1) {\n      throw new IllegalStateException(\"call finish first\");\n    }\n    CodecUtil.writeHeader(out, FILE_FORMAT_NAME, VERSION_CURRENT);\n    if (emptyOutput != null) {\n      out.writeByte((byte) 1);\n      out.writeVInt(emptyOutputBytes.length);\n      out.writeBytes(emptyOutputBytes, 0, emptyOutputBytes.length);\n    } else {\n      out.writeByte((byte) 0);\n    }\n    final byte t;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      t = 0;\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      t = 1;\n    } else {\n      t = 2;\n    }\n    out.writeByte(t);\n    out.writeVInt(startNode);\n    out.writeVInt(nodeCount);\n    out.writeVInt(arcCount);\n    out.writeVInt(arcWithOutputCount);\n    out.writeVInt(bytes.length);\n    out.writeBytes(bytes, 0, bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}