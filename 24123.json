{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#[T]_walk(FST[T]).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#[T]_walk(FST[T]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#[T]_walk(FST[T]).mjava","sourceNew":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static<T> void walk(FST<T> fst) throws IOException {\n    final ArrayList<FST.Arc<T>> queue = new ArrayList<FST.Arc<T>>();\n    final BitSet seen = new BitSet();\n    final FST.BytesReader reader = fst.getBytesReader();\n    final FST.Arc<T> startArc = fst.getFirstArc(new FST.Arc<T>());\n    queue.add(startArc);\n    while (!queue.isEmpty()) {\n      final FST.Arc<T> arc = queue.remove(0);\n      final long node = arc.target;\n      //System.out.println(arc);\n      if (FST.targetHasArcs(arc) && !seen.get((int) node)) {\n        seen.set((int) node);\n        fst.readFirstRealTargetArc(node, arc, reader);\n        while (true) {\n          queue.add(new FST.Arc<T>().copyFrom(arc));\n          if (arc.isLast()) {\n            break;\n          } else {\n            fst.readNextRealArc(arc, reader);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}