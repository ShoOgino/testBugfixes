{"path":"backwards/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}