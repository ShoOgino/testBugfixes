{"path":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector#collect(int).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","sourceNew":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    }\n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","sourceOld":"  public void collect(int segDoc) throws IOException {\n    int doc = segDoc + base;\n    if (skipSet != null && skipSet.exists(doc)) {\n      // when skipSet == all nodes visited so far, then this represents a cycle and we can\n      // keep track of that here in the future if we need to.\n      return;\n    }\n\n    if (bits != null) bits.set(doc);\n    // increment the hit count so we know how many docs we traversed this time.\n    numHits++;\n\n    // Optimization to not look up edges for a document that is a leaf node (i.e. has no outgoing edges)\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(segDoc);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}