{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MovingMADEvaluator#doWork(Object,Object).mjava","commits":[{"id":"68351643306aad7f2b578f3eea2b361e9601e3f8","date":1548096393,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MovingMADEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a List\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    List<?> values = (List<?>)first;\n    int window = ((Number)second).intValue();\n\n    List<Number> moving = new ArrayList<>();\n    DescriptiveStatistics slider = new DescriptiveStatistics(window);\n    for(Object value : values){\n      slider.addValue(((Number)value).doubleValue());\n      if(slider.getN() >= window){\n        double[] doubles = slider.getValues();\n        double mean = slider.getMean();\n        double total = 0;\n        for(double d : doubles) {\n          total+=Math.abs(d-mean);\n        }\n        moving.add(total/window);\n      }\n    }\n\n    return moving;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MovingMADEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a List\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    List<?> values = (List<?>)first;\n    int window = ((Number)second).intValue();\n\n    List<Number> moving = new ArrayList<>();\n    DescriptiveStatistics slider = new DescriptiveStatistics(window);\n    for(Object value : values){\n      slider.addValue(((Number)value).doubleValue());\n      if(slider.getN() >= window){\n        double[] doubles = slider.getValues();\n        double mean = slider.getMean();\n        double total = 0;\n        for(double d : doubles) {\n          total+=Math.abs(d-mean);\n        }\n        moving.add(total/window);\n      }\n    }\n\n    return moving;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68351643306aad7f2b578f3eea2b361e9601e3f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68351643306aad7f2b578f3eea2b361e9601e3f8"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68351643306aad7f2b578f3eea2b361e9601e3f8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68351643306aad7f2b578f3eea2b361e9601e3f8","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"68351643306aad7f2b578f3eea2b361e9601e3f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}