{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(ChecksumIndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private void readFields(ChecksumIndexInput meta, FieldInfos infos) throws IOException {\n    for (int fieldNumber = meta.readInt(); fieldNumber != -1; fieldNumber = meta.readInt()) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumeric(meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        binaries.put(info.name, readBinary(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        sorted.put(info.name, readSorted(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        sortedSets.put(info.name, readSortedSet(meta));\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        sortedNumerics.put(info.name, readSortedNumeric(meta));\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}