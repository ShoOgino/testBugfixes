{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(termDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(termDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":null,"sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(termDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(true, info, indexDivisor);\n      assertTrue(reader != null);\n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(termDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}