{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String,byte[],int).mjava","sourceNew":"  public synchronized void norms(String field, byte[] result, int offset)\r\n    throws IOException {\r\n    ensureOpen();\r\n    byte[] bytes = (byte[])normsCache.get(field);\r\n    if (bytes==null && !hasNorms(field)) bytes=fakeNorms();\r\n    if (bytes != null)                            // cache hit\r\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\r\n\r\n    for (int i = 0; i < subReaders.length; i++)      // read from segments\r\n      subReaders[i].norms(field, result, offset + starts[i]);\r\n  }\r\n\n","sourceOld":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) bytes=fakeNorms();\n    if (bytes != null)                            // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n\n    for (int i = 0; i < subReaders.length; i++)      // read from segments\n      subReaders[i].norms(field, result, offset + starts[i]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","sourceNew":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) bytes=fakeNorms();\n    if (bytes != null)                            // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n\n    for (int i = 0; i < subReaders.length; i++)      // read from segments\n      subReaders[i].norms(field, result, offset + starts[i]);\n  }\n\n","sourceOld":"  public synchronized void norms(String field, byte[] result, int offset)\r\n    throws IOException {\r\n    ensureOpen();\r\n    byte[] bytes = (byte[])normsCache.get(field);\r\n    if (bytes==null && !hasNorms(field)) bytes=fakeNorms();\r\n    if (bytes != null)                            // cache hit\r\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\r\n\r\n    for (int i = 0; i < subReaders.length; i++)      // read from segments\r\n      subReaders[i].norms(field, result, offset + starts[i]);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","sourceNew":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) {\n      Arrays.fill(result, offset, result.length, DefaultSimilarity.encodeNorm(1.0f));\n    } else if (bytes != null) {                           // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {      // read from segments\n        subReaders[i].norms(field, result, offset + starts[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) bytes=fakeNorms();\n    if (bytes != null)                            // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n\n    for (int i = 0; i < subReaders.length; i++)      // read from segments\n      subReaders[i].norms(field, result, offset + starts[i]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String,byte[],int).mjava","sourceNew":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) {\n      Arrays.fill(result, offset, result.length, DefaultSimilarity.encodeNorm(1.0f));\n    } else if (bytes != null) {                           // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {      // read from segments\n        subReaders[i].norms(field, result, offset + starts[i]);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes==null && !hasNorms(field)) {\n      Arrays.fill(result, offset, result.length, DefaultSimilarity.encodeNorm(1.0f));\n    } else if (bytes != null) {                           // cache hit\n      System.arraycopy(bytes, 0, result, offset, maxDoc());\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {      // read from segments\n        subReaders[i].norms(field, result, offset + starts[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["520a9bce43d52d77add8f09727f7a698289d6882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}