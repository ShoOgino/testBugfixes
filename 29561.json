{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    for (int i=0; i<10*_TestUtil.getRandomMultiplier(); i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = 10 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459280d4c73660ea582f38afce7968563068fe49","date":1311128716,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last=Integer.parseInt(searcher.doc(sd[0].doc).get(field));\n      for (int j=1; j<sd.length; j++) {\n        int act=Integer.parseInt(searcher.doc(sd[j].doc).get(field));\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":["65eb076d345a794256daba691a2b366657c807e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1f653cfcf159baeaafe5d01682a911e95bba4012","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"459280d4c73660ea582f38afce7968563068fe49":["090a0320e4de4a3674376aef96b9701f47564f86"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f83af14a2a8131b14d7aee6274c740334e0363d3","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["1f653cfcf159baeaafe5d01682a911e95bba4012","f83af14a2a8131b14d7aee6274c740334e0363d3"],"fa0f44f887719e97183771e977cfc4bfb485b766":["459280d4c73660ea582f38afce7968563068fe49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"459280d4c73660ea582f38afce7968563068fe49":["fa0f44f887719e97183771e977cfc4bfb485b766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["459280d4c73660ea582f38afce7968563068fe49","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}