{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsEnum docs(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsEnum reuse) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsEnum docs(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsEnum reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsEnum docs(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsEnum reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,PrefixCodedTermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["99cf56f3a650b908f7017a72f9d23940418f8a52","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}