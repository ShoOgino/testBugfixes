{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","commits":[{"id":"3128e6d07d9fef0d1aa24f58b07133c9293131b2","date":1342190719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}