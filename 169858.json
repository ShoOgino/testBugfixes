{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ckb/SoraniAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"4182da157d2684599ca46fec6e0ef59ff5277a70","date":1388851550,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ckb/SoraniAnalyzer#createComponents(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link SoraniNormalizationFilter}, \n   *         {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SoraniStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new SoraniNormalizationFilter(result);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SoraniStemFilter(result);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ckb/SoraniAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ckb/SoraniAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link SoraniNormalizationFilter}, \n   *         {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SoraniStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new SoraniNormalizationFilter(result);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SoraniStemFilter(result);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link SoraniNormalizationFilter}, \n   *         {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SoraniStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new SoraniNormalizationFilter(result);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SoraniStemFilter(result);\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4182da157d2684599ca46fec6e0ef59ff5277a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4182da157d2684599ca46fec6e0ef59ff5277a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"4182da157d2684599ca46fec6e0ef59ff5277a70":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4182da157d2684599ca46fec6e0ef59ff5277a70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}