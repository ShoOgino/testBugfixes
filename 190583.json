{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","commits":[{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) GeoUtils.relate(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon),\n            lat, lon, distanceSortKey, axisLat).ordinal();\n      }\n    }\n\n    return new DistancePredicate(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations,\n        lat, lon, distanceSortKey);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) GeoUtils.relate(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon),\n            lat, lon, distanceSortKey, axisLat).ordinal();\n      }\n    }\n\n    return new DistancePredicate(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations,\n        lat, lon, distanceSortKey);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","sourceNew":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final Function<Rectangle, Relation> boxToRelation = box -> GeoUtils.relate(\n        box.minLat, box.maxLat, box.minLon, box.maxLon, lat, lon, distanceSortKey, axisLat);\n    final Grid subBoxes = createSubBoxes(boundingBox, boxToRelation);\n\n    return new DistancePredicate(\n        subBoxes.latShift, subBoxes.lonShift,\n        subBoxes.latBase, subBoxes.lonBase,\n        subBoxes.maxLatDelta, subBoxes.maxLonDelta,\n        subBoxes.relations,\n        lat, lon, distanceSortKey);\n  }\n\n","sourceOld":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) GeoUtils.relate(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon),\n            lat, lon, distanceSortKey, axisLat).ordinal();\n      }\n    }\n\n    return new DistancePredicate(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations,\n        lat, lon, distanceSortKey);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#createDistancePredicate(double,double,double).mjava","sourceNew":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final Function<Rectangle, Relation> boxToRelation = box -> GeoUtils.relate(\n        box.minLat, box.maxLat, box.minLon, box.maxLon, lat, lon, distanceSortKey, axisLat);\n    final Grid subBoxes = createSubBoxes(boundingBox, boxToRelation);\n\n    return new DistancePredicate(\n        subBoxes.latShift, subBoxes.lonShift,\n        subBoxes.latBase, subBoxes.lonBase,\n        subBoxes.maxLatDelta, subBoxes.maxLonDelta,\n        subBoxes.relations,\n        lat, lon, distanceSortKey);\n  }\n\n","sourceOld":"  /** Create a predicate that checks whether points are within a distance of a given point.\n   *  It works by computing the bounding box around the circle that is defined\n   *  by the given points/distance and splitting it into between 1024 and 4096\n   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it\n   *  computes the relation between this box and the distance query. Finally at\n   *  search time, it first computes the sub box that the point belongs to,\n   *  most of the time, no distance computation will need to be performed since\n   *  all points from the sub box will either be in or out of the circle.\n   *  @lucene.internal */\n  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {\n    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);\n    final int minLat = encodeLatitudeCeil(boundingBox.minLat);\n    final int maxLat = encodeLatitude(boundingBox.maxLat);\n    final int minLon = encodeLongitudeCeil(boundingBox.minLon);\n    final int maxLon = encodeLongitude(boundingBox.maxLon);\n\n    final int latShift, lonShift;\n    final int latBase, lonBase;\n    final int maxLatDelta, maxLonDelta;\n    {\n      long minLat2 = (long) minLat - Integer.MIN_VALUE;\n      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;\n      latShift = computeShift(minLat2, maxLat2);\n      latBase = (int) (minLat2 >>> latShift);\n      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;\n      assert maxLatDelta > 0;\n    }\n    {\n      long minLon2 = (long) minLon - Integer.MIN_VALUE;\n      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;\n      if (boundingBox.crossesDateline()) {\n        maxLon2 += 1L << 32; // wrap\n      }\n      lonShift = computeShift(minLon2, maxLon2);\n      lonBase = (int) (minLon2 >>> lonShift);\n      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;\n      assert maxLonDelta > 0;\n    }\n\n    final double axisLat = Rectangle.axisLat(lat, radiusMeters);\n    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n    final byte[] relations = new byte[maxLatDelta * maxLonDelta];\n    for (int i = 0; i < maxLatDelta; ++i) {\n      for (int j = 0; j < maxLonDelta; ++j) {\n        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;\n        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;\n        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;\n        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;\n\n        relations[i * maxLonDelta + j] = (byte) GeoUtils.relate(\n            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),\n            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon),\n            lat, lon, distanceSortKey, axisLat).ordinal();\n      }\n    }\n\n    return new DistancePredicate(\n        latShift, lonShift,\n        latBase, lonBase,\n        maxLatDelta, maxLonDelta,\n        relations,\n        lat, lon, distanceSortKey);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}