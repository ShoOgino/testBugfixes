{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#[T]_storeConfigProperty(String,NamedList[Object],CfgProp,String,Function[Object,T],Class[T]).mjava","commits":[{"id":"a877077e0a22a42eebce7d1052c58e97d3afb12d","date":1405981118,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#[T]_storeConfigProperty(String,NamedList[Object],CfgProp,String,Function[Object,T],Class[T]).mjava","pathOld":"/dev/null","sourceNew":"  private <T> void storeConfigProperty(String section, NamedList<Object> config, CfgProp propertyKey, String name, Function<Object, T> valueTransformer, Class<T> clazz) {\n    List<Object> values = config.removeAll(name); \n    if (null != values && 0 != values.size()) {\n      if (1 < values.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                String.format(Locale.ROOT, \n                                              \"%s section of solr.xml contains duplicated '%s'\"+\n                                              \" in solr.xml: %s\", section, name, values));\n      } else {\n        Object value = values.get(0);\n        if (value != null) {\n          if (value.getClass().isAssignableFrom(clazz)) {\n            propMap.put(propertyKey, value);\n          } else {\n            propMap.put(propertyKey, valueTransformer.apply(value));\n          }\n        } else {\n          propMap.put(propertyKey, null);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#[T]_storeConfigProperty(String,NamedList[Object],CfgProp,String,Function[Object,T],Class[T]).mjava","sourceNew":null,"sourceOld":"  private <T> void storeConfigProperty(String section, NamedList<Object> config, CfgProp propertyKey, String name, Function<Object, T> valueTransformer, Class<T> clazz) {\n    List<Object> values = config.removeAll(name); \n    if (null != values && 0 != values.size()) {\n      if (1 < values.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                String.format(Locale.ROOT, \n                                              \"%s section of solr.xml contains duplicated '%s'\"+\n                                              \" in solr.xml: %s\", section, name, values));\n      } else {\n        Object value = values.get(0);\n        if (value != null) {\n          if (value.getClass().isAssignableFrom(clazz)) {\n            propMap.put(propertyKey, value);\n          } else {\n            propMap.put(propertyKey, valueTransformer.apply(value));\n          }\n        } else {\n          propMap.put(propertyKey, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#[T]_storeConfigProperty(String,NamedList[Object],CfgProp,String,Function[Object,T],Class[T]).mjava","sourceNew":null,"sourceOld":"  private <T> void storeConfigProperty(String section, NamedList<Object> config, CfgProp propertyKey, String name, Function<Object, T> valueTransformer, Class<T> clazz) {\n    List<Object> values = config.removeAll(name); \n    if (null != values && 0 != values.size()) {\n      if (1 < values.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                String.format(Locale.ROOT, \n                                              \"%s section of solr.xml contains duplicated '%s'\"+\n                                              \" in solr.xml: %s\", section, name, values));\n      } else {\n        Object value = values.get(0);\n        if (value != null) {\n          if (value.getClass().isAssignableFrom(clazz)) {\n            propMap.put(propertyKey, value);\n          } else {\n            propMap.put(propertyKey, valueTransformer.apply(value));\n          }\n        } else {\n          propMap.put(propertyKey, null);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a877077e0a22a42eebce7d1052c58e97d3afb12d","e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a877077e0a22a42eebce7d1052c58e97d3afb12d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}