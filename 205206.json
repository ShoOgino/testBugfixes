{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n            \n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 && \n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n              (SolrException.ErrorCode.SERVER_ERROR, \n               \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        \n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.RawCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\"})\n    public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext reader) throws IOException {\n      final FunctionValues amounts = amountValues.getValues(context, reader);\n      final FunctionValues currencies = currencyValues.getValues(context, reader);\n\n      return new FunctionValues() {\n        private static final int MAX_CURRENCIES_TO_CACHE = 256;\n        private final int[] fractionDigitCache = new int[MAX_CURRENCIES_TO_CACHE];\n        private final String[] currencyOrdToCurrencyCache = new String[MAX_CURRENCIES_TO_CACHE];\n        private final double[] exchangeRateCache = new double[MAX_CURRENCIES_TO_CACHE];\n        private int targetFractionDigits = -1;\n        private int targetCurrencyOrd = -1;\n        private boolean initializedCache;\n\n        private String getDocCurrencyCode(int doc, int currencyOrd) throws IOException {\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            String currency = currencyOrdToCurrencyCache[currencyOrd];\n\n            if (currency == null) {\n              currencyOrdToCurrencyCache[currencyOrd] = currency = currencies.strVal(doc);\n            }\n\n            if (currency == null) {\n              currency = defaultCurrency;\n            }\n\n            if (targetCurrencyOrd == -1 &&\n                currency.equals(targetCurrency.getCurrencyCode() )) {\n              targetCurrencyOrd = currencyOrd;\n            }\n\n            return currency;\n          } else {\n            return currencies.strVal(doc);\n          }\n        }\n        /** throws a (Server Error) SolrException if the code is not valid */\n        private Currency getDocCurrency(int doc, int currencyOrd) throws IOException {\n          String code = getDocCurrencyCode(doc, currencyOrd);\n          Currency c = getCurrency(code);\n          if (null == c) {\n            throw new SolrException\n                (SolrException.ErrorCode.SERVER_ERROR,\n                    \"Currency code of document is not supported by this JVM: \"+code);\n          }\n          return c;\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n\n        @Override\n        public long longVal(int doc) throws IOException {\n          long amount = amounts.longVal(doc);\n          // bail fast using whatever amounts defaults to if no value\n          // (if we don't do this early, currencyOrd may be < 0, \n          // causing index bounds exception\n          if ( ! exists(doc) ) {\n            return amount;\n          }\n\n          if (!initializedCache) {\n            for (int i = 0; i < fractionDigitCache.length; i++) {\n              fractionDigitCache[i] = -1;\n            }\n\n            initializedCache = true;\n          }\n\n          int currencyOrd = currencies.ordVal(doc);\n\n          if (currencyOrd == targetCurrencyOrd) {\n            return amount;\n          }\n\n          double exchangeRate;\n          int sourceFractionDigits;\n\n          if (targetFractionDigits == -1) {\n            targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n          }\n\n          if (currencyOrd < MAX_CURRENCIES_TO_CACHE) {\n            exchangeRate = exchangeRateCache[currencyOrd];\n\n            if (exchangeRate <= 0.0) {\n              String sourceCurrencyCode = getDocCurrencyCode(doc, currencyOrd);\n              exchangeRate = exchangeRateCache[currencyOrd] = provider.getExchangeRate(sourceCurrencyCode, targetCurrency.getCurrencyCode());\n            }\n\n            sourceFractionDigits = fractionDigitCache[currencyOrd];\n\n            if (sourceFractionDigits == -1) {\n              sourceFractionDigits = fractionDigitCache[currencyOrd] = getDocCurrency(doc, currencyOrd).getDefaultFractionDigits();\n            }\n          } else {\n            Currency source = getDocCurrency(doc, currencyOrd);\n            exchangeRate = provider.getExchangeRate(source.getCurrencyCode(), targetCurrency.getCurrencyCode());\n            sourceFractionDigits = source.getDefaultFractionDigits();\n          }\n\n          return CurrencyValue.convertAmount(exchangeRate, sourceFractionDigits, amount, targetFractionDigits);\n        }\n\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) longVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return (double) longVal(doc);\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return (float) longVal(doc);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Long.toString(longVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + amounts.toString(doc) + ',' + currencies.toString(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}