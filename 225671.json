{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    // TODO: Once we are on Java 9 replace this by java.util.Arrays#compareUnsigned()\n    // which is implemented by a Hotspot intrinsic! Also consider building a\n    // Multi-Release-JAR!\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n    \n    final int aStop = aUpto + Math.min(this.length, other.length);\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n\n      int diff = aByte - bByte;\n      if (diff != 0) {\n        return diff;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    // TODO: Once we are on Java 9 replace this by java.util.Arrays#compareUnsigned()\n    // which is implemented by a Hotspot intrinsic! Also consider building a\n    // Multi-Release-JAR!\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n    \n    final int aStop = aUpto + Math.min(this.length, other.length);\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n\n      int diff = aByte - bByte;\n      if (diff != 0) {\n        return diff;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return utf8SortedAsUnicodeSortOrder.compare(this, other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return FutureArrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length, \n                                        other.bytes, other.offset, other.offset + other.length);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    // TODO: Once we are on Java 9 replace this by java.util.Arrays#compareUnsigned()\n    // which is implemented by a Hotspot intrinsic! Also consider building a\n    // Multi-Release-JAR!\n    final byte[] aBytes = this.bytes;\n    int aUpto = this.offset;\n    final byte[] bBytes = other.bytes;\n    int bUpto = other.offset;\n    \n    final int aStop = aUpto + Math.min(this.length, other.length);\n    while(aUpto < aStop) {\n      int aByte = aBytes[aUpto++] & 0xff;\n      int bByte = bBytes[bUpto++] & 0xff;\n\n      int diff = aByte - bByte;\n      if (diff != 0) {\n        return diff;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#compareTo(BytesRef).mjava","sourceNew":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length, \n                                        other.bytes, other.offset, other.offset + other.length);\n  }\n\n","sourceOld":"  /** Unsigned byte order comparison */\n  @Override\n  public int compareTo(BytesRef other) {\n    return FutureArrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length, \n                                        other.bytes, other.offset, other.offset + other.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"af2638813028b254a88b418ebeafb541afb49653":["7530de27b87b961b51f01bd1299b7004d46e8823","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["af2638813028b254a88b418ebeafb541afb49653"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"af2638813028b254a88b418ebeafb541afb49653":["456d7e7092cb043c740b4674301660ee8abc26fe"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}