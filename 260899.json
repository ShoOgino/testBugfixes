{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#createDef(String,Group).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#createDef(String,Group).mjava","pathOld":"/dev/null","sourceNew":"  private RrdDef createDef(String registry, Group group) {\n    registry = SolrMetricManager.overridableRegistryName(registry);\n\n    // base sampling period is collectPeriod - samples more frequent than\n    // that will be dropped, samples less frequent will be interpolated\n    RrdDef def = new RrdDef(URI_PREFIX + registry, collectPeriod);\n    // set the start time early enough so that the first sample is always later\n    // than the start of the archive\n    def.setStartTime(TimeUnit.SECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS) - def.getStep());\n\n    // add datasources\n    List<Group> groups = new ArrayList<>();\n    groups.add(group);\n    if (group == Group.collection) {\n      groups.add(Group.core);\n    }\n    for (Group g : groups) {\n      // use NaN when more than 1 sample is missing\n      counters.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.COUNTER, collectPeriod * 2, Double.NaN, Double.NaN));\n      gauges.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN));\n    }\n    if (groups.contains(Group.node)) {\n      // add nomNodes gauge\n      def.addDatasource(NUM_NODES_KEY, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN);\n    }\n\n    // add archives\n\n    // use AVERAGE consolidation,\n    // use NaN when >50% samples are missing\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1, 240); // 4 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 10, 288); // 48 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 60, 336); // 2 weeks\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 240, 180); // 2 months\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1440, 365); // 1 year\n    return def;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#createDef(String,Group).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#createDef(String,Group).mjava","sourceNew":"  private RrdDef createDef(String registry, Group group) {\n    registry = SolrMetricManager.enforcePrefix(registry);\n\n    // base sampling period is collectPeriod - samples more frequent than\n    // that will be dropped, samples less frequent will be interpolated\n    RrdDef def = new RrdDef(URI_PREFIX + registry, collectPeriod);\n    // set the start time early enough so that the first sample is always later\n    // than the start of the archive\n    def.setStartTime(TimeUnit.SECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS) - def.getStep());\n\n    // add datasources\n    List<Group> groups = new ArrayList<>();\n    groups.add(group);\n    if (group == Group.collection) {\n      groups.add(Group.core);\n    }\n    for (Group g : groups) {\n      // use NaN when more than 1 sample is missing\n      counters.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.COUNTER, collectPeriod * 2, Double.NaN, Double.NaN));\n      gauges.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN));\n    }\n    if (groups.contains(Group.node)) {\n      // add nomNodes gauge\n      def.addDatasource(NUM_NODES_KEY, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN);\n    }\n\n    // add archives\n\n    // use AVERAGE consolidation,\n    // use NaN when >50% samples are missing\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1, 240); // 4 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 10, 288); // 48 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 60, 336); // 2 weeks\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 240, 180); // 2 months\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1440, 365); // 1 year\n    return def;\n  }\n\n","sourceOld":"  private RrdDef createDef(String registry, Group group) {\n    registry = SolrMetricManager.overridableRegistryName(registry);\n\n    // base sampling period is collectPeriod - samples more frequent than\n    // that will be dropped, samples less frequent will be interpolated\n    RrdDef def = new RrdDef(URI_PREFIX + registry, collectPeriod);\n    // set the start time early enough so that the first sample is always later\n    // than the start of the archive\n    def.setStartTime(TimeUnit.SECONDS.convert(timeSource.getEpochTimeNs(), TimeUnit.NANOSECONDS) - def.getStep());\n\n    // add datasources\n    List<Group> groups = new ArrayList<>();\n    groups.add(group);\n    if (group == Group.collection) {\n      groups.add(Group.core);\n    }\n    for (Group g : groups) {\n      // use NaN when more than 1 sample is missing\n      counters.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.COUNTER, collectPeriod * 2, Double.NaN, Double.NaN));\n      gauges.get(g.toString()).forEach(name ->\n          def.addDatasource(name, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN));\n    }\n    if (groups.contains(Group.node)) {\n      // add nomNodes gauge\n      def.addDatasource(NUM_NODES_KEY, DsType.GAUGE, collectPeriod * 2, Double.NaN, Double.NaN);\n    }\n\n    // add archives\n\n    // use AVERAGE consolidation,\n    // use NaN when >50% samples are missing\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1, 240); // 4 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 10, 288); // 48 hours\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 60, 336); // 2 weeks\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 240, 180); // 2 months\n    def.addArchive(ConsolFun.AVERAGE, 0.5, 1440, 365); // 1 year\n    return def;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}