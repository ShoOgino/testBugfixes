{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","commits":[{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","pathOld":"/dev/null","sourceNew":"    public T call() throws Exception {\n      try {\n        return inner.call();\n      } catch (InterruptedException ignored) {\n        log.warn(\"Callable interupted\", ignored);\n        throw ignored;\n      } catch (Throwable t) {\n        failCounter.incrementAndGet();\n        log.error(\"Callable failed\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76ebb8ccd9ce24bddddc5bec621183fdec375769","date":1552676813,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","sourceNew":"    public T call() throws Exception {\n      try {\n        return inner.call();\n      } catch (InterruptedException ignored) {\n        log.warn(\"Callable interupted\", ignored);\n        throw ignored;\n      } catch (Throwable t) {\n        // be forgiving of errors that occured as a result of interuption, even if\n        // the inner Callable didn't realize it...\n        if (Thread.currentThread().isInterrupted()) {\n          log.warn(\"Callable interupted w/o noticing\", t);\n          throw t;\n        }\n        Throwable cause = t;\n        while ((cause = cause.getCause()) != null) {\n          if (cause instanceof InterruptedException) {\n            log.warn(\"Callable threw wrapped InterruptedException\", t);\n            throw t;\n          }\n        }\n\n        // in all other situations, this is a problem that should be tracked in the failCounter\n        failCounter.incrementAndGet();\n        log.error(\"Callable failed\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    public T call() throws Exception {\n      try {\n        return inner.call();\n      } catch (InterruptedException ignored) {\n        log.warn(\"Callable interupted\", ignored);\n        throw ignored;\n      } catch (Throwable t) {\n        failCounter.incrementAndGet();\n        log.error(\"Callable failed\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager.LoggingCallable#call().mjava","sourceNew":"    public T call() throws Exception {\n      try {\n        return inner.call();\n      } catch (InterruptedException ignored) {\n        log.warn(\"Callable interupted\", ignored);\n        throw ignored;\n      } catch (Throwable t) {\n        // be forgiving of errors that occured as a result of interuption, even if\n        // the inner Callable didn't realize it...\n        if (Thread.currentThread().isInterrupted()) {\n          log.warn(\"Callable interrupted w/o noticing\", t);\n          throw t;\n        }\n        Throwable cause = t;\n        while ((cause = cause.getCause()) != null) {\n          if (cause instanceof InterruptedException) {\n            log.warn(\"Callable threw wrapped InterruptedException\", t);\n            throw t;\n          }\n        }\n\n        // in all other situations, this is a problem that should be tracked in the failCounter\n        failCounter.incrementAndGet();\n        log.error(\"Callable failed\", t);\n        throw t;\n      }\n    }\n\n","sourceOld":"    public T call() throws Exception {\n      try {\n        return inner.call();\n      } catch (InterruptedException ignored) {\n        log.warn(\"Callable interupted\", ignored);\n        throw ignored;\n      } catch (Throwable t) {\n        // be forgiving of errors that occured as a result of interuption, even if\n        // the inner Callable didn't realize it...\n        if (Thread.currentThread().isInterrupted()) {\n          log.warn(\"Callable interupted w/o noticing\", t);\n          throw t;\n        }\n        Throwable cause = t;\n        while ((cause = cause.getCause()) != null) {\n          if (cause instanceof InterruptedException) {\n            log.warn(\"Callable threw wrapped InterruptedException\", t);\n            throw t;\n          }\n        }\n\n        // in all other situations, this is a problem that should be tracked in the failCounter\n        failCounter.incrementAndGet();\n        log.error(\"Callable failed\", t);\n        throw t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76ebb8ccd9ce24bddddc5bec621183fdec375769":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["76ebb8ccd9ce24bddddc5bec621183fdec375769"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"76ebb8ccd9ce24bddddc5bec621183fdec375769":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["76ebb8ccd9ce24bddddc5bec621183fdec375769"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}