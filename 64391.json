{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","commits":[{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, IndexDocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(ValueType.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, IndexDocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(ValueType.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, IndexDocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(ValueType.BYTES_FIXED_SORTED, docValues, comp, mergeState);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["f9efc72acdea22f5285be0a808f8bba51bb8e367"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9efc72acdea22f5285be0a808f8bba51bb8e367","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}