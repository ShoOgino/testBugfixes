{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","commits":[{"id":"2bcd6a2cefce164763af175ff1accaf232439e8e","date":1527469335,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>graph</code>' is specified, and if so creates a <code>GraphField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createGraphField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryGraph = domainMap.get(\"graph\");\n        if (null != queryGraph) {\n          if (! (queryGraph instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> graph = (Map<String,String>) queryGraph;\n          if (! (graph.containsKey(\"from\") && graph.containsKey(\"to\") &&\n                 null != graph.get(\"from\") && null != graph.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          NamedList<String> graphParams = new NamedList<>();\n          graphParams.addAll(graph);\n          SolrParams localParams = SolrParams.toSolrParams(graphParams);\n          domain.graphField = new GraphField(localParams);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3baf591292785743bfb1fdd65256a3fe5feab71","date":1532454229,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>graph</code>' is specified, and if so creates a <code>GraphField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createGraphField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryGraph = domainMap.get(\"graph\");\n        if (null != queryGraph) {\n          if (! (queryGraph instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> graph = (Map<String,String>) queryGraph;\n          if (! (graph.containsKey(\"from\") && graph.containsKey(\"to\") &&\n                 null != graph.get(\"from\") && null != graph.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          domain.graphField = new GraphField(FacetParser.jsonToSolrParams(graph));\n        }\n      }\n\n","sourceOld":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>graph</code>' is specified, and if so creates a <code>GraphField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createGraphField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryGraph = domainMap.get(\"graph\");\n        if (null != queryGraph) {\n          if (! (queryGraph instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> graph = (Map<String,String>) queryGraph;\n          if (! (graph.containsKey(\"from\") && graph.containsKey(\"to\") &&\n                 null != graph.get(\"from\") && null != graph.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          NamedList<String> graphParams = new NamedList<>();\n          graphParams.addAll(graph);\n          SolrParams localParams = SolrParams.toSolrParams(graphParams);\n          domain.graphField = new GraphField(localParams);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.GraphField#createGraphField(FacetRequest.Domain,Map[String,Object]).mjava","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>graph</code>' is specified, and if so creates a <code>GraphField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createGraphField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryGraph = domainMap.get(\"graph\");\n        if (null != queryGraph) {\n          if (! (queryGraph instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          @SuppressWarnings({\"unchecked\"})\n          final Map<String,String> graph = (Map<String,String>) queryGraph;\n          if (! (graph.containsKey(\"from\") && graph.containsKey(\"to\") &&\n                 null != graph.get(\"from\") && null != graph.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          domain.graphField = new GraphField(FacetParser.jsonToSolrParams(graph));\n        }\n      }\n\n","sourceOld":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>graph</code>' is specified, and if so creates a <code>GraphField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createGraphField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryGraph = domainMap.get(\"graph\");\n        if (null != queryGraph) {\n          if (! (queryGraph instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> graph = (Map<String,String>) queryGraph;\n          if (! (graph.containsKey(\"from\") && graph.containsKey(\"to\") &&\n                 null != graph.get(\"from\") && null != graph.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'graph' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          domain.graphField = new GraphField(FacetParser.jsonToSolrParams(graph));\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["d3baf591292785743bfb1fdd65256a3fe5feab71"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3baf591292785743bfb1fdd65256a3fe5feab71":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["d3baf591292785743bfb1fdd65256a3fe5feab71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"d3baf591292785743bfb1fdd65256a3fe5feab71":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}