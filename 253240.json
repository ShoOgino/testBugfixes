{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#copy(File,File).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#copy(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#copy(File,File).mjava","sourceNew":"  /**\n   * Copies one file to another.\n   */\n  private static void copy(File file, File output) throws IOException {\n    // 64kb copy buffer (empirical pick).\n    byte [] buffer = new byte [16 * 1024];\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n      is = new FileInputStream(file);\n      os = new FileOutputStream(output);\n      int length;\n      while ((length = is.read(buffer)) > 0) {\n        os.write(buffer, 0, length);\n      }\n    } finally {\n      IOUtils.close(is, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies one file to another.\n   */\n  private static void copy(File file, File output) throws IOException {\n    // 64kb copy buffer (empirical pick).\n    byte [] buffer = new byte [16 * 1024];\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n      is = new FileInputStream(file);\n      os = new FileOutputStream(output);\n      int length;\n      while ((length = is.read(buffer)) > 0) {\n        os.write(buffer, 0, length);\n      }\n    } finally {\n      IOUtils.close(is, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#copy(File,File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#copy(File,File).mjava","sourceNew":"  /**\n   * Copies one file to another.\n   */\n  private static void copy(File file, File output) throws IOException {\n    // 64kb copy buffer (empirical pick).\n    byte [] buffer = new byte [16 * 1024];\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n      is = new FileInputStream(file);\n      os = new FileOutputStream(output);\n      int length;\n      while ((length = is.read(buffer)) > 0) {\n        os.write(buffer, 0, length);\n      }\n    } finally {\n      IOUtils.close(is, os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies one file to another.\n   */\n  private static void copy(File file, File output) throws IOException {\n    // 64kb copy buffer (empirical pick).\n    byte [] buffer = new byte [16 * 1024];\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n      is = new FileInputStream(file);\n      os = new FileOutputStream(output);\n      int length;\n      while ((length = is.read(buffer)) > 0) {\n        os.write(buffer, 0, length);\n      }\n    } finally {\n      IOUtils.close(is, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#copy(File,File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies one file to another.\n   */\n  private static void copy(File file, File output) throws IOException {\n    // 64kb copy buffer (empirical pick).\n    byte [] buffer = new byte [16 * 1024];\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n      is = new FileInputStream(file);\n      os = new FileOutputStream(output);\n      int length;\n      while ((length = is.read(buffer)) > 0) {\n        os.write(buffer, 0, length);\n      }\n    } finally {\n      IOUtils.close(is, os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}