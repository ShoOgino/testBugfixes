{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testListenerAcceptance().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testListenerAcceptance().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testListenerAcceptance().mjava","sourceNew":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.setProcessor(noFirstRunProcessor);\n\n      String newNode = cluster.simAddNode();\n\n      trigger.run(); // starts tracking live nodes\n\n      // stop the newly created node\n      cluster.simRemoveNode(newNode, false);\n\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the lost node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.setProcessor(noFirstRunProcessor);\n\n      String newNode = cluster.simAddNode();\n\n      trigger.run(); // starts tracking live nodes\n\n      // stop the newly created node\n      cluster.simRemoveNode(newNode, false);\n\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the lost node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testListenerAcceptance().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testListenerAcceptance() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.setProcessor(noFirstRunProcessor);\n\n      String newNode = cluster.simAddNode();\n\n      trigger.run(); // starts tracking live nodes\n\n      // stop the newly created node\n      cluster.simRemoveNode(newNode, false);\n\n      AtomicInteger callCount = new AtomicInteger(0);\n      AtomicBoolean fired = new AtomicBoolean(false);\n\n      trigger.setProcessor(event -> {\n        if (callCount.incrementAndGet() < 2) {\n          return false;\n        } else  {\n          fired.compareAndSet(false, true);\n          return true;\n        }\n      });\n\n      trigger.run(); // first run should detect the lost node and fire immediately but listener isn't ready\n      assertEquals(1, callCount.get());\n      assertFalse(fired.get());\n      trigger.run(); // second run should again fire\n      assertEquals(2, callCount.get());\n      assertTrue(fired.get());\n      trigger.run(); // should not fire\n      assertEquals(2, callCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}