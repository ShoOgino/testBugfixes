{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings(\"unchecked\") final FST.Arc<BytesRef>[] next = new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings(\"unchecked\") final FST.Arc<BytesRef>[] next = new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings(\"unchecked\") final FST.Arc<BytesRef>[] next = new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings(\"unchecked\") final FST.Arc<BytesRef>[] next = new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<BytesRef>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getArc(int).mjava","sourceNew":null,"sourceOld":"      private FST.Arc<BytesRef> getArc(int ord) {\n        if (ord >= arcs.length) {\n          @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final FST.Arc<BytesRef>[] next =\n            new FST.Arc[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(arcs, 0, next, 0, arcs.length);\n          for(int arcOrd=arcs.length;arcOrd<next.length;arcOrd++) {\n            next[arcOrd] = new FST.Arc<>();\n          }\n          arcs = next;\n        }\n        return arcs[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}