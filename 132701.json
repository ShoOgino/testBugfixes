{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, null, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq=NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32#testSorting(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestNumericTerms32#testSorting(int).mjava","sourceNew":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","sourceOld":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    // 10 random tests, the index order is ascending,\n    // so using a reverse sort field should retun descending documents\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["770342641f7b505eaa8dccdc666158bff2419109"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["770342641f7b505eaa8dccdc666158bff2419109","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["770342641f7b505eaa8dccdc666158bff2419109","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["770342641f7b505eaa8dccdc666158bff2419109"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}