{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":null,"sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","sourceNew":null,"sourceOld":"    public BinaryDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator(Bits).mjava","sourceNew":"    public BinaryDocValues iterator() {\n      return new BinaryDocValues() {\n\n        final BytesRef term = new BytesRef();\n        \n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToOffset.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToOffset.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator(Bits docsWithField) {\n      return new BinaryDocValues() {\n\n        final BytesRef term = new BytesRef();\n        \n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToOffset.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToOffset.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.BinaryDocValuesImpl#iterator(Bits).mjava","sourceNew":"    public BinaryDocValues iterator() {\n      return new BinaryDocValues() {\n\n        final BytesRef term = new BytesRef();\n        \n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToOffset.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToOffset.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","sourceOld":"    public BinaryDocValues iterator(Bits docsWithField) {\n      return new BinaryDocValues() {\n\n        final BytesRef term = new BytesRef();\n        \n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToOffset.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToOffset.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          final long pointer = docToOffset.get(docID);\n          if (pointer == 0) {\n            term.length = 0;\n          } else {\n            bytes.fill(term, pointer);\n          }\n          return term;\n        }   \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c066767cf781550d3a8f94fff30ed80464bc0ad"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","9856095f7afb5a607bf5e65077615ed91273508c","83870855d82aba6819217abeff5a40779dbb28b4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9c066767cf781550d3a8f94fff30ed80464bc0ad"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"83870855d82aba6819217abeff5a40779dbb28b4":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}