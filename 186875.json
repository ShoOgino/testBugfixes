{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","sourceNew":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(b.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = b.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else return makeChar(parseCharExp());\n  }\n\n","sourceOld":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(b.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = b.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else return makeChar(parseCharExp());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","sourceNew":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(originalString.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = originalString.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else return makeChar(parseCharExp());\n  }\n\n","sourceOld":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(b.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = b.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else return makeChar(parseCharExp());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074f544130034fba3e820179fe98defcf2e5c165","date":1589447065,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","sourceNew":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(originalString.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = originalString.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else {\n      RegExp predefined = matchPredefinedCharacterClass();\n      if (predefined != null) {\n        return predefined;\n      }\n      return makeChar(parseCharExp());\n    }\n  }\n\n","sourceOld":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(originalString.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = originalString.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else return makeChar(parseCharExp());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601","date":1594220892,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#parseSimpleExp().mjava","sourceNew":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar(flags);\n    else if (check(EMPTY) && match('#')) return makeEmpty(flags);\n    else if (check(ANYSTRING) && match('@')) return makeAnyString(flags);\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(flags, originalString.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(flags, \"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = originalString.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(flags, s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(flags, imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else {\n      RegExp predefined = matchPredefinedCharacterClass();\n      if (predefined != null) {\n        return predefined;\n      }\n      return makeChar(flags, parseCharExp());\n    }\n  }\n\n","sourceOld":"  final RegExp parseSimpleExp() throws IllegalArgumentException {\n    if (match('.')) return makeAnyChar();\n    else if (check(EMPTY) && match('#')) return makeEmpty();\n    else if (check(ANYSTRING) && match('@')) return makeAnyString();\n    else if (match('\"')) {\n      int start = pos;\n      while (more() && !peek(\"\\\"\"))\n        next();\n      if (!match('\"')) throw new IllegalArgumentException(\n          \"expected '\\\"' at position \" + pos);\n      return makeString(originalString.substring(start, pos - 1));\n    } else if (match('(')) {\n      if (match(')')) return makeString(\"\");\n      RegExp e = parseUnionExp();\n      if (!match(')')) throw new IllegalArgumentException(\n          \"expected ')' at position \" + pos);\n      return e;\n    } else if ((check(AUTOMATON) || check(INTERVAL)) && match('<')) {\n      int start = pos;\n      while (more() && !peek(\">\"))\n        next();\n      if (!match('>')) throw new IllegalArgumentException(\n          \"expected '>' at position \" + pos);\n      String s = originalString.substring(start, pos - 1);\n      int i = s.indexOf('-');\n      if (i == -1) {\n        if (!check(AUTOMATON)) throw new IllegalArgumentException(\n            \"interval syntax error at position \" + (pos - 1));\n        return makeAutomaton(s);\n      } else {\n        if (!check(INTERVAL)) throw new IllegalArgumentException(\n            \"illegal identifier at position \" + (pos - 1));\n        try {\n          if (i == 0 || i == s.length() - 1 || i != s.lastIndexOf('-')) throw new NumberFormatException();\n          String smin = s.substring(0, i);\n          String smax = s.substring(i + 1, s.length());\n          int imin = Integer.parseInt(smin);\n          int imax = Integer.parseInt(smax);\n          int digits;\n          if (smin.length() == smax.length()) digits = smin.length();\n          else digits = 0;\n          if (imin > imax) {\n            int t = imin;\n            imin = imax;\n            imax = t;\n          }\n          return makeInterval(imin, imax, digits);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\n              \"interval syntax error at position \" + (pos - 1));\n        }\n      }\n    } else {\n      RegExp predefined = matchPredefinedCharacterClass();\n      if (predefined != null) {\n        return predefined;\n      }\n      return makeChar(parseCharExp());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"074f544130034fba3e820179fe98defcf2e5c165":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["074f544130034fba3e820179fe98defcf2e5c165"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"]},"commit2Childs":{"074f544130034fba3e820179fe98defcf2e5c165":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["074f544130034fba3e820179fe98defcf2e5c165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}