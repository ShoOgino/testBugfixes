{"path":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","pathOld":"/dev/null","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n\n    while(true) {\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName();\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) break;\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"796f0d3bc33e21ecefaedc718af98547d2bfc355","date":1199548787,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n\n    while(true) {\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName();\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) break;\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"187b932e3f791668d245124e03d899af557d22df","date":1199907679,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"796f0d3bc33e21ecefaedc718af98547d2bfc355":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bd69280df0902763e47cb14745388ee17a2fb602":["187b932e3f791668d245124e03d899af557d22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"187b932e3f791668d245124e03d899af557d22df":["796f0d3bc33e21ecefaedc718af98547d2bfc355"]},"commit2Childs":{"796f0d3bc33e21ecefaedc718af98547d2bfc355":["187b932e3f791668d245124e03d899af557d22df"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["796f0d3bc33e21ecefaedc718af98547d2bfc355"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd69280df0902763e47cb14745388ee17a2fb602":[],"187b932e3f791668d245124e03d899af557d22df":["bd69280df0902763e47cb14745388ee17a2fb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd69280df0902763e47cb14745388ee17a2fb602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}