{"path":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","commits":[{"id":"740d1c1026cde7506b133f0518c3216f45babaec","date":1421114638,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f301899c86747eacd771aa67ca104bcf95c98e5","date":1422399616,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (brokenLocales.contains(Locale.getDefault().toString())) {\n      savedLocale = Locale.getDefault();\n      Locale.setDefault(Locale.US);\n    }\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":["57aea691bd25ee526c2064c85d0ba70c2584fcb6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57aea691bd25ee526c2064c85d0ba70c2584fcb6","date":1432708334,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    savedLocale = KerberosTestUtil.overrideLocaleIfNotSpportedByMiniKdc();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (brokenLocales.contains(Locale.getDefault().toString())) {\n      savedLocale = Locale.getDefault();\n      Locale.setDefault(Locale.US);\n    }\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":["3f301899c86747eacd771aa67ca104bcf95c98e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    savedLocale = KerberosTestUtil.overrideLocaleIfNotSpportedByMiniKdc();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    savedLocale = KerberosTestUtil.overrideLocaleIfNotSpportedByMiniKdc();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    savedLocale = KerberosTestUtil.overrideLocaleIfNotSpportedByMiniKdc();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"916c4f30c599fd1a0cab444932ac06ae8788dc57","date":1554300889,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    try (SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr\", false, true);\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/solr\", false, true);\n    } finally {\n      zkClient.close();\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    Path zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir().resolve(\"miniKdc\"));\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    try (SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr\", false, true);\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    String zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir() + File.separator + \"miniKdc\");\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    try (SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr\", false, true);\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SaslZkACLProviderTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (log.isInfoEnabled()) {\n      log.info(\"####SETUP_START {}\", getTestName());\n    }\n    createTempDir();\n\n    Path zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:{}\", zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir().resolve(\"miniKdc\"));\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    try (SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr\", false, true);\n    }\n    setupZNodes();\n\n    if (log.isInfoEnabled()) {\n      log.info(\"####SETUP_END {}\", getTestName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    Path zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new SaslZkTestServer(zkDir, createTempDir().resolve(\"miniKdc\"));\n    zkServer.run();\n\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    try (SolrZkClient zkClient = new SolrZkClientWithACLs(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr\", false, true);\n    }\n    setupZNodes();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f301899c86747eacd771aa67ca104bcf95c98e5":["740d1c1026cde7506b133f0518c3216f45babaec"],"57aea691bd25ee526c2064c85d0ba70c2584fcb6":["3f301899c86747eacd771aa67ca104bcf95c98e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"740d1c1026cde7506b133f0518c3216f45babaec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["916c4f30c599fd1a0cab444932ac06ae8788dc57"],"20be168d828ac40d262f85364d02f15b491dd88b":["57aea691bd25ee526c2064c85d0ba70c2584fcb6"],"916c4f30c599fd1a0cab444932ac06ae8788dc57":["20be168d828ac40d262f85364d02f15b491dd88b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["57aea691bd25ee526c2064c85d0ba70c2584fcb6","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["57aea691bd25ee526c2064c85d0ba70c2584fcb6","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"3f301899c86747eacd771aa67ca104bcf95c98e5":["57aea691bd25ee526c2064c85d0ba70c2584fcb6"],"57aea691bd25ee526c2064c85d0ba70c2584fcb6":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["740d1c1026cde7506b133f0518c3216f45babaec"],"740d1c1026cde7506b133f0518c3216f45babaec":["3f301899c86747eacd771aa67ca104bcf95c98e5"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"20be168d828ac40d262f85364d02f15b491dd88b":["916c4f30c599fd1a0cab444932ac06ae8788dc57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"916c4f30c599fd1a0cab444932ac06ae8788dc57":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}