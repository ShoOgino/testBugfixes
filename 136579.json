{"path":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Convinince method for getting back a simple XML string indicating\n   * successs of failure from an XML formated Update (from the Reader)\n   */\n  public void doLegacyUpdate(Reader input, Writer output) {\n    \n    try {\n      NamedList ignored = this.update( input );\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch( Exception ex ) {\n      try {\n        XML.writeXML(output,\"result\",SolrException.toStr(ex),\"status\",\"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \"+ee);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df50976d4ea9a982a25457464b1a588a6eafdbe","date":1176080089,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * successs or failure from an XML formated Update (from the Reader)\n   */\n  public void doLegacyUpdate(Reader input, Writer output) {\n    \n    try {\n      NamedList ignored = this.update( input );\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch( Exception ex ) {\n      try {\n        XML.writeXML(output,\"result\",SolrException.toStr(ex),\"status\",\"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \"+ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convinince method for getting back a simple XML string indicating\n   * successs of failure from an XML formated Update (from the Reader)\n   */\n  public void doLegacyUpdate(Reader input, Writer output) {\n    \n    try {\n      NamedList ignored = this.update( input );\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch( Exception ex ) {\n      try {\n        XML.writeXML(output,\"result\",SolrException.toStr(ex),\"status\",\"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \"+ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b27e1327d2a2f9ea6abc93e203d0219091f09f3","date":1183228826,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * successs or failure from an XML formated Update (from the Reader)\n   */\n  public void doLegacyUpdate(Reader input, Writer output) {\n    \n    try {\n      NamedList ignored = this.update( input );\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch( Exception ex ) {\n      try {\n        XML.writeXML(output,\"result\",SolrException.toStr(ex),\"status\",\"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \"+ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * successs or failure from an XML formated Update (from the Reader)\n   */\n  public void doLegacyUpdate(Reader input, Writer output) {\n    \n    try {\n      NamedList ignored = this.update( input );\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch( Exception ex ) {\n      try {\n        XML.writeXML(output,\"result\",SolrException.toStr(ex),\"status\",\"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \"+ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039ee26c484fda13f0428eeeb09969370ff9149","date":1183229536,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      this.update( req, SolrCore.getSolrCore(), input);\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      this.update( req, SolrCore.getSolrCore(), input);\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      this.update( req, SolrCore.getSolrCore(), input);\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(SolrCore,Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(SolrCore core, Reader input, Writer output) {\n    try {\n      //SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d87c7d5458d3212a9de0369bed8f93c740d7c28","date":1208372623,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorFactory processorFactory = core.getUpdateProcessorFactory( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166e7267ee953339ce7ff2febc91aee7576425f5","date":1218487056,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   * \n   * @deprecated Use\n   *             {@link #processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   * \n   * @deprecated Use\n   *             {@link #processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   * \n   * @deprecated Use\n   *             {@link #processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.severe(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Use\n   *             {@link XMLLoader#processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   * \n   * @since solr 1.2\n   * \n   * @deprecated Use\n   *             {@link #processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain( null );\n      \n      SolrParams params = new MapSolrParams( new HashMap<String, String>() );\n      SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      this.processUpdate( processor, parser );\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    } \n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"274a3126925f8c1899f85958fbee88ebec7f1b1b","date":1229915005,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Use {@link XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream)} instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Use\n   *             {@link XMLLoader#processUpdate(UpdateRequestProcessor, XMLStreamReader)}\n   *             instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af0288a4b04e6709c6c9f212269928d85812dd0","date":1229915499,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Use {@link XMLLoader#load(SolrQueryRequest,SolrQueryResponse,ContentStream)} instead.\n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["6589002090bd74db749eef5befe2f447c0e3dd49"],"4039ee26c484fda13f0428eeeb09969370ff9149":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"166e7267ee953339ce7ff2febc91aee7576425f5":["d656bfb8102419b4568f368a9606efc4f059912e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2af0288a4b04e6709c6c9f212269928d85812dd0":["274a3126925f8c1899f85958fbee88ebec7f1b1b"],"d656bfb8102419b4568f368a9606efc4f059912e":["4d87c7d5458d3212a9de0369bed8f93c740d7c28"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["6d6338c87060be5f66757a94945975f3bbd377a9"],"274a3126925f8c1899f85958fbee88ebec7f1b1b":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["166e7267ee953339ce7ff2febc91aee7576425f5"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d87c7d5458d3212a9de0369bed8f93c740d7c28":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"6589002090bd74db749eef5befe2f447c0e3dd49":["4039ee26c484fda13f0428eeeb09969370ff9149"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["1df50976d4ea9a982a25457464b1a588a6eafdbe"],"ad94625fb8d088209f46650c8097196fec67f00c":["2af0288a4b04e6709c6c9f212269928d85812dd0"],"1df50976d4ea9a982a25457464b1a588a6eafdbe":["d80013b5e260def972025c93a0b08524f9c38f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"4039ee26c484fda13f0428eeeb09969370ff9149":["6589002090bd74db749eef5befe2f447c0e3dd49"],"166e7267ee953339ce7ff2febc91aee7576425f5":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"d656bfb8102419b4568f368a9606efc4f059912e":["166e7267ee953339ce7ff2febc91aee7576425f5"],"2af0288a4b04e6709c6c9f212269928d85812dd0":["ad94625fb8d088209f46650c8097196fec67f00c"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["4d87c7d5458d3212a9de0369bed8f93c740d7c28"],"274a3126925f8c1899f85958fbee88ebec7f1b1b":["2af0288a4b04e6709c6c9f212269928d85812dd0"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["274a3126925f8c1899f85958fbee88ebec7f1b1b"],"d80013b5e260def972025c93a0b08524f9c38f49":["1df50976d4ea9a982a25457464b1a588a6eafdbe"],"4d87c7d5458d3212a9de0369bed8f93c740d7c28":["d656bfb8102419b4568f368a9606efc4f059912e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6589002090bd74db749eef5befe2f447c0e3dd49":["6d6338c87060be5f66757a94945975f3bbd377a9"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["4039ee26c484fda13f0428eeeb09969370ff9149"],"1df50976d4ea9a982a25457464b1a588a6eafdbe":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}