{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","commits":[{"id":"4314572632992208f57e8ad8a87168337d3ef3a1","date":1376586288,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7d215f266ffde522863d265557253945d48c672","date":1456154575,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    System.setProperty(\"solr.tests.mergePolicy\", LogDocMergePolicy.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicy(LogDocMergePolicy.class.getName());\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    System.setProperty(\"solr.cloud.client.pollQueueTime\", \"2000\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n    System.setProperty(\"solr.cloud.client.pollQueueTime\", \"2000\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // we can't use the Randomized merge policy because the test depends on\n    // being able to call optimize to have all deletes expunged.\n    systemSetPropertySolrTestsMergePolicyFactory(LogDocMergePolicyFactory.class.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["419a8f52c6635419beb951255cacbbb281044c57","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["28288370235ed02234a64753cdbf0c6ec096304a"],"d7d215f266ffde522863d265557253945d48c672":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a229cb50768e988c50a2106bdae3a92154f428bf":["28288370235ed02234a64753cdbf0c6ec096304a","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["4314572632992208f57e8ad8a87168337d3ef3a1"],"4314572632992208f57e8ad8a87168337d3ef3a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4314572632992208f57e8ad8a87168337d3ef3a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","d7d215f266ffde522863d265557253945d48c672"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["419a8f52c6635419beb951255cacbbb281044c57"],"28288370235ed02234a64753cdbf0c6ec096304a":["419a8f52c6635419beb951255cacbbb281044c57","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7d215f266ffde522863d265557253945d48c672":["419a8f52c6635419beb951255cacbbb281044c57"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["d7d215f266ffde522863d265557253945d48c672","419a8f52c6635419beb951255cacbbb281044c57"],"4314572632992208f57e8ad8a87168337d3ef3a1":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4314572632992208f57e8ad8a87168337d3ef3a1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"419a8f52c6635419beb951255cacbbb281044c57":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["482ca6c86d7073e3c19096bdc74fe0e73da4554a","a229cb50768e988c50a2106bdae3a92154f428bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a229cb50768e988c50a2106bdae3a92154f428bf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}