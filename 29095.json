{"path":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","sourceOld":"  /**\n   * Compute the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public float computeNorm(String field, FieldInvertState state) {\n    return (state.getBoost() * lengthNorm(field, state.getLength()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @lucene.experimental\n   * \n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(FieldInvertState state);\n\n","sourceOld":"  /**\n   * Computes the normalization value for a field, given the accumulated\n   * state of term processing for this field (see {@link FieldInvertState}).\n   * \n   * <p>Implementations should calculate a float value based on the field\n   * state and then return that value.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>state.getLength()</code> is large,\n   * and larger values when <code>state.getLength()</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * <p>For backward compatibility this method by default calls\n   * {@link #lengthNorm(String, int)} passing\n   * {@link FieldInvertState#getLength()} as the second argument, and\n   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>\n   * \n   * @lucene.experimental\n   * \n   * @param field field name\n   * @param state current processing state for this field\n   * @return the calculated float norm\n   */\n  public abstract float computeNorm(String field, FieldInvertState state);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"3e00f80591de714c6975f454e33e0fa5218b5902":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["3e00f80591de714c6975f454e33e0fa5218b5902"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"3e00f80591de714c6975f454e33e0fa5218b5902":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3e00f80591de714c6975f454e33e0fa5218b5902","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}