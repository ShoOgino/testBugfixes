{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065f36185d91a7d825ce7adac5b0d8df5cb4f73f","date":1461251676,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoPointField.decodeLongitude(start);\n    final double minLat = GeoPointField.decodeLatitude(start);\n    final double maxLon = GeoPointField.decodeLongitude(end);\n    final double maxLat = GeoPointField.decodeLatitude(end);\n\n    final short level = (short)((BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoPointField.decodeLongitude(start);\n    final double minLat = GeoPointField.decodeLatitude(start);\n    final double maxLon = GeoPointField.decodeLongitude(end);\n    final double maxLat = GeoPointField.decodeLatitude(end);\n\n    final short level = (short)((BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be46ccf1a05985ba9fec84cb8674b607a23d5442","date":1465576866,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":null,"sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoPointField.decodeLongitude(start);\n    final double minLat = GeoPointField.decodeLatitude(start);\n    final double maxLon = GeoPointField.decodeLongitude(end);\n    final double maxLat = GeoPointField.decodeLatitude(end);\n\n    final short level = (short)((BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":null,"sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoPointField.decodeLongitude(start);\n    final double minLat = GeoPointField.decodeLatitude(start);\n    final double maxLon = GeoPointField.decodeLongitude(end);\n    final double maxLat = GeoPointField.decodeLatitude(end);\n\n    final short level = (short)((BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLat, maxLat, minLon, maxLon);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLat, maxLat, minLon, maxLon))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLat, maxLat, minLon, maxLon)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["ec996bf2daff09d61a876319e8fae4aebbea58e3","065f36185d91a7d825ce7adac5b0d8df5cb4f73f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","be46ccf1a05985ba9fec84cb8674b607a23d5442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be46ccf1a05985ba9fec84cb8674b607a23d5442"]},"commit2Childs":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["065f36185d91a7d825ce7adac5b0d8df5cb4f73f","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["be46ccf1a05985ba9fec84cb8674b607a23d5442","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}