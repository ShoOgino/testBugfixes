{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateWithTrust().mjava","commits":[{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateWithTrust().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateWithTrust() throws Exception {\n    String configsetName = \"regular\";\n    String configsetSuffix = \"testCreateWithTrust\";\n    String configsetSuffix2 = \"testCreateWithTrust2\";\n    uploadConfigSetWithAssertions(configsetName, configsetSuffix, \"solr\");\n    uploadConfigSetWithAssertions(configsetName, configsetSuffix2, null);\n    try (SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n            AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n      assertFalse(isTrusted(zkClient, configsetName, configsetSuffix2));\n      try {\n        ignoreException(\"unauthenticated request\");\n        // trusted -> unstrusted\n        createConfigSet(configsetName + configsetSuffix, \"foo\", Collections.emptyMap(), cluster.getSolrClient(), null);\n        fail(\"Expecting exception\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.UNAUTHORIZED.code, e.code());\n        unIgnoreException(\"unauthenticated request\");\n      }\n      // trusted -> trusted\n      verifyCreate(configsetName + configsetSuffix, \"foo2\", Collections.emptyMap(), Collections.emptyMap(), \"solr\");\n      assertTrue(isTrusted(zkClient, \"foo2\", \"\"));\n\n      // unstrusted -> unstrusted\n      verifyCreate(configsetName + configsetSuffix2, \"bar\", Collections.emptyMap(), Collections.emptyMap(), null);\n      assertFalse(isTrusted(zkClient, \"bar\", \"\"));\n\n      // unstrusted -> trusted\n      verifyCreate(configsetName + configsetSuffix2, \"bar2\", Collections.emptyMap(), Collections.emptyMap(), \"solr\");\n      assertFalse(isTrusted(zkClient, \"bar2\", \"\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01ee5edcdd3cffaab03842feda0c26516290698":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"]},"commit2Childs":{"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c01ee5edcdd3cffaab03842feda0c26516290698"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}