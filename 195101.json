{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.keySet().forEach(name -> {\n        try {\n          cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(name), true, true);\n        } catch (Exception e) {\n          log.error(\"Unable to delete collection state.json\");\n        }\n      });\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":null,"sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.keySet().forEach(name -> {\n        try {\n          cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.getCollectionPath(name), true, true);\n        } catch (Exception e) {\n          log.error(\"Unable to delete collection state.json\");\n        }\n      });\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["3f504512a03d978990cbff30db0522b354e846db"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}