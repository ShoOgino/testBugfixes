{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","pathOld":"/dev/null","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#build(double,double,int,List[Node],StringBuilder,Shape,int).mjava","sourceNew":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","sourceOld":"  private void build(\n      double x,\n      double y,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    // Z-Order\n    // http://en.wikipedia.org/wiki/Z-order_%28curve%29\n    checkBattenberg('A', x - w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('B', x + w, y + h, level, matches, str, shape, maxLevel);\n    checkBattenberg('C', x - w, y - h, level, matches, str, shape, maxLevel);\n    checkBattenberg('D', x + w, y - h, level, matches, str, shape, maxLevel);\n\n    // possibly consider hilbert curve\n    // http://en.wikipedia.org/wiki/Hilbert_curve\n    // http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\n    // if we actually use the range property in the query, this could be useful\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}