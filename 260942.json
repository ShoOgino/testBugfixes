{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","commits":[{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    Path snapDir = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\").iterator().next();\n    verify(snapDir, nDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d32699b9d6d5982ddfd5f25843ae42adf37c22c","date":1424850267,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    Path snapDir = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\").iterator().next();\n    verify(snapDir, nDocs);\n  }\n\n","bugFix":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    Path snapDir = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\").iterator().next();\n    verify(snapDir, nDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs(masterClient);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs(masterClient);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs();\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(masterClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient, DEFAULT_TEST_CORENAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs(masterClient);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(masterClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient, DEFAULT_TEST_CORENAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = indexDocs(masterClient);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(masterClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n\n    final String lastBackupDir = backupStatus.checkBackupSuccess();\n    // sanity check no backups yet\n    assertNull(\"Already have a successful backup\",\n               lastBackupDir);\n    \n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(masterClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n    \n    final String newBackupDir = backupStatus.waitForDifferentBackupDir(lastBackupDir, 30);\n    //Validate\n    verify(Paths.get(master.getDataDir(), newBackupDir), nDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(masterClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n\n    //Confirm if completed\n    CheckBackupStatus checkBackupStatus = new CheckBackupStatus((HttpSolrClient) masterClient, DEFAULT_TEST_CORENAME);\n    while (!checkBackupStatus.success) {\n      checkBackupStatus.fetchStatus();\n      Thread.sleep(1000);\n    }\n\n    //Validate\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(master.getDataDir()), \"snapshot*\")) {\n      Path snapDir = stream.iterator().next();\n      verify(snapDir, nDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testBackupOnCommit().mjava","sourceNew":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(leaderClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n\n    final String lastBackupDir = backupStatus.checkBackupSuccess();\n    // sanity check no backups yet\n    assertNull(\"Already have a successful backup\",\n               lastBackupDir);\n    \n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(leaderClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n    \n    final String newBackupDir = backupStatus.waitForDifferentBackupDir(lastBackupDir, 30);\n    //Validate\n    verify(Paths.get(leader.getDataDir(), newBackupDir), nDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testBackupOnCommit() throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(masterClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n\n    final String lastBackupDir = backupStatus.checkBackupSuccess();\n    // sanity check no backups yet\n    assertNull(\"Already have a successful backup\",\n               lastBackupDir);\n    \n    //Index\n    int nDocs = BackupRestoreUtils.indexDocs(masterClient, DEFAULT_TEST_COLLECTION_NAME, docsSeed);\n    \n    final String newBackupDir = backupStatus.waitForDifferentBackupDir(lastBackupDir, 30);\n    //Validate\n    verify(Paths.get(master.getDataDir(), newBackupDir), nDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b13106276bb5ea342253dbf6aae7b675adb38d3","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d32699b9d6d5982ddfd5f25843ae42adf37c22c"],"9d32699b9d6d5982ddfd5f25843ae42adf37c22c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}