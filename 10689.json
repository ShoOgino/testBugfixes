{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","pathOld":"/dev/null","sourceNew":"   private StorageCoreController()throws IOException, StorageException{ \n       this(null); \n   } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","sourceNew":"    /**\n     * Creates a new <tt>StoragCoreController</tt> and sets up the storage\n     * environment reading the configuration file.\n     * \n     * \n     * \n     * @throws IOException -\n     *             if an IOException occures\n     * @throws StorageException -\n     *             if the storage lock can not be created or the\n     *             {@link IDGenerator} can not be loaded\n     */\n    public StorageCoreController() throws IOException, StorageException {\n        synchronized (StorageCoreController.class) {\n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n            this.configurator = StorageConfigurator.getStorageConfigurator();\n            if (!this.configurator.isRamDirectory()) {\n\n                String storageDirPath = this.configurator.getStorageDirectory();\n                File storeDir = new File(storageDirPath);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + storageDirPath);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw e;\n                }\n                this.indexOptimizeInterval = this.configurator\n                        .getIndexOptimizeInterval();\n                this.storageBufferSize = this.configurator\n                        .getStorageBufferSize() < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.configurator.getStorageBufferSize();\n                this.storagePersistFactor = this.configurator\n                        .getStoragepersistFactor() < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.configurator.getStoragepersistFactor();\n\n            } else\n                this.storageDir = getRamDirectory();\n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n//            this.recoverController = new RecoverController(null,this.configurator.isRecover(),this.configurator.isKeepRecoveredFiles());\n            if(createNewStorage)\n                createAdminAccount();\n\n        }\n\n    }\n\n","sourceOld":"   private StorageCoreController()throws IOException, StorageException{ \n       this(null); \n   } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","sourceNew":"    /**\n     * Creates a new <tt>StoragCoreController</tt> and sets up the storage\n     * environment reading the configuration file.\n     * \n     * \n     * \n     * @throws IOException -\n     *             if an IOException occures\n     * @throws StorageException -\n     *             if the storage lock can not be created or the\n     *             {@link IDGenerator} can not be loaded\n     */\n    public StorageCoreController() throws IOException, StorageException {\n        synchronized (StorageCoreController.class) {\n        \tthis.closeCondition = this.storageControllerLock.newCondition();\n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n            this.configurator = StorageConfigurator.getStorageConfigurator();\n            if (!this.configurator.isRamDirectory()) {\n\n                String storageDirPath = this.configurator.getStorageDirectory();\n                File storeDir = new File(storageDirPath);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + storageDirPath);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw e;\n                }\n                this.indexOptimizeInterval = this.configurator\n                        .getIndexOptimizeInterval();\n                this.storageBufferSize = this.configurator\n                        .getStorageBufferSize() < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.configurator.getStorageBufferSize();\n                this.storagePersistFactor = this.configurator\n                        .getStoragepersistFactor() < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.configurator.getStoragepersistFactor();\n\n            } else\n                this.storageDir = getRamDirectory();\n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n//            this.recoverController = new RecoverController(null,this.configurator.isRecover(),this.configurator.isKeepRecoveredFiles());\n            if(createNewStorage)\n                createAdminAccount();\n\n        }\n\n    }\n\n","sourceOld":"    /**\n     * Creates a new <tt>StoragCoreController</tt> and sets up the storage\n     * environment reading the configuration file.\n     * \n     * \n     * \n     * @throws IOException -\n     *             if an IOException occures\n     * @throws StorageException -\n     *             if the storage lock can not be created or the\n     *             {@link IDGenerator} can not be loaded\n     */\n    public StorageCoreController() throws IOException, StorageException {\n        synchronized (StorageCoreController.class) {\n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n            this.configurator = StorageConfigurator.getStorageConfigurator();\n            if (!this.configurator.isRamDirectory()) {\n\n                String storageDirPath = this.configurator.getStorageDirectory();\n                File storeDir = new File(storageDirPath);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + storageDirPath);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw e;\n                }\n                this.indexOptimizeInterval = this.configurator\n                        .getIndexOptimizeInterval();\n                this.storageBufferSize = this.configurator\n                        .getStorageBufferSize() < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.configurator.getStorageBufferSize();\n                this.storagePersistFactor = this.configurator\n                        .getStoragepersistFactor() < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.configurator.getStoragepersistFactor();\n\n            } else\n                this.storageDir = getRamDirectory();\n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n//            this.recoverController = new RecoverController(null,this.configurator.isRecover(),this.configurator.isKeepRecoveredFiles());\n            if(createNewStorage)\n                createAdminAccount();\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","sourceNew":"    /**\n     * Creates a new <tt>StoragCoreController</tt>\n     */\n    public StorageCoreController() {\n        this.closeCondition = this.storageControllerLock.newCondition();\n        this.storageLock = SingleHostConcurrentStorageLock.getConcurrentStorageLock();\n\n    }\n\n","sourceOld":"    /**\n     * Creates a new <tt>StoragCoreController</tt> and sets up the storage\n     * environment reading the configuration file.\n     * \n     * \n     * \n     * @throws IOException -\n     *             if an IOException occures\n     * @throws StorageException -\n     *             if the storage lock can not be created or the\n     *             {@link IDGenerator} can not be loaded\n     */\n    public StorageCoreController() throws IOException, StorageException {\n        synchronized (StorageCoreController.class) {\n        \tthis.closeCondition = this.storageControllerLock.newCondition();\n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n            this.configurator = StorageConfigurator.getStorageConfigurator();\n            if (!this.configurator.isRamDirectory()) {\n\n                String storageDirPath = this.configurator.getStorageDirectory();\n                File storeDir = new File(storageDirPath);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + storageDirPath);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw e;\n                }\n                this.indexOptimizeInterval = this.configurator\n                        .getIndexOptimizeInterval();\n                this.storageBufferSize = this.configurator\n                        .getStorageBufferSize() < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.configurator.getStorageBufferSize();\n                this.storagePersistFactor = this.configurator\n                        .getStoragepersistFactor() < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.configurator.getStoragepersistFactor();\n\n            } else\n                this.storageDir = getRamDirectory();\n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n//            this.recoverController = new RecoverController(null,this.configurator.isRecover(),this.configurator.isKeepRecoveredFiles());\n            if(createNewStorage)\n                createAdminAccount();\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#StorageCoreController().mjava","sourceNew":"    /**\n     * Creates a new <tt>StoragCoreController</tt>\n     */\n    public StorageCoreController() {\n        this.closeCondition = this.storageControllerLock.newCondition();\n        this.storageLock = SingleHostConcurrentStorageLock.getConcurrentStorageLock();\n\n    }\n\n","sourceOld":"    /**\n     * Creates a new <tt>StoragCoreController</tt>\n     */\n    public StorageCoreController() {\n        this.closeCondition = this.storageControllerLock.newCondition();\n        this.storageLock = SingleHostConcurrentStorageLock.getConcurrentStorageLock();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["52754a40a1550056d5637c8992b4076b5ed77328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}