{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","commits":[{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static CompositeIndexReader openIfChanged(CompositeIndexReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final CompositeIndexReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link org.apache.lucene.store.AlreadyClosedException}.</p>\n   *\n   * @return DirectoryReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link org.apache.lucene.store.AlreadyClosedException}.</p>\n   *\n   * @return DirectoryReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader openIfChanged(IndexReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link org.apache.lucene.store.AlreadyClosedException}.</p>\n   *\n   * @return DirectoryReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * Expert: If there changes (committed or not) in the\n   * {@link IndexWriter} versus what the provided reader is\n   * searching, then open and return a new\n   * IndexReader searching both committed and uncommitted\n   * changes from the writer; else, return null (though, the\n   * current implementation never returns null).\n   *\n   * <p>This provides \"near real-time\" searching, in that\n   * changes made during an {@link IndexWriter} session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link IndexWriter#commit}.\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link IndexWriterConfig#setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far.</p>\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link org.apache.lucene.store.AlreadyClosedException}.</p>\n   *\n   * @return DirectoryReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance, or\n   * null if there are no new changes\n   *\n   * @param writer The IndexWriter to open from\n   *\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @throws IOException\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader openIfChanged(DirectoryReader oldReader, IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged(writer, applyAllDeletes);\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893d07555f01912f57b453a320e4d46363a31b50","5cab9a86bd67202d20b6adc463008c8e982b070a"],"893d07555f01912f57b453a320e4d46363a31b50":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}