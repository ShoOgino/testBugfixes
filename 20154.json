{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","commits":[{"id":"d1d231959c9d0545adc421b7a2fefa7db47300d8","date":1472269133,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["685af99397b6da31116a2cac747ed255d217d080","685af99397b6da31116a2cac747ed255d217d080"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitAfterFailedSplit().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","sourceNew":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","sourceOld":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitAfterFailedSplit().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitAfterFailedSplit().mjava","sourceNew":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","sourceOld":"  /**\n   * Used to test that we can split a shard when a previous split event\n   * left sub-shards in construction or recovery state.\n   *\n   * See SOLR-9439\n   */\n  @Test\n  public void testSplitAfterFailedSplit() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    TestInjection.splitFailureBeforeReplicaCreation = \"true:100\"; // we definitely want split to fail\n    try {\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        fail(\"Shard split was not supposed to succeed after failure injection!\");\n      } catch (Exception e) {\n        // expected\n      }\n\n      // assert that sub-shards cores exist and sub-shard is in construction state\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      ClusterState state = zkStateReader.getClusterState();\n      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n      Slice shard10 = collection.getSlice(SHARD1_0);\n      assertEquals(Slice.State.CONSTRUCTION, shard10.getState());\n      assertEquals(1, shard10.getReplicas().size());\n\n      Slice shard11 = collection.getSlice(SHARD1_1);\n      assertEquals(Slice.State.CONSTRUCTION, shard11.getState());\n      assertEquals(1, shard11.getReplicas().size());\n\n      // lets retry the split\n      TestInjection.reset(); // let the split succeed\n      try {\n        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n        splitShard.setShardName(SHARD1);\n        splitShard.process(cloudClient);\n        // Yay!\n      } catch (Exception e) {\n        log.error(\"Shard split failed\", e);\n        fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n      }\n\n    } finally {\n      TestInjection.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d1d231959c9d0545adc421b7a2fefa7db47300d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1d231959c9d0545adc421b7a2fefa7db47300d8"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d1d231959c9d0545adc421b7a2fefa7db47300d8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1d231959c9d0545adc421b7a2fefa7db47300d8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}