{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/OrdinalMappingAtomicReader.OrdinalMappingBinaryDocValues#get(int,BytesRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/OrdinalMappingAtomicReader.OrdinalMappingBinaryDocValues#get(int,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void get(int docID, BytesRef result) {\n      // NOTE: this isn't quite koscher, because in general\n      // multiple threads can call BinaryDV.get which would\n      // then conflict on the single scratch instance, but\n      // because this impl is only used for merging, we know\n      // only 1 thread calls us:\n      delegate.get(docID, scratch);\n      if (scratch.length > 0) {\n        // We must use scratch (and not re-use result) here,\n        // else encoder may overwrite the DV provider's\n        // private byte[]:\n        decoder.decode(scratch, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, result);\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void get(int docID, BytesRef result) {\n      // NOTE: this isn't quite koscher, because in general\n      // multiple threads can call BinaryDV.get which would\n      // then conflict on the single scratch instance, but\n      // because this impl is only used for merging, we know\n      // only 1 thread calls us:\n      delegate.get(docID, scratch);\n      if (scratch.length > 0) {\n        // We must use scratch (and not re-use result) here,\n        // else encoder may overwrite the DV provider's\n        // private byte[]:\n        decoder.decode(scratch, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/OrdinalMappingAtomicReader.OrdinalMappingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void get(int docID, BytesRef result) {\n      // NOTE: this isn't quite koscher, because in general\n      // multiple threads can call BinaryDV.get which would\n      // then conflict on the single scratch instance, but\n      // because this impl is only used for merging, we know\n      // only 1 thread calls us:\n      delegate.get(docID, scratch);\n      if (scratch.length > 0) {\n        // We must use scratch (and not re-use result) here,\n        // else encoder may overwrite the DV provider's\n        // private byte[]:\n        decoder.decode(scratch, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/OrdinalMappingAtomicReader.OrdinalMappingBinaryDocValues#get(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void get(int docID, BytesRef result) {\n      // NOTE: this isn't quite koscher, because in general\n      // multiple threads can call BinaryDV.get which would\n      // then conflict on the single scratch instance, but\n      // because this impl is only used for merging, we know\n      // only 1 thread calls us:\n      delegate.get(docID, scratch);\n      if (scratch.length > 0) {\n        // We must use scratch (and not re-use result) here,\n        // else encoder may overwrite the DV provider's\n        // private byte[]:\n        decoder.decode(scratch, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, result);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}