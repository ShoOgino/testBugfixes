{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","pathOld":"/dev/null","sourceNew":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (String updateType: versions.keySet()) {\n      condensed.add(updateType, versions.get(updateType));\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","sourceNew":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (Map.Entry<String, NamedList> entry : versions.entrySet()) {\n      condensed.add(entry.getKey(), entry.getValue());\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","sourceOld":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (String updateType: versions.keySet()) {\n      condensed.add(updateType, versions.get(updateType));\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","sourceNew":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (Map.Entry<String, NamedList> entry : versions.entrySet()) {\n      condensed.add(entry.getKey(), entry.getValue());\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","sourceOld":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (String updateType: versions.keySet()) {\n      condensed.add(updateType, versions.get(updateType));\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#[T-extends-RouteResponse]_condenseResponse(NamedList,int,Supplier[T]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (Map.Entry<String, NamedList> entry : versions.entrySet()) {\n      condensed.add(entry.getKey(), entry.getValue());\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","sourceOld":"  protected <T extends RouteResponse> T condenseResponse(NamedList response, int timeMillis, Supplier<T> supplier) {\n    T condensed = supplier.get();\n    int status = 0;\n    Integer rf = null;\n    Integer minRf = null;\n\n    // TolerantUpdateProcessor\n    List<SimpleOrderedMap<String>> toleratedErrors = null;\n    int maxToleratedErrors = Integer.MAX_VALUE;\n\n    // For \"adds\", \"deletes\", \"deleteByQuery\" etc.\n    Map<String, NamedList> versions = new HashMap<>();\n\n    for(int i=0; i<response.size(); i++) {\n      NamedList shardResponse = (NamedList)response.getVal(i);\n      NamedList header = (NamedList)shardResponse.get(\"responseHeader\");\n      Integer shardStatus = (Integer)header.get(\"status\");\n      int s = shardStatus.intValue();\n      if(s > 0) {\n        status = s;\n      }\n      Object rfObj = header.get(UpdateRequest.REPFACT);\n      if (rfObj != null && rfObj instanceof Integer) {\n        Integer routeRf = (Integer)rfObj;\n        if (rf == null || routeRf < rf)\n          rf = routeRf;\n      }\n      minRf = (Integer)header.get(UpdateRequest.MIN_REPFACT);\n\n      List<SimpleOrderedMap<String>> shardTolerantErrors =\n          (List<SimpleOrderedMap<String>>) header.get(\"errors\");\n      if (null != shardTolerantErrors) {\n        Integer shardMaxToleratedErrors = (Integer) header.get(\"maxErrors\");\n        assert null != shardMaxToleratedErrors : \"TolerantUpdateProcessor reported errors but not maxErrors\";\n        // if we get into some weird state where the nodes disagree about the effective maxErrors,\n        // assume the min value seen to decide if we should fail.\n        maxToleratedErrors = Math.min(maxToleratedErrors,\n            ToleratedUpdateError.getEffectiveMaxErrors(shardMaxToleratedErrors.intValue()));\n\n        if (null == toleratedErrors) {\n          toleratedErrors = new ArrayList<SimpleOrderedMap<String>>(shardTolerantErrors.size());\n        }\n        for (SimpleOrderedMap<String> err : shardTolerantErrors) {\n          toleratedErrors.add(err);\n        }\n      }\n      for (String updateType: Arrays.asList(\"adds\", \"deletes\", \"deleteByQuery\")) {\n        Object obj = shardResponse.get(updateType);\n        if (obj instanceof NamedList) {\n          NamedList versionsList = versions.containsKey(updateType) ?\n              versions.get(updateType): new NamedList();\n          versionsList.addAll((NamedList)obj);\n          versions.put(updateType, versionsList);\n        }\n      }\n    }\n\n    NamedList cheader = new NamedList();\n    cheader.add(\"status\", status);\n    cheader.add(\"QTime\", timeMillis);\n    if (rf != null)\n      cheader.add(UpdateRequest.REPFACT, rf);\n    if (minRf != null)\n      cheader.add(UpdateRequest.MIN_REPFACT, minRf);\n    if (null != toleratedErrors) {\n      cheader.add(\"maxErrors\", ToleratedUpdateError.getUserFriendlyMaxErrors(maxToleratedErrors));\n      cheader.add(\"errors\", toleratedErrors);\n      if (maxToleratedErrors < toleratedErrors.size()) {\n        // cumulative errors are too high, we need to throw a client exception w/correct metadata\n\n        // NOTE: it shouldn't be possible for 1 == toleratedErrors.size(), because if that were the case\n        // then at least one shard should have thrown a real error before this, so we don't worry\n        // about having a more \"singular\" exception msg for that situation\n        StringBuilder msgBuf =  new StringBuilder()\n            .append(toleratedErrors.size()).append(\" Async failures during distributed update: \");\n\n        NamedList metadata = new NamedList<String>();\n        for (SimpleOrderedMap<String> err : toleratedErrors) {\n          ToleratedUpdateError te = ToleratedUpdateError.parseMap(err);\n          metadata.add(te.getMetadataKey(), te.getMetadataValue());\n\n          msgBuf.append(\"\\n\").append(te.getMessage());\n        }\n\n        SolrException toThrow = new SolrException(SolrException.ErrorCode.BAD_REQUEST, msgBuf.toString());\n        toThrow.setMetadata(metadata);\n        throw toThrow;\n      }\n    }\n    for (Map.Entry<String, NamedList> entry : versions.entrySet()) {\n      condensed.add(entry.getKey(), entry.getValue());\n    }\n    condensed.add(\"responseHeader\", cheader);\n    return condensed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["0544142c22eb88b6d8b3817f2e1190156aa4f9af","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","b0b597c65628ca9e73913a07e81691f8229bae35"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}