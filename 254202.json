{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(CharTermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(CharTermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(TermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(TermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(CharTermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(CharTermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(CharTermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(CharTermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link #incrementToken()} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    termAtt = addAttribute(CharTermAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n\n    in_termAtt = input.addAttribute(CharTermAttribute.class);\n    in_posIncrAtt = input.addAttribute(PositionIncrementAttribute.class);\n    in_payloadAtt = input.addAttribute(PayloadAttribute.class);\n    in_offsetAtt = input.addAttribute(OffsetAttribute.class);\n    in_typeAtt = input.addAttribute(TypeAttribute.class);\n    in_flagsAtt = input.addAttribute(FlagsAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}