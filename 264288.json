{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269bb27fb904b556e5128bc7b50673d0f0c161c2","date":1323097064,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits liveDocs = MultiFields.getLiveDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((liveDocs == null || liveDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (liveDocs == null) {\n            liveDocs = MultiFields.getLiveDocs(r);\n            assert liveDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","269bb27fb904b556e5128bc7b50673d0f0c161c2"],"269bb27fb904b556e5128bc7b50673d0f0c161c2":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","269bb27fb904b556e5128bc7b50673d0f0c161c2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"269bb27fb904b556e5128bc7b50673d0f0c161c2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}