{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","commits":[{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,DataInput,int).mjava","sourceNew":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = bulkOperation.computeIterations(valueCount, mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[8 * iterations * bulkOperation.blockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.valueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","sourceOld":"  PackedReaderIterator(PackedInts.Format format, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = bulkOperation.computeIterations(valueCount, mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new long[iterations * bulkOperation.blockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.valueCount()], 0, 0);\n    assert iterations * bulkOperation.valueCount() == nextValues.longs.length;\n    assert iterations * bulkOperation.blockCount() == nextBlocks.length;\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","sourceNew":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = iterations(mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[iterations * bulkOperation.byteBlockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.byteValueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","sourceOld":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = bulkOperation.computeIterations(valueCount, mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[8 * iterations * bulkOperation.blockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.valueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","sourceNew":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = iterations(mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[iterations * bulkOperation.byteBlockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.byteValueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","sourceOld":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = bulkOperation.computeIterations(valueCount, mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[8 * iterations * bulkOperation.blockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.valueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b5f2776cabd1c1bbd3fe122be0f1d547189717","date":1418824930,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#PackedReaderIterator(PackedInts.Format,int,int,int,DataInput,int).mjava","sourceNew":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = bulkOperation.computeIterations(valueCount, mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[iterations * bulkOperation.byteBlockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.byteValueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","sourceOld":"  PackedReaderIterator(PackedInts.Format format, int packedIntsVersion, int valueCount, int bitsPerValue, DataInput in, int mem) {\n    super(valueCount, bitsPerValue, in);\n    this.format = format;\n    this.packedIntsVersion = packedIntsVersion;\n    bulkOperation = BulkOperation.of(format, bitsPerValue);\n    iterations = iterations(mem);\n    assert valueCount == 0 || iterations > 0;\n    nextBlocks = new byte[iterations * bulkOperation.byteBlockCount()];\n    nextValues = new LongsRef(new long[iterations * bulkOperation.byteValueCount()], 0, 0);\n    nextValues.offset = nextValues.longs.length;\n    position = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"c0b5f2776cabd1c1bbd3fe122be0f1d547189717":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de522d9303bd67c8473a269a1319125d1f3700e0":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0b5f2776cabd1c1bbd3fe122be0f1d547189717"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["c0b5f2776cabd1c1bbd3fe122be0f1d547189717","de522d9303bd67c8473a269a1319125d1f3700e0"],"c0b5f2776cabd1c1bbd3fe122be0f1d547189717":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","de522d9303bd67c8473a269a1319125d1f3700e0"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}