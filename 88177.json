{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}