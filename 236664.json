{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","commits":[{"id":"5c0af45b07833be5922ae261245816cc39091b6d","date":1354907459,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSamping().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSamping() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f966f30f7a3c7572144def6ccf5ac80071ae522a","date":1355083598,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSampingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams fsp = new FacetSearchParams();\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    \n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n    fsp.addFacetRequest(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.getSubResults()) {\n      assertTrue(\"node \" + node.getLabel()\n          + \" should have had children as the requested depth was '2'\",\n          node.getNumSubResults() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"607428da722dcb3e86bbd11c63de8986e6275c36":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["811cdb4a80352766eb0c762e48972707a924e5cd"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["f966f30f7a3c7572144def6ccf5ac80071ae522a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f966f30f7a3c7572144def6ccf5ac80071ae522a"],"5c0af45b07833be5922ae261245816cc39091b6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"f966f30f7a3c7572144def6ccf5ac80071ae522a":["5c0af45b07833be5922ae261245816cc39091b6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["607428da722dcb3e86bbd11c63de8986e6275c36","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","5c0af45b07833be5922ae261245816cc39091b6d"],"5c0af45b07833be5922ae261245816cc39091b6d":["f966f30f7a3c7572144def6ccf5ac80071ae522a"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"f966f30f7a3c7572144def6ccf5ac80071ae522a":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708","407687e67faf6e1f02a211ca078d8e3eed631027"],"811cdb4a80352766eb0c762e48972707a924e5cd":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}