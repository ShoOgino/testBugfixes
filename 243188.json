{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","commits":[{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"/dev/null","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += _TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"/dev/null","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += _TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = _TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += _TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd756794a4a9e33f786119818f9d56162965cf8","date":1412591300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat() / 2, 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    int maxIterations = TEST_NIGHTLY ? Integer.MAX_VALUE : 10;\n    int iterations = 0;\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      // don't let this test run too many times, even if it gets unlucky with \"inc\"\n      if (iterations >= maxIterations) {\n        break;\n      }\n      iterations++;\n\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#testAgainstBitSet().mjava","sourceNew":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    Random random = random();\n    final int numBits = TestUtil.nextInt(random, 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random.nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random.nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    int maxIterations = TEST_NIGHTLY ? Integer.MAX_VALUE : 10;\n    int iterations = 0;\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random, 1, 100)) {\n      // don't let this test run too many times, even if it gets unlucky with \"inc\"\n      if (iterations >= maxIterations) {\n        break;\n      }\n      iterations++;\n\n      set = new BitSet(numBits);\n      for (int d = random.nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","sourceOld":"  /** Compare the content of the set against a {@link BitSet}. */\n  public void testAgainstBitSet() throws IOException {\n    final int numBits = TestUtil.nextInt(random(), 100, 1 << 20);\n    // test various random sets with various load factors\n    for (float percentSet : new float[] {0f, 0.0001f, random().nextFloat(), 0.9f, 1f}) {\n      final BitSet set = randomSet(numBits, percentSet);\n      final T copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n    // test one doc\n    BitSet set = new BitSet(numBits);\n    set.set(0); // 0 first\n    T copy = copyOf(set, numBits);\n    assertEquals(numBits, set, copy);\n    set.clear(0);\n    set.set(random().nextInt(numBits));\n    copy = copyOf(set, numBits); // then random index\n    assertEquals(numBits, set, copy);\n    // test regular increments\n    int maxIterations = TEST_NIGHTLY ? Integer.MAX_VALUE : 10;\n    int iterations = 0;\n    for (int inc = 2; inc < 1000; inc += TestUtil.nextInt(random(), 1, 100)) {\n      // don't let this test run too many times, even if it gets unlucky with \"inc\"\n      if (iterations >= maxIterations) {\n        break;\n      }\n      iterations++;\n\n      set = new BitSet(numBits);\n      for (int d = random().nextInt(10); d < numBits; d += inc) {\n        set.set(d);\n      }\n      copy = copyOf(set, numBits);\n      assertEquals(numBits, set, copy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["9cd756794a4a9e33f786119818f9d56162965cf8"],"9cd756794a4a9e33f786119818f9d56162965cf8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"55980207f1977bd1463465de1659b821347e2fa8":["6613659748fe4411a7dcf85266e55db1f95f7315","9cd756794a4a9e33f786119818f9d56162965cf8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7581da3051efe8071ae92ac7eca27a270bc4611e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["57c6c784f777a2cc8fa014507ea129526822714d"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"9cd756794a4a9e33f786119818f9d56162965cf8":["57c6c784f777a2cc8fa014507ea129526822714d","55980207f1977bd1463465de1659b821347e2fa8"],"55980207f1977bd1463465de1659b821347e2fa8":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["9cd756794a4a9e33f786119818f9d56162965cf8","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7581da3051efe8071ae92ac7eca27a270bc4611e"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6613659748fe4411a7dcf85266e55db1f95f7315"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}