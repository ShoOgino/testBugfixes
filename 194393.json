{"path":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":["78197b4b249c8d5358f86b1aa76f8ddfacefea19"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":["78197b4b249c8d5358f86b1aa76f8ddfacefea19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = TestUtil.getTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.shutdown();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.shutdown();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random()))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.shutdown();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.shutdown();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    TestUtil.rm(tmpDir);\n  }\n\n","bugFix":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final Path tmpDir = createTempDir(\"TestNeverDelete\");\n    final BaseDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    if (d instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)d).setNoDeleteOpenFile(false);\n    }\n    final RandomIndexWriter w = new RandomIndexWriter(random(),\n                                                      d,\n                                                      newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(TestUtil.nextInt(random(), 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random().nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newStringField(\"dc\", \"\"+docCount, Field.Store.YES));\n                doc.add(newTextField(\"field\", \"here is some text\", Field.Store.YES));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<>();\n\n    DirectoryReader r = DirectoryReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", slowFileExists(d, fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    IOUtils.rm(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d19974432be9aed28ee7dca73bdf01d139e763a9"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","6613659748fe4411a7dcf85266e55db1f95f7315"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}