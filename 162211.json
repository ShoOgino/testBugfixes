{"path":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  FieldProps(String name, String type, int expectedCount) {\n    this.name = name;\n    this.type = type;\n    this.expectedCount = expectedCount;\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (\"boolGSF\".equals(name) || \"boolGSL\".equals(name)) {\n      base = false; // Special for sorting\n    } else if (name.startsWith(\"bool\")) {\n      base = DocValuesNotIndexedTest.random().nextBoolean();\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000);\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949bde462bfd00409852e22bedf12f7b18868909","date":1480227090,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","sourceNew":"  FieldProps(String name, String type, int expectedCount) {\n    this.name = name;\n    this.type = type;\n    this.expectedCount = expectedCount;\n    resetBase();\n  }\n\n","sourceOld":"  FieldProps(String name, String type, int expectedCount) {\n    this.name = name;\n    this.type = type;\n    this.expectedCount = expectedCount;\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (\"boolGSF\".equals(name) || \"boolGSL\".equals(name)) {\n      base = false; // Special for sorting\n    } else if (name.startsWith(\"bool\")) {\n      base = DocValuesNotIndexedTest.random().nextBoolean();\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000);\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  FieldProps(String name, String type, int expectedCount) {\n    this.name = name;\n    this.type = type;\n    this.expectedCount = expectedCount;\n    resetBase();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#FieldProps(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  FieldProps(String name, String type, int expectedCount) {\n    this.name = name;\n    this.type = type;\n    this.expectedCount = expectedCount;\n    resetBase();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","949bde462bfd00409852e22bedf12f7b18868909"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","949bde462bfd00409852e22bedf12f7b18868909"],"949bde462bfd00409852e22bedf12f7b18868909":["c72f6f0907682b825869d7878ba72d8259dabc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"c72f6f0907682b825869d7878ba72d8259dabc91":["949bde462bfd00409852e22bedf12f7b18868909"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"949bde462bfd00409852e22bedf12f7b18868909":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}