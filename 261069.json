{"path":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.toString());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.toString());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.toString());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.toString());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    final String queryValue = analysisRequest.getQuery();\n    final Set<BytesRef> termsToMatch = (queryValue != null && analysisRequest.isShowMatch())\n      ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n      : EMPTY_BYTES_SET;\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["c26f00b574427b55127e869b935845554afde1fa","e79a6d080bdd5b2a8f56342cf571b5476de04180","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}