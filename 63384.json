{"path":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":null,"sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541","date":1284416022,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,PivotFacetComponent.COMPONENT_NAME,PivotFacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a198be002bb6786dce54cf550c3ca7bb7b88a9","date":1287519003,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,PivotFacetComponent.COMPONENT_NAME,PivotFacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,PivotFacetComponent.COMPONENT_NAME,PivotFacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#loadSearchComponents().mjava","sourceNew":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","sourceOld":"  /**\n   * Register the default search components\n   */\n  private Map<String, SearchComponent> loadSearchComponents()\n  {\n    Map<String, SearchComponent> components = new HashMap<String, SearchComponent>();\n    initPlugins(components,SearchComponent.class);\n    for (Map.Entry<String, SearchComponent> e : components.entrySet()) {\n      SearchComponent c = e.getValue();\n      if (c instanceof HighlightComponent) {\n        HighlightComponent hl = (HighlightComponent) c;\n        if(!HighlightComponent.COMPONENT_NAME.equals(e.getKey())){\n          components.put(HighlightComponent.COMPONENT_NAME,hl);\n        }\n        break;\n      }\n    }\n    addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);\n    addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);\n    addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);\n    addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);\n    addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);\n    addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);\n    return components;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["03a198be002bb6786dce54cf550c3ca7bb7b88a9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541":["03a198be002bb6786dce54cf550c3ca7bb7b88a9","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["601c6168c1d70f05f7a6a2d8c7ad4ceb218f3541"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}