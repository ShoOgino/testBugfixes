{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testOptimisticLocking().mjava","commits":[{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testOptimisticLocking().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOptimisticLocking() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n    long version2;\n\n    try {\n      // try version added directly on doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version-1)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try version added as a parameter on the request\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version-1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try an add specifying a negative version\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try an add with a greater version\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version+random().nextInt(1000)+1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    //\n    // deletes\n    //\n\n    try {\n      // try a delete with version on the request\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version-1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete with a negative version\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(-version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete with a greater version\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version+random().nextInt(1000)+1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete of a document that doesn't exist, specifying a specific version\n      version2 = deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try a delete of a document that doesn't exist, specifying that it should not\n    version2 = deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(-1)));\n    assertTrue(version2 < 0);\n\n    // overwrite the document\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version)), null);\n    assertTrue(version2 > version);\n\n    try {\n      // overwriting the previous version should now fail\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // deleting the previous version should now fail\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = version2;\n\n    // deleting the current version should work\n    version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n\n    try {\n      // overwriting the previous existing doc should now fail (since it was deleted)\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // deleting the previous existing doc should now fail (since it was deleted)\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // overwriting a negative version should work\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-(version-1))));\n    assertTrue(version2 > version);\n    version = version2;\n\n    // sanity test that we see the right version via rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testOptimisticLocking().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testOptimisticLocking().mjava","sourceNew":"  @Test\n  public void testOptimisticLocking() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n    long version2;\n\n    // try version added directly on doc\n    SolrException se = expectThrows(SolrException.class, \"version should cause an error\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version-1)), null));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try version added as a parameter on the request\n    se = expectThrows(SolrException.class, \"version should cause an error\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version-1))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try an add specifying a negative version\n    se = expectThrows(SolrException.class, \"negative version should cause a conflict\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-version))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try an add with a greater version\n    se = expectThrows(SolrException.class, \"greater version should cause a conflict\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version+random().nextInt(1000)+1))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    //\n    // deletes\n    //\n\n    // try a delete with version on the request\n    se = expectThrows(SolrException.class, \"version should cause an error\",\n        () -> deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version-1))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try a delete with a negative version\n    se = expectThrows(SolrException.class, \"negative version should cause an error\",\n        () -> deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(-version))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try a delete with a greater version\n    se = expectThrows(SolrException.class, \"greater version should cause an error\",\n        () -> deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version+random().nextInt(1000)+1))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n    // try a delete of a document that doesn't exist, specifying a specific version\n    se = expectThrows(SolrException.class, \"document does not exist should cause an error\",\n        () -> deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(version))));\n    assertEquals(\"version should cause a conflict\", 409, se.code());\n\n\n    // try a delete of a document that doesn't exist, specifying that it should not\n    version2 = deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(-1)));\n    assertTrue(version2 < 0);\n\n    // overwrite the document\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version)), null);\n    assertTrue(version2 > version);\n\n    // overwriting the previous version should now fail\n    se = expectThrows(SolrException.class, \"overwriting previous version should fail\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version))));\n    assertEquals(409, se.code());\n\n    // deleting the previous version should now fail\n    se = expectThrows(SolrException.class, \"deleting the previous version should now fail\",\n        () -> deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version))));\n    assertEquals(409, se.code());\n\n    final long prevVersion = version2;\n\n    // deleting the current version should work\n    version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(prevVersion)));\n\n    // overwriting the previous existing doc should now fail (since it was deleted)\n    se = expectThrows(SolrException.class, \"overwriting the previous existing doc should now fail (since it was deleted)\",\n        () -> addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(prevVersion))));\n    assertEquals(409, se.code());\n\n    // deleting the previous existing doc should now fail (since it was deleted)\n    se = expectThrows(SolrException.class, \"deleting the previous existing doc should now fail (since it was deleted)\",\n        () -> deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(prevVersion))));\n    assertEquals(409, se.code());\n\n    // overwriting a negative version should work\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-(prevVersion-1))));\n    assertTrue(version2 > version);\n    long lastVersion = version2;\n\n    // sanity test that we see the right version via rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + lastVersion + \"}}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testOptimisticLocking() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n    long version2;\n\n    try {\n      // try version added directly on doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version-1)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try version added as a parameter on the request\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version-1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try an add specifying a negative version\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try an add with a greater version\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version+random().nextInt(1000)+1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    //\n    // deletes\n    //\n\n    try {\n      // try a delete with version on the request\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version-1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete with a negative version\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(-version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete with a greater version\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version+random().nextInt(1000)+1)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try a delete of a document that doesn't exist, specifying a specific version\n      version2 = deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try a delete of a document that doesn't exist, specifying that it should not\n    version2 = deleteAndGetVersion(\"I_do_not_exist\", params(\"_version_\", Long.toString(-1)));\n    assertTrue(version2 < 0);\n\n    // overwrite the document\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"_version_\", Long.toString(version)), null);\n    assertTrue(version2 > version);\n\n    try {\n      // overwriting the previous version should now fail\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // deleting the previous version should now fail\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = version2;\n\n    // deleting the current version should work\n    version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n\n    try {\n      // overwriting the previous existing doc should now fail (since it was deleted)\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // deleting the previous existing doc should now fail (since it was deleted)\n      version2 = deleteAndGetVersion(\"1\", params(\"_version_\", Long.toString(version)));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // overwriting a negative version should work\n    version2 = addAndGetVersion(sdoc(\"id\",\"1\"), params(\"_version_\", Long.toString(-(version-1))));\n    assertTrue(version2 > version);\n    version = version2;\n\n    // sanity test that we see the right version via rtg\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bea3922196318026c4274f2013416acb60c691e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["1bea3922196318026c4274f2013416acb60c691e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["464e7336798bc8a1281d5cf610c649c5a0784e83"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bea3922196318026c4274f2013416acb60c691e"],"1bea3922196318026c4274f2013416acb60c691e":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}