{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","commits":[{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(FastInputStream).mjava","sourceNew":"    @Override\n    public String readExternString(DataInputInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public String readExternString(FastInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","sourceNew":"    @Override\n    public CharSequence readExternString(DataInputInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public String readExternString(DataInputInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"293f00d1caf419a7bfacb997c982715cc8eb9b73","date":1560380201,"type":3,"author":"Thomas WÃ¶ckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#readExternString(DataInputInputStream).mjava","sourceNew":"    @Override\n    public CharSequence readExternString(DataInputInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n        // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public CharSequence readExternString(DataInputInputStream fis) throws IOException {\n      int idx = readSize(fis);\n      if (idx != 0) {// idx != 0 is the index of the extern string\n      // no need to synchronize globalStringList - it's only updated before the first record is written to the log\n        return globalStringList.get(idx - 1);\n      } else {// idx == 0 means it has a string value\n        // this shouldn't happen with this codec subclass.\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Corrupt transaction log\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"293f00d1caf419a7bfacb997c982715cc8eb9b73":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["293f00d1caf419a7bfacb997c982715cc8eb9b73"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["293f00d1caf419a7bfacb997c982715cc8eb9b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"293f00d1caf419a7bfacb997c982715cc8eb9b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}