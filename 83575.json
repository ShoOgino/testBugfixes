{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","commits":[{"id":"467b33453dfbb7b9a5e2388723dc92cc4d7f830a","date":1499159523,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n    loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n    loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    cluster.deleteAllCollections();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n    loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    if (cluster.getJettySolrRunners().size() < NODE_COUNT) {\n      // start some to get to original state\n      int numJetties = cluster.getJettySolrRunners().size();\n      for (int i = 0; i < NODE_COUNT - numJetties; i++) {\n        cluster.startJettySolrRunner();\n      }\n    }\n    cluster.waitForAllNodes(30);\n    loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    cluster.deleteAllCollections();\n  }\n\n","bugFix":["467b33453dfbb7b9a5e2388723dc92cc4d7f830a","01322d51122b6cbe6b5ba6059fffba67798dae72","cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n\n    finishedProcessing = new CountDownLatch(1);\n    startedProcessing = new CountDownLatch(1);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n\n    finishedProcessing = new CountDownLatch(1);\n    startedProcessing = new CountDownLatch(1);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#setUp().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setUp() throws Exception  {\n    super.setUp();\n    \n    configureCluster(NODE_COUNT)\n    .addConfig(\"conf\", configset(\"cloud-minimal\"))\n    .configure();\n    \n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n\n    finishedProcessing = new CountDownLatch(1);\n    startedProcessing = new CountDownLatch(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","467b33453dfbb7b9a5e2388723dc92cc4d7f830a"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["3f504512a03d978990cbff30db0522b354e846db","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","467b33453dfbb7b9a5e2388723dc92cc4d7f830a","560c18d71dad43d675158783c3840f8c80d6d39c"],"467b33453dfbb7b9a5e2388723dc92cc4d7f830a":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}