{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, null, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6409afad7088b674f71abae8d29564f57ff93b","date":1434079756,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    // Sun 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963\n    if (Constants.JAVA_VENDOR.startsWith(\"Sun\") && Constants.JAVA_VERSION.startsWith(\"1.5\")) {\n      String defLang = Locale.getDefault().getLanguage();\n      assumeFalse(\"Sun JRE 1.5 suffers from http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6240963 under Turkish locale\", defLang.equals(\"tr\") || defLang.equals(\"az\"));\n    }\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      long h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      long h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      long h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      int h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef5efd612b12038e51f8da591d11b5359c5e176d","date":1526420099,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":null,"sourceOld":"  public void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException {\n    assumeFalse(\"test temporarily disabled on J9, see https://issues.apache.org/jira/browse/LUCENE-6556\",\n                 Constants.JAVA_VENDOR.startsWith(\"IBM\"));\n    //Cache all the query templates we will be referring to.\n    QueryTemplateManager qtm = new QueryTemplateManager();\n    qtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n    qtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n    //Run all of our test queries\n    for (String queryForm : queryForms) {\n      Properties queryFormProperties = getPropsFromString(queryForm);\n\n      //Get the required query XSL template for this test\n//      Templates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\n      //Transform the queryFormProperties into a Lucene XML query\n      Document doc = qtm.getQueryAsDOM(queryFormProperties, queryFormProperties.getProperty(\"template\"));\n\n      //Parse the XML query using the XML parser\n      Query q = builder.getQuery(doc.getDocumentElement());\n\n      //Run the query\n      long h = searcher.search(q, 1000).totalHits;\n\n      //Check we have the expected number of results\n      int expectedHits = Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n      assertEquals(\"Number of results should match for query \" + queryForm, expectedHits, h);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6409afad7088b674f71abae8d29564f57ff93b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["da6409afad7088b674f71abae8d29564f57ff93b"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef5efd612b12038e51f8da591d11b5359c5e176d":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["da6409afad7088b674f71abae8d29564f57ff93b","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["da6409afad7088b674f71abae8d29564f57ff93b","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef5efd612b12038e51f8da591d11b5359c5e176d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"da6409afad7088b674f71abae8d29564f57ff93b":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["da6409afad7088b674f71abae8d29564f57ff93b"],"ef5efd612b12038e51f8da591d11b5359c5e176d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["ef5efd612b12038e51f8da591d11b5359c5e176d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}