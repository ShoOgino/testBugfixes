{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","commits":[{"id":"e0a671eed493f97734f17409168061773c1c5b52","date":1460066079,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e72caffc799b265e17158ff9b0aad014849ad8","date":1466582027,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(SloppyMath.toRadians(angle));\n      double y = Math.sin(SloppyMath.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","bugFix":["86fcb04ff2d63aad8754270211d5fc084d3526b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(SloppyMath.toRadians(angle));\n      double y = Math.sin(SloppyMath.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(SloppyMath.toRadians(angle));\n      double y = Math.sin(SloppyMath.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\").append(lat).append(\", \").append(lon).append(\"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(SloppyMath.toRadians(angle));\n      double y = Math.sin(SloppyMath.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\" + lat + \", \" + lon + \"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71a92b21a4564a0dd5e0559cebf435a5fe34542e","date":1573666298,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#inverseHaversin(StringBuilder,double,double,double).mjava","sourceNew":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(Math.toRadians(angle));\n      double y = Math.sin(Math.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\").append(lat).append(\", \").append(lon).append(\"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","sourceOld":"  private static void inverseHaversin(StringBuilder b, double centerLat, double centerLon, double radiusMeters) {\n    double angle = 0;\n    int steps = 100;\n\n    newAngle:\n    while (angle < 360) {\n      double x = Math.cos(SloppyMath.toRadians(angle));\n      double y = Math.sin(SloppyMath.toRadians(angle));\n      double factor = 2.0;\n      double step = 1.0;\n      int last = 0;\n      double lastDistanceMeters = 0.0;\n      //System.out.println(\"angle \" + angle + \" slope=\" + slope);\n      while (true) {\n        double lat = wrapLat(centerLat + y * factor);\n        double lon = wrapLon(centerLon + x * factor);\n        double distanceMeters = SloppyMath.haversinMeters(centerLat, centerLon, lat, lon);\n\n        if (last == 1 && distanceMeters < lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        if (last == -1 && distanceMeters > lastDistanceMeters) {\n          // For large enough circles, some angles are not possible:\n          //System.out.println(\"  done: give up on angle \" + angle);\n          angle += 360./steps;\n          continue newAngle;\n        }\n        lastDistanceMeters = distanceMeters;\n\n        //System.out.println(\"  iter lat=\" + lat + \" lon=\" + lon + \" distance=\" + distanceMeters + \" vs \" + radiusMeters);\n        if (Math.abs(distanceMeters - radiusMeters) < 0.1) {\n          b.append(\"          [\").append(lat).append(\", \").append(lon).append(\"],\\n\");\n          break;\n        }\n        if (distanceMeters > radiusMeters) {\n          // too big\n          //System.out.println(\"    smaller\");\n          factor -= step;\n          if (last == 1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = -1;\n        } else if (distanceMeters < radiusMeters) {\n          // too small\n          //System.out.println(\"    bigger\");\n          factor += step;\n          if (last == -1) {\n            //System.out.println(\"      half-step\");\n            step /= 2.0;\n          }\n          last = 1;\n        }\n      }\n      angle += 360./steps;\n    }\n  }\n  // craziness for plotting stuff :)\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["c7e72caffc799b265e17158ff9b0aad014849ad8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e72caffc799b265e17158ff9b0aad014849ad8":["09f15823cf5eb6e807005579e875e117d8598f95"],"e0a671eed493f97734f17409168061773c1c5b52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["2ffe681f212e5073c69955b4ad22946794c84940"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09f15823cf5eb6e807005579e875e117d8598f95","c7e72caffc799b265e17158ff9b0aad014849ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"],"09f15823cf5eb6e807005579e875e117d8598f95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0a671eed493f97734f17409168061773c1c5b52"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0a671eed493f97734f17409168061773c1c5b52","09f15823cf5eb6e807005579e875e117d8598f95"],"c7e72caffc799b265e17158ff9b0aad014849ad8":["2ffe681f212e5073c69955b4ad22946794c84940","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e0a671eed493f97734f17409168061773c1c5b52":["09f15823cf5eb6e807005579e875e117d8598f95"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"09f15823cf5eb6e807005579e875e117d8598f95":["c7e72caffc799b265e17158ff9b0aad014849ad8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}