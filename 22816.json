{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","sourceNew":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","sourceNew":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/LocalReplicatorTest#testSessionExpiration().mjava","sourceNew":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    // should fail to obtain a file for an expired session\n    expectThrows(SessionExpiredException.class, () -> {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSessionExpiration() throws IOException, InterruptedException {\n    replicator.publish(createRevision(1));\n    SessionToken session = replicator.checkForUpdate(null);\n    replicator.setExpirationThreshold(5); // expire quickly\n    Thread.sleep(50); // sufficient for expiration\n    try {\n      replicator.obtainFile(session.id, session.sourceFiles.keySet().iterator().next(), session.sourceFiles.values().iterator().next().get(0).fileName);\n      fail(\"should have failed to obtain a file for an expired session\");\n    } catch (SessionExpiredException e) {\n      // expected\n    }\n  }\n\n","bugFix":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}