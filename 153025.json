{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3cc749c053615f5871f3b95715fe292f34e70a53"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cc749c053615f5871f3b95715fe292f34e70a53","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cc749c053615f5871f3b95715fe292f34e70a53":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}