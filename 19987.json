{"path":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(new Automaton[] {BasicAutomata.makeString(\"quick\"),\n              BasicAutomata.makeString(\"brown\"),\n              BasicAutomata.makeString(\"bob\")}));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(new Automaton[] {BasicAutomata.makeString(\"quick\"),\n              BasicAutomata.makeString(\"brown\"),\n              BasicAutomata.makeString(\"bob\")}));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(new Automaton[] {BasicAutomata.makeString(\"quick\"),\n              BasicAutomata.makeString(\"brown\"),\n              BasicAutomata.makeString(\"bob\")}));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(new Automaton[] {BasicAutomata.makeString(\"quick\"),\n              BasicAutomata.makeString(\"brown\"),\n              BasicAutomata.makeString(\"bob\")}));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testCustomProvider().mjava","sourceNew":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","sourceOld":"  public void testCustomProvider() throws IOException {\n    AutomatonProvider myProvider = new AutomatonProvider() {\n      // automaton that matches quick or brown\n      private Automaton quickBrownAutomaton = BasicOperations.union(Arrays\n          .asList(BasicAutomata.makeString(\"quick\"),\n          BasicAutomata.makeString(\"brown\"),\n          BasicAutomata.makeString(\"bob\")));\n      \n      public Automaton getAutomaton(String name) throws IOException {\n        if (name.equals(\"quickBrown\")) return quickBrownAutomaton;\n        else return null;\n      }\n    };\n    RegexpQuery query = new RegexpQuery(newTerm(\"<quickBrown>\"), RegExp.ALL,\n        myProvider);\n    assertEquals(1, searcher.search(query, 5).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}