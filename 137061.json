{"path":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":["02109c1c424868c8c3d9d6b4926834fa1300f70e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":["02109c1c424868c8c3d9d6b4926834fa1300f70e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    BaseDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random(), 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ROOT));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setStringValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random(), te, null, de, 0);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2acf500f78aa12b92e371fd89c719291986b6b90":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"02331260bb246364779cb6f04919ca47900d01bb":["d19974432be9aed28ee7dca73bdf01d139e763a9"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","02331260bb246364779cb6f04919ca47900d01bb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"02331260bb246364779cb6f04919ca47900d01bb":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}