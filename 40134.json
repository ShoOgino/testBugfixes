{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getDocLists(Map[SolrInputDocument,Map[String,Object]]).mjava","commits":[{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getDocLists(Map[SolrInputDocument,Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private List<Map<SolrInputDocument,Map<String,Object>>> getDocLists(Map<SolrInputDocument,Map<String,Object>> documents) {\n    List<Map<SolrInputDocument,Map<String,Object>>> docLists = new ArrayList<Map<SolrInputDocument,Map<String,Object>>>();\n    Map<SolrInputDocument,Map<String,Object>> docList = null;\n    if (this.documents != null) {\n      \n      Boolean lastOverwrite = true;\n      Integer lastCommitWithin = -1;\n      \n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = this.documents\n          .entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) entry.getValue().get(OVERWRITE);\n          commitWithin = (Integer) entry.getValue().get(COMMIT_WITHIN);\n        }\n        if (overwrite != lastOverwrite || commitWithin != lastCommitWithin\n            || docLists.size() == 0) {\n          docList = new LinkedHashMap<SolrInputDocument,Map<String,Object>>();\n          docLists.add(docList);\n        }\n        docList.put(entry.getKey(), entry.getValue());\n        lastCommitWithin = commitWithin;\n        lastOverwrite = overwrite;\n      }\n    }\n    \n    if (docIterator != null) {\n      docList = new LinkedHashMap<SolrInputDocument,Map<String,Object>>();\n      docLists.add(docList);\n      while (docIterator.hasNext()) {\n        SolrInputDocument doc = docIterator.next();\n        if (doc != null) {\n          docList.put(doc, null);\n        }\n      }\n      \n    }\n\n    return docLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getDocLists(Map[SolrInputDocument,Map[String,Object]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest#getDocLists(Map[SolrInputDocument,Map[String,Object]]).mjava","sourceNew":"  private List<Map<SolrInputDocument,Map<String,Object>>> getDocLists(Map<SolrInputDocument,Map<String,Object>> documents) {\n    List<Map<SolrInputDocument,Map<String,Object>>> docLists = new ArrayList<>();\n    Map<SolrInputDocument,Map<String,Object>> docList = null;\n    if (this.documents != null) {\n      \n      Boolean lastOverwrite = true;\n      Integer lastCommitWithin = -1;\n      \n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = this.documents\n          .entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) entry.getValue().get(OVERWRITE);\n          commitWithin = (Integer) entry.getValue().get(COMMIT_WITHIN);\n        }\n        if (overwrite != lastOverwrite || commitWithin != lastCommitWithin\n            || docLists.size() == 0) {\n          docList = new LinkedHashMap<>();\n          docLists.add(docList);\n        }\n        docList.put(entry.getKey(), entry.getValue());\n        lastCommitWithin = commitWithin;\n        lastOverwrite = overwrite;\n      }\n    }\n    \n    if (docIterator != null) {\n      docList = new LinkedHashMap<>();\n      docLists.add(docList);\n      while (docIterator.hasNext()) {\n        SolrInputDocument doc = docIterator.next();\n        if (doc != null) {\n          docList.put(doc, null);\n        }\n      }\n      \n    }\n\n    return docLists;\n  }\n\n","sourceOld":"  private List<Map<SolrInputDocument,Map<String,Object>>> getDocLists(Map<SolrInputDocument,Map<String,Object>> documents) {\n    List<Map<SolrInputDocument,Map<String,Object>>> docLists = new ArrayList<Map<SolrInputDocument,Map<String,Object>>>();\n    Map<SolrInputDocument,Map<String,Object>> docList = null;\n    if (this.documents != null) {\n      \n      Boolean lastOverwrite = true;\n      Integer lastCommitWithin = -1;\n      \n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = this.documents\n          .entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) entry.getValue().get(OVERWRITE);\n          commitWithin = (Integer) entry.getValue().get(COMMIT_WITHIN);\n        }\n        if (overwrite != lastOverwrite || commitWithin != lastCommitWithin\n            || docLists.size() == 0) {\n          docList = new LinkedHashMap<SolrInputDocument,Map<String,Object>>();\n          docLists.add(docList);\n        }\n        docList.put(entry.getKey(), entry.getValue());\n        lastCommitWithin = commitWithin;\n        lastOverwrite = overwrite;\n      }\n    }\n    \n    if (docIterator != null) {\n      docList = new LinkedHashMap<SolrInputDocument,Map<String,Object>>();\n      docLists.add(docList);\n      while (docIterator.hasNext()) {\n        SolrInputDocument doc = docIterator.next();\n        if (doc != null) {\n          docList.put(doc, null);\n        }\n      }\n      \n    }\n\n    return docLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}