{"path":"src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","commits":[{"id":"9b87acd61509ed222a7ae58c584568eca5a6243e","date":1255125162,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","0b11f32acac13cc087cc735808dfe19c2b52673b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testBackup().mjava","sourceNew":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","sourceOld":"  public void testBackup() throws Exception {\n\n    masterJetty.stop();\n    copyFile(new File(CONF_DIR + \"solrconfig-master1.xml\"), new File(master.getConfDir(), \"solrconfig.xml\"));\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n   \n    class BackupThread extends Thread {\n      volatile String fail = null;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_BACKUP;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    BackupThread backupThread = new BackupThread();\n    backupThread.start();\n    \n    File dataDir = new File(master.getDataDir());\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      public void run() {\n        String masterUrl = \"http://localhost:\" + masterJetty.getLocalPort() + \"/solr/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream);\n          if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n\n      };\n    };\n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while(true) {\n      checkStatus.run();\n      if(checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if(checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if(waitCnt == 10) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    if(backupThread.fail != null) {\n      fail(backupThread.fail);\n    }\n\n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      public boolean accept(File dir, String name) {\n        if(name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(1, files.length);\n    File snapDir = files[0];\n\n    IndexSearcher searcher = new IndexSearcher(new SimpleFSDirectory(snapDir.getAbsoluteFile(), null), true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1);\n\n    assertEquals(500, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}