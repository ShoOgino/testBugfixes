{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptionThreads().mjava","sourceNew":null,"sourceOld":"  public void testDocumentsWriterExceptionThreads() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    final int NUM_THREAD = 3;\n    final int NUM_ITER = 100;\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      {\n        final IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n\n        final int finalI = i;\n\n        Thread[] threads = new Thread[NUM_THREAD];\n        for(int t=0;t<NUM_THREAD;t++) {\n          threads[t] = new Thread() {\n              @Override\n              public void run() {\n                try {\n                  for(int iter=0;iter<NUM_ITER;iter++) {\n                    Document doc = new Document();\n                    doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    writer.addDocument(doc);\n                    writer.addDocument(doc);\n                    doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                    try {\n                      writer.addDocument(doc);\n                      fail(\"did not hit expected exception\");\n                    } catch (IOException ioe) {\n                    }\n\n                    if (0 == finalI) {\n                      doc = new Document();\n                      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n                      writer.addDocument(doc);\n                      writer.addDocument(doc);\n                    }\n                  }\n                } catch (Throwable t) {\n                  synchronized(this) {\n                    System.out.println(Thread.currentThread().getName() + \": ERROR: hit unexpected exception\");\n                    t.printStackTrace(System.out);\n                  }\n                  fail();\n                }\n              }\n            };\n          threads[t].start();\n        }\n\n        for(int t=0;t<NUM_THREAD;t++)\n          threads[t].join();\n            \n        writer.close();\n      }\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = (3+(1-i)*2)*NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(NUM_THREAD*NUM_ITER, numDel);\n\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected += 17-NUM_THREAD*NUM_ITER;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}