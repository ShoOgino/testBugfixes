{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","commits":[{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(NRShape).mjava","sourceNew":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(NRShape nrShape) {\n      ensureDecoded();\n      int startCmp = comparePrefixLV(nrShape.getMinLV(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefixLV(nrShape.getMaxLV(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = nrShape.getMinLV().getLevel();\n      int nrMaxLevel = nrShape.getMaxLV().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getLVAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","sourceNew":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree.NRCell#relate(SpanUnitsNRShape).mjava","sourceNew":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","sourceOld":"    public SpatialRelation relate(SpanUnitsNRShape spanShape) {\n      assertDecoded();\n      int startCmp = comparePrefix(spanShape.getMinUnit(), this);\n      if (startCmp > 0) {//start comes after this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int endCmp = comparePrefix(spanShape.getMaxUnit(), this);\n      if (endCmp < 0) {//end comes before this cell\n        return SpatialRelation.DISJOINT;\n      }\n      int nrMinLevel = spanShape.getMinUnit().getLevel();\n      int nrMaxLevel = spanShape.getMaxUnit().getLevel();\n      if ((startCmp < 0 || startCmp == 0 && nrMinLevel <= getLevel())\n          && (endCmp > 0 || endCmp == 0 && nrMaxLevel <= getLevel()))\n        return SpatialRelation.WITHIN;//or equals\n      //At this point it's Contains or Within.\n      if (startCmp != 0 || endCmp != 0)\n        return SpatialRelation.INTERSECTS;\n      //if min or max Level is less, it might be on the equivalent edge.\n      for (;nrMinLevel < getLevel(); nrMinLevel++) {\n        if (getValAtLevel(nrMinLevel + 1) != 0)\n          return SpatialRelation.INTERSECTS;\n      }\n      for (;nrMaxLevel < getLevel(); nrMaxLevel++) {\n        if (getValAtLevel(nrMaxLevel + 1) != getNumSubCells(getShapeAtLevel(nrMaxLevel)) - 1)\n          return SpatialRelation.INTERSECTS;\n      }\n      return SpatialRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}