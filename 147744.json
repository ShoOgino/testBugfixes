{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","commits":[{"id":"d4148af0b1a0b6991d37fc16a075d88fc63068f9","date":1351120943,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      byte[] titleNorms = (byte[]) reader.normValues(\"title\").getSource().getArray();\n      byte[] fooNorms = (byte[]) reader.normValues(\"foo_t\").getSource().getArray();\n      byte[] textNorms = (byte[]) reader.normValues(\"text\").getSource().getArray();\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms[docid]);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","cfd28703065c4b03936cfebdd7192440dc10acf3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      byte[] titleNorms = (byte[]) reader.normValues(\"title\").getSource().getArray();\n      byte[] fooNorms = (byte[]) reader.normValues(\"foo_t\").getSource().getArray();\n      byte[] textNorms = (byte[]) reader.normValues(\"text\").getSource().getArray();\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms[docid]);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.simpleNormValues(\"title\");\n      NumericDocValues fooNorms = reader.simpleNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.simpleNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      byte[] titleNorms = (byte[]) reader.normValues(\"title\").getSource().getArray();\n      byte[] fooNorms = (byte[]) reader.normValues(\"foo_t\").getSource().getArray();\n      byte[] textNorms = (byte[]) reader.normValues(\"text\").getSource().getArray();\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms[docid]);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.simpleNormValues(\"title\");\n      NumericDocValues fooNorms = reader.simpleNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.simpleNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      byte[] titleNorms = (byte[]) reader.normValues(\"title\").getSource().getArray();\n      byte[] fooNorms = (byte[]) reader.normValues(\"foo_t\").getSource().getArray();\n      byte[] textNorms = (byte[]) reader.normValues(\"text\").getSource().getArray();\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms[docid]);\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms[docid]);\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":["d4148af0b1a0b6991d37fc16a075d88fc63068f9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      AtomicReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd28703065c4b03936cfebdd7192440dc10acf3","date":1413330239,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":["d4148af0b1a0b6991d37fc16a075d88fc63068f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have recieved any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity() instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity();\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).docs;\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend DefaultSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof DefaultSimilarity);\n\n      DefaultSimilarity sim = (DefaultSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getValues().get(\"response\")).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(docid, titleNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.longValue());\n\n      assertEquals(docid, fooNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.longValue());\n\n      assertEquals(docid, textNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.longValue());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(docid, titleNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.longValue());\n\n      assertEquals(docid, fooNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.longValue());\n\n      assertEquals(docid, textNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.longValue());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(docid, titleNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.longValue());\n\n      assertEquals(docid, fooNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.longValue());\n\n      assertEquals(docid, textNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.longValue());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.get(docid));\n\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.get(docid));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testCopyFieldsAndFieldBoostsAndDocBoosts().mjava","sourceNew":null,"sourceOld":"  public void testCopyFieldsAndFieldBoostsAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n\n    final float DOC_BOOST = 3.0F;\n    doc.setDocumentBoost(DOC_BOOST);\n    doc.addField(\"id\", \"42\");\n\n    SolrInputField inTitle = new SolrInputField( \"title\" );\n    inTitle.addValue( \"titleA\" , 2.0F ); \n    inTitle.addValue( \"titleB\" , 7.0F ); \n    final float TITLE_BOOST = 2.0F * 7.0F;\n    assertEquals(TITLE_BOOST, inTitle.getBoost(), 0.0F);\n    doc.put( inTitle.getName(), inTitle );\n    \n    SolrInputField inFoo = new SolrInputField( \"foo_t\" );\n    inFoo.addValue( \"summer time\" , 1.0F );\n    inFoo.addValue( \"in the city\" , 5.0F ); \n    inFoo.addValue( \"living is easy\" , 11.0F );\n    final float FOO_BOOST = 1.0F * 5.0F * 11.0F;\n    assertEquals(FOO_BOOST, inFoo.getBoost(), 0.0F);\n    doc.put( inFoo.getName(), inFoo );\n\n    Document out = DocumentBuilder.toDocument( doc, schema );\n\n    IndexableField[] outTitle = out.getFields( inTitle.getName() );\n    assertEquals(\"wrong number of title values\",\n                 2, outTitle.length);\n\n    IndexableField[] outNoNorms = out.getFields( \"title_stringNoNorms\" );\n    assertEquals(\"wrong number of nonorms values\",\n                 2, outNoNorms.length);\n\n    IndexableField[] outFoo = out.getFields( inFoo.getName() );\n    assertEquals(\"wrong number of foo values\",\n                 3, outFoo.length);\n\n    IndexableField[] outText = out.getFields( \"text\" );\n    assertEquals(\"wrong number of text values\",\n                 5, outText.length);\n\n    // since Lucene no longer has native document boosts, we should find\n    // the doc boost multiplied into the boost on the first field value\n    // of each field.  All other field values should be 1.0f\n    // (lucene will multiply all of the field value boosts later)\n    assertEquals(TITLE_BOOST * DOC_BOOST, outTitle[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outTitle[1].boost(), 0.0F);\n    //\n    assertEquals(FOO_BOOST * DOC_BOOST,   outFoo[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[1].boost(), 0.0F);\n    assertEquals(1.0F,                    outFoo[2].boost(), 0.0F);\n    //\n    assertEquals(TITLE_BOOST * DOC_BOOST, outText[0].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[1].boost(), 0.0F);\n    assertEquals(FOO_BOOST,               outText[2].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[3].boost(), 0.0F);\n    assertEquals(1.0F,                    outText[4].boost(), 0.0F);\n    \n    // copyField dest with no norms should not have received any boost\n    assertEquals(1.0F, outNoNorms[0].boost(), 0.0F);\n    assertEquals(1.0F, outNoNorms[1].boost(), 0.0F);\n    \n    // now index that SolrInputDocument to check the computed norms\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    SolrQueryRequest req = req(\"q\", \"id:42\");\n    try {\n      // very hack-ish\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n      DocList dl = ((ResultContext) rsp.getResponse()).getDocList();\n      assertTrue(\"can't find the doc we just added\", 1 == dl.size());\n      int docid = dl.iterator().nextDoc();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      LeafReader reader = SlowCompositeReaderWrapper.wrap(searcher.getTopReaderContext().reader());\n\n      assertTrue(\"similarity doesn't extend ClassicSimilarity, \" + \n                 \"config or defaults have changed since test was written\",\n                 searcher.getSimilarity(true) instanceof ClassicSimilarity);\n\n      ClassicSimilarity sim = (ClassicSimilarity) searcher.getSimilarity(true);\n      \n      NumericDocValues titleNorms = reader.getNormValues(\"title\");\n      NumericDocValues fooNorms = reader.getNormValues(\"foo_t\");\n      NumericDocValues textNorms =  reader.getNormValues(\"text\");\n\n      assertEquals(docid, titleNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2, TITLE_BOOST * DOC_BOOST),\n                   titleNorms.longValue());\n\n      assertEquals(docid, fooNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 8-3, FOO_BOOST * DOC_BOOST),\n                   fooNorms.longValue());\n\n      assertEquals(docid, textNorms.advance(docid));\n      assertEquals(expectedNorm(sim, 2 + 8-3, \n                                TITLE_BOOST * FOO_BOOST * DOC_BOOST),\n                   textNorms.longValue());\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","cfd28703065c4b03936cfebdd7192440dc10acf3"],"485545da3b4429d6f138b4baac573a97820ee93b":["cfd28703065c4b03936cfebdd7192440dc10acf3"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["485545da3b4429d6f138b4baac573a97820ee93b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["08970e5b8411182a29412c177eff67ec1110095b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ecd75942508378ccc92c3a26f71db6cba9f25784","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"08970e5b8411182a29412c177eff67ec1110095b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4148af0b1a0b6991d37fc16a075d88fc63068f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d4148af0b1a0b6991d37fc16a075d88fc63068f9","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cfd28703065c4b03936cfebdd7192440dc10acf3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ecd75942508378ccc92c3a26f71db6cba9f25784","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4148af0b1a0b6991d37fc16a075d88fc63068f9"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4148af0b1a0b6991d37fc16a075d88fc63068f9"],"acd9883560fd89e6448b2b447302fe543040cd4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"485545da3b4429d6f138b4baac573a97820ee93b":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["55980207f1977bd1463465de1659b821347e2fa8","cfd28703065c4b03936cfebdd7192440dc10acf3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d4148af0b1a0b6991d37fc16a075d88fc63068f9":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72","f2126b84bd093fa3d921582a109a0ee578c28126"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["08970e5b8411182a29412c177eff67ec1110095b"],"cfd28703065c4b03936cfebdd7192440dc10acf3":["55980207f1977bd1463465de1659b821347e2fa8","485545da3b4429d6f138b4baac573a97820ee93b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4148af0b1a0b6991d37fc16a075d88fc63068f9","f2126b84bd093fa3d921582a109a0ee578c28126"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}