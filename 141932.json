{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18c264904f4236696be3696a0d998a37931a8a50","date":1333699995,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSourceId() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public String getVersion() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public String getSource() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testRequestHandlerBaseException().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","sourceOld":"  @Test\n  public void testRequestHandlerBaseException() {\n    final String tmp = \"BOO! ignore_exception\";\n    SolrRequestHandler handler = new RequestHandlerBase() {\n        @Override\n        public String getDescription() { return tmp; }\n        @Override\n        public void handleRequestBody\n          ( SolrQueryRequest req, SolrQueryResponse rsp ) {\n          throw new RuntimeException(tmp);\n        }\n      };\n    handler.init(new NamedList());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    h.getCore().execute(handler, \n                        req,\n                        rsp);\n    assertNotNull(\"should have found an exception\", rsp.getException());\n    req.close();                    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["18c264904f4236696be3696a0d998a37931a8a50"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["18c264904f4236696be3696a0d998a37931a8a50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"18c264904f4236696be3696a0d998a37931a8a50":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["18c264904f4236696be3696a0d998a37931a8a50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"18c264904f4236696be3696a0d998a37931a8a50":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}