{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["3c89f80265f6c2148bf8702b01724ca046efdf07","3c89f80265f6c2148bf8702b01724ca046efdf07","3c89f80265f6c2148bf8702b01724ca046efdf07","3c89f80265f6c2148bf8702b01724ca046efdf07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5684446f7742dfb07c42296decc5e4d6515a0fe"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}