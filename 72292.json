{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","commits":[{"id":"f66f1826f07774581d2ec661444fc987bdd1a85d","date":1144730206,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"/dev/null","sourceNew":"  public void testSomeStuff() throws Exception {\n\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n    \n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n            \n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    // test allowDups default of false\n    \n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a","date":1145639412,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n    \n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n            \n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n    \n    // test allowDups default of false\n    \n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aef5adbca53f7820aa6289dda74f595ed816ac7","date":1166101420,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c238dad8c4234f556cd28cd22ff426247e70c4","date":1195490330,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2d498db48dab10fe3189cc64a80e334119d9683","date":1258992732,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2d498db48dab10fe3189cc64a80e334119d9683":["30c238dad8c4234f556cd28cd22ff426247e70c4"],"30c238dad8c4234f556cd28cd22ff426247e70c4":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f2d498db48dab10fe3189cc64a80e334119d9683"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["f66f1826f07774581d2ec661444fc987bdd1a85d"]},"commit2Childs":{"f2d498db48dab10fe3189cc64a80e334119d9683":["ad94625fb8d088209f46650c8097196fec67f00c"],"30c238dad8c4234f556cd28cd22ff426247e70c4":["f2d498db48dab10fe3189cc64a80e334119d9683"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f66f1826f07774581d2ec661444fc987bdd1a85d":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["30c238dad8c4234f556cd28cd22ff426247e70c4"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}