{"path":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","sourceNew":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","sourceOld":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}