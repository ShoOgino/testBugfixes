{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Cell#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link Cell#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Cell> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Cell subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Cell> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Cell> copy = new ArrayList<Cell>(cells.size());\n    for (Cell cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Node#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Node subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Node> copy = new ArrayList<Node>(cells.size());\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Cell#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link Cell#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Cell> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Cell subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Cell> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Cell> copy = new ArrayList<>(cells.size());\n    for (Cell cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Cell#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link Cell#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Cell> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Cell subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Cell> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Cell> copy = new ArrayList<Cell>(cells.size());\n    for (Cell cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","sourceNew":null,"sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Cell#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link Cell#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Cell> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Cell subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Cell> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Cell> copy = new ArrayList<>(cells.size());\n    for (Cell cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8259c159da2de2e8528524fb76b244b46cbded59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}