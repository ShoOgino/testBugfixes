{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"/dev/null","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"/dev/null","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"/dev/null","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b31fc7e5059a73d489e6d2e42007e58162cd63e","date":1327847278,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(30000);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a063e6dd3feb8e747df5a534ba6c258005213e4","date":1327855888,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(30000);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8b4dc0cb506204097b6e34b962947988b60e5d0","date":1342976066,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n    if (completionService == null) {\n      completionService = new ExecutorCompletionService<Request>(commExecutor);\n      pending = new HashSet<Future<Request>>();\n    }\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c24640e6ecba75f717cf7af96903ab8e4530ef","date":1343944730,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      throw new RuntimeException();\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      throw new RuntimeException();\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      throw new RuntimeException();\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        }\n        return clonedRequest;\n      }\n    };\n    \n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\"Update thread interrupted\");\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      throw new RuntimeException();\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\"Update thread interrupted\");\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      throw new RuntimeException();\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","date":1346817835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\"Update thread interrupted\");\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\"Update thread interrupted\");\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = new Request();\n        clonedRequest.node = sreq.node;\n        clonedRequest.ureq = sreq.ureq;\n        clonedRequest.retries = sreq.retries;\n        \n        try {\n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\"Update thread interrupted\");\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b3b4429a1ba56bb3c3596a9109bbd612d0417bc","date":1347684678,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw e;\n    }\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    pending.add(completionService.submit(task));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              updateShardHandler.getHttpClient());\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down\", e);\n    }\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              updateShardHandler.getHttpClient());\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down\", e);\n    }\n    \n  }\n\n","sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              client);\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw e;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Request).mjava","sourceNew":null,"sourceOld":"  public void submit(final Request sreq) {\n\n    final String url = sreq.node.getUrl();\n\n    Callable<Request> task = new Callable<Request>() {\n      @Override\n      public Request call() throws Exception {\n        Request clonedRequest = null;\n        try {\n          clonedRequest = new Request();\n          clonedRequest.node = sreq.node;\n          clonedRequest.ureq = sreq.ureq;\n          clonedRequest.retries = sreq.retries;\n          \n          String fullUrl;\n          if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            fullUrl = \"http://\" + url;\n          } else {\n            fullUrl = url;\n          }\n  \n          HttpSolrServer server = new HttpSolrServer(fullUrl,\n              updateShardHandler.getHttpClient());\n          \n          if (Thread.currentThread().isInterrupted()) {\n            clonedRequest.rspCode = 503;\n            clonedRequest.exception = new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down.\");\n            return clonedRequest;\n          }\n          \n          clonedRequest.ursp = server.request(clonedRequest.ureq);\n          \n          // currently no way to get the request body.\n        } catch (Exception e) {\n          clonedRequest.exception = e;\n          if (e instanceof SolrException) {\n            clonedRequest.rspCode = ((SolrException) e).code();\n          } else {\n            clonedRequest.rspCode = -1;\n          }\n        } finally {\n          semaphore.release();\n        }\n        return clonedRequest;\n      }\n    };\n    try {\n      semaphore.acquire();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Update thread interrupted\", e);\n    }\n    try {\n      pending.add(completionService.submit(task));\n    } catch (RejectedExecutionException e) {\n      semaphore.release();\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Shutting down\", e);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0b3b4429a1ba56bb3c3596a9109bbd612d0417bc","a69439d0df009e0bb0038d1e427159f449dd670d"],"2a063e6dd3feb8e747df5a534ba6c258005213e4":["7b31fc7e5059a73d489e6d2e42007e58162cd63e"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a69439d0df009e0bb0038d1e427159f449dd670d"],"a69439d0df009e0bb0038d1e427159f449dd670d":["0b3b4429a1ba56bb3c3596a9109bbd612d0417bc"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2a063e6dd3feb8e747df5a534ba6c258005213e4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["b8b4dc0cb506204097b6e34b962947988b60e5d0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","82c24640e6ecba75f717cf7af96903ab8e4530ef"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"7b31fc7e5059a73d489e6d2e42007e58162cd63e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["82c24640e6ecba75f717cf7af96903ab8e4530ef"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","82c24640e6ecba75f717cf7af96903ab8e4530ef"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"0b3b4429a1ba56bb3c3596a9109bbd612d0417bc":["a6378064655e76cd7b908b1cab4ce425b384b508"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2a063e6dd3feb8e747df5a534ba6c258005213e4":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","b8b4dc0cb506204097b6e34b962947988b60e5d0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["a6378064655e76cd7b908b1cab4ce425b384b508"],"82c24640e6ecba75f717cf7af96903ab8e4530ef":["8fd5be977c105554c6a7b68afcdbc511439723ab","6013b4c7388f1627659c8f96c44abd10a294d3a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"7b31fc7e5059a73d489e6d2e42007e58162cd63e":["2a063e6dd3feb8e747df5a534ba6c258005213e4"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","05a14b2611ead08655a2b2bdc61632eb31316e57"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["0b3b4429a1ba56bb3c3596a9109bbd612d0417bc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7b31fc7e5059a73d489e6d2e42007e58162cd63e","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"b8b4dc0cb506204097b6e34b962947988b60e5d0":["82c24640e6ecba75f717cf7af96903ab8e4530ef","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0b3b4429a1ba56bb3c3596a9109bbd612d0417bc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}