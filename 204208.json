{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","commits":[{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n        \n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeCommit(CommitUpdateCommand,int).mjava","sourceNew":"  public long writeCommit(CommitUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeCommit(CommitUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.COMMIT | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        codec.writeStr(END_MESSAGE);  // ensure these bytes are (almost) last in the file\n\n        endRecord(pos);\n\n        fos.flush();  // flush since this will be the last record in a log fill\n        assert fos.size() == channel.size();\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e99829242bceda4cf974ec0eb5d82d713615b3da","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e99829242bceda4cf974ec0eb5d82d713615b3da"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["86290366cefc1b9d4eced13b430858c4a4c0421d","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["86290366cefc1b9d4eced13b430858c4a4c0421d","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"e99829242bceda4cf974ec0eb5d82d713615b3da":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c","3599646b4d4c346cf74d334813488b8b337b5bf5"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}