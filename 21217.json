{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","commits":[{"id":"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","date":1361042054,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(int maxDoc, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(SortedSetDocValues.EMPTY, expected);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n    // compare ord lists\n    for (int i = 0; i < maxDoc; i++) {\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        assertEquals(expectedOrd, actual.nextOrd());\n      }\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n    \n    // compare ord dictionary\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      expected.lookupTerm(expectedBytes);\n      actual.lookupTerm(actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#assertEquals(int,SortedSetDocValues,SortedSetDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(SortedSetDocValues.EMPTY, expected);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n    // compare ord lists\n    for (int i = 0; i < maxDoc; i++) {\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        assertEquals(expectedOrd, actual.nextOrd());\n      }\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n    \n    // compare ord dictionary\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      expected.lookupTerm(expectedBytes);\n      actual.lookupTerm(actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedSetDocValues expected, SortedSetDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(SortedSetDocValues.EMPTY, expected);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n    // compare ord lists\n    for (int i = 0; i < maxDoc; i++) {\n      expected.setDocument(i);\n      actual.setDocument(i);\n      long expectedOrd;\n      while ((expectedOrd = expected.nextOrd()) != NO_MORE_ORDS) {\n        assertEquals(expectedOrd, actual.nextOrd());\n      }\n      assertEquals(NO_MORE_ORDS, actual.nextOrd());\n    }\n    \n    // compare ord dictionary\n    BytesRef expectedBytes = new BytesRef();\n    BytesRef actualBytes = new BytesRef();\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      expected.lookupTerm(expectedBytes);\n      actual.lookupTerm(actualBytes);\n      assertEquals(expectedBytes, actualBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}