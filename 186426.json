{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","commits":[{"id":"840fc95f31a25d020cd825e880018bcfa0bacc71","date":1393483822,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.currentTimeMillis() +3000;\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.currentTimeMillis() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.currentTimeMillis() +3000;\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.currentTimeMillis() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.currentTimeMillis() +3000;\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.currentTimeMillis() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb4db141b31e99d2285436da1428411ed5501f56","date":1394114795,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["8b81868c96ab084d96d4589dd330753c529bc450","8b81868c96ab084d96d4589dd330753c529bc450","8b81868c96ab084d96d4589dd330753c529bc450"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b51e891605604cf911ab579fb28c49b26749f93","date":1394126258,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#lookupReplicas(String,Collection[String]).mjava","sourceNew":"  private Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(\n          collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      }\n      if (System.nanoTime() > endTime) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas in cluster state.\");\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  private Map<String, Replica> lookupReplicas(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<String, Replica>();\n    long endTime = System.nanoTime() + TimeUnit.NANOSECONDS.convert(3, TimeUnit.SECONDS);\n    for(;;) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String  coreName : coreNames) {\n        if(result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if(coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName,replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if(result.size() == coreNames.size()) {\n        return result;\n      }\n      if( System.nanoTime() > endTime) {\n        //time up . throw exception and go out\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to create replica entries in ZK\");\n      }\n\n      Thread.sleep(100);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["fd5bc858b8426d40bbe90b94120ead37c77d7954","eb4db141b31e99d2285436da1428411ed5501f56"],"6b51e891605604cf911ab579fb28c49b26749f93":["fd5bc858b8426d40bbe90b94120ead37c77d7954","eb4db141b31e99d2285436da1428411ed5501f56"],"840fc95f31a25d020cd825e880018bcfa0bacc71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb4db141b31e99d2285436da1428411ed5501f56":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","840fc95f31a25d020cd825e880018bcfa0bacc71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb4db141b31e99d2285436da1428411ed5501f56"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["840fc95f31a25d020cd825e880018bcfa0bacc71"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"6b51e891605604cf911ab579fb28c49b26749f93":[],"840fc95f31a25d020cd825e880018bcfa0bacc71":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"eb4db141b31e99d2285436da1428411ed5501f56":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["840fc95f31a25d020cd825e880018bcfa0bacc71","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","eb4db141b31e99d2285436da1428411ed5501f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6b51e891605604cf911ab579fb28c49b26749f93","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}