{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ReducerStream#read().mjava","commits":[{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ReducerStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ReducerStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ReducerStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}