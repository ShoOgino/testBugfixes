{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","commits":[{"id":"98a20a1a0f02e19e5121d1b5d95f5af857d609ef","date":1382205865,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithinOnDelete().mjava","sourceNew":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    server.add(doc3);\n    server.commit();\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(server);\n    \n    // the document should still be there\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    long timeout = System.currentTimeMillis() + 30000;\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (System.currentTimeMillis() < timeout);\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","sourceOld":" @Test\n public void testCommitWithinOnDelete() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    server.add(doc3);\n    server.commit();\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process( server );\n    \n    // the document should still be there\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    long timeout = System.currentTimeMillis() + 30000;\n    do {\n      Thread.sleep( 250 ); // wait 250 ms\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n      if(rsp.getResults().getNumFound()==0) {\n        return;\n      }\n    } while(System.currentTimeMillis()<timeout);\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","sourceNew":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    long timeout = System.currentTimeMillis() + 30000;\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (System.currentTimeMillis() < timeout);\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    server.add(doc3);\n    server.commit();\n    \n    // now check that it comes out...\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(server);\n    \n    // the document should still be there\n    rsp = server.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    long timeout = System.currentTimeMillis() + 30000;\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = server.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (System.currentTimeMillis() < timeout);\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","sourceNew":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (! timeout.hasTimedOut());\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    long timeout = System.currentTimeMillis() + 30000;\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (System.currentTimeMillis() < timeout);\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","sourceNew":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\");\n    doc3.addField(\"name\", \"doc3\");\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (! timeout.hasTimedOut());\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\", 1.0f);\n    doc3.addField(\"name\", \"doc3\", 1.0f);\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (! timeout.hasTimedOut());\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTestsBase#testCommitWithinOnDelete().mjava","sourceNew":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\");\n    doc3.addField(\"name\", \"doc3\");\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (! timeout.hasTimedOut());\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithinOnDelete() throws Exception {\n    // make sure it is empty...\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n    \n    // Now add one document...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField(\"id\", \"id3\");\n    doc3.addField(\"name\", \"doc3\");\n    doc3.addField(\"price\", 10);\n    client.add(doc3);\n    client.commit();\n    \n    // now check that it comes out...\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // now test commitWithin on a delete\n    UpdateRequest up = new UpdateRequest();\n    up.setCommitWithin(1000);\n    up.deleteById(\"id3\");\n    up.process(client);\n    \n    // the document should still be there\n    rsp = client.query(new SolrQuery(\"id:id3\"));\n    Assert.assertEquals(1, rsp.getResults().getNumFound());\n    \n    // check if the doc has been deleted every 250 ms for 30 seconds\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    do {\n      Thread.sleep(250); // wait 250 ms\n      \n      rsp = client.query(new SolrQuery(\"id:id3\"));\n      if (rsp.getResults().getNumFound() == 0) {\n        return;\n      }\n    } while (! timeout.hasTimedOut());\n    \n    Assert.fail(\"commitWithin failed to commit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"98a20a1a0f02e19e5121d1b5d95f5af857d609ef":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98a20a1a0f02e19e5121d1b5d95f5af857d609ef"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["acd9883560fd89e6448b2b447302fe543040cd4f"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}