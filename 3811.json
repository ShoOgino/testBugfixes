{"path":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","commits":[{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReload() {\n    oerp.init(mockParams);\n    oerp.inform(loader);\n    assertTrue(oerp.reload());\n    assertEquals(\"USD\", oerp.rates.getBaseCurrency());\n    assertEquals(new Long(1332070464L), new Long(oerp.rates.getTimestamp()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98f865ee54dfb817d8df8da1de0a2432a4a54daf","date":1378244391,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","sourceNew":"  @Test\n  public void testReload() {\n    // reminder: interval is in minutes\n    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, \"100\");\n    oerp.init(mockParams);\n    oerp.inform(loader);\n\n    // reminder: timestamp is in seconds\n    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n    // modify the timestamp to be \"current\" then fetch a rate and ensure no reload\n    final long currentTimestamp = (long) (System.currentTimeMillis() / 1000);\n    oerp.rates.setTimestamp(currentTimestamp);\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(currentTimestamp, oerp.rates.getTimestamp());\n\n    // roll back clock on timestamp and ensure rate fetch does reload\n    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(\"timestamp wasn't reset to hardcoded value, indicating no reload\",\n                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReload() {\n    oerp.init(mockParams);\n    oerp.inform(loader);\n    assertTrue(oerp.reload());\n    assertEquals(\"USD\", oerp.rates.getBaseCurrency());\n    assertEquals(new Long(1332070464L), new Long(oerp.rates.getTimestamp()));\n  }\n\n","bugFix":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct rates file contents\")\n  @Test\n  public void testReload() {\n    // reminder: interval is in minutes\n    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, \"100\");\n    oerp.init(mockParams);\n    oerp.inform(loader);\n\n    // reminder: timestamp is in seconds\n    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n    // modify the timestamp to be \"current\" then fetch a rate and ensure no reload\n    final long currentTimestamp = (long) (System.currentTimeMillis() / 1000);\n    oerp.rates.setTimestamp(currentTimestamp);\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(currentTimestamp, oerp.rates.getTimestamp());\n\n    // roll back clock on timestamp and ensure rate fetch does reload\n    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(\"timestamp wasn't reset to hardcoded value, indicating no reload\",\n                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n  }\n\n","sourceOld":"  @Test\n  public void testReload() {\n    // reminder: interval is in minutes\n    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, \"100\");\n    oerp.init(mockParams);\n    oerp.inform(loader);\n\n    // reminder: timestamp is in seconds\n    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n    // modify the timestamp to be \"current\" then fetch a rate and ensure no reload\n    final long currentTimestamp = (long) (System.currentTimeMillis() / 1000);\n    oerp.rates.setTimestamp(currentTimestamp);\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(currentTimestamp, oerp.rates.getTimestamp());\n\n    // roll back clock on timestamp and ensure rate fetch does reload\n    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(\"timestamp wasn't reset to hardcoded value, indicating no reload\",\n                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/OpenExchangeRatesOrgProviderTest#testReload().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct rates file contents\")\n  @Test\n  public void testReload() {\n    // reminder: interval is in minutes\n    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, \"100\");\n    oerp.init(mockParams);\n    oerp.inform(loader);\n\n    // reminder: timestamp is in seconds\n    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n    // modify the timestamp to be \"current\" then fetch a rate and ensure no reload\n    final long currentTimestamp = System.currentTimeMillis() / 1000;\n    oerp.rates.setTimestamp(currentTimestamp);\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(currentTimestamp, oerp.rates.getTimestamp());\n\n    // roll back clock on timestamp and ensure rate fetch does reload\n    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(\"timestamp wasn't reset to hardcoded value, indicating no reload\",\n                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct rates file contents\")\n  @Test\n  public void testReload() {\n    // reminder: interval is in minutes\n    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, \"100\");\n    oerp.init(mockParams);\n    oerp.inform(loader);\n\n    // reminder: timestamp is in seconds\n    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n    // modify the timestamp to be \"current\" then fetch a rate and ensure no reload\n    final long currentTimestamp = (long) (System.currentTimeMillis() / 1000);\n    oerp.rates.setTimestamp(currentTimestamp);\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(currentTimestamp, oerp.rates.getTimestamp());\n\n    // roll back clock on timestamp and ensure rate fetch does reload\n    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));\n    assertEquals(81.29D, oerp.getExchangeRate(\"USD\", \"JPY\"), 0.0D);    \n    assertEquals(\"timestamp wasn't reset to hardcoded value, indicating no reload\",\n                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a62481aacca928b5c069e6f825ef49c7b6586d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"7a62481aacca928b5c069e6f825ef49c7b6586d8":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e98520789adb1d5ad05afb4956eca0944a929688"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}