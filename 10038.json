{"path":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","commits":[{"id":"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79","date":1050978317,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","pathOld":"/dev/null","sourceNew":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n            case AND:\n                result.and(filter.bits(reader));\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n            case XOR:\n                result.xor(filter.bits(reader));\n            default:\n                doChain(result, reader, DEFAULT, filter);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80243c97e6a5bf8a3715b9c032880cd603840ec","date":1056331032,"type":3,"author":"Kelvin Tan","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","sourceNew":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n                break;\n            case AND:\n                result.and(filter.bits(reader));\n                break;\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n                break;\n            case XOR:\n                result.xor(filter.bits(reader));\n                break;\n            default:\n                doChain(result, reader, DEFAULT, filter);\n                break;          \n        }\n    }\n\n","sourceOld":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n            case AND:\n                result.and(filter.bits(reader));\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n            case XOR:\n                result.xor(filter.bits(reader));\n            default:\n                doChain(result, reader, DEFAULT, filter);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","sourceNew":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n                break;\n            case AND:\n                result.and(filter.bits(reader));\n                break;\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n                break;\n            case XOR:\n                result.xor(filter.bits(reader));\n                break;\n            default:\n                doChain(result, reader, DEFAULT, filter);\n                break;\n        }\n    }\n\n","sourceOld":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n                break;\n            case AND:\n                result.and(filter.bits(reader));\n                break;\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n                break;\n            case XOR:\n                result.xor(filter.bits(reader));\n                break;\n            default:\n                doChain(result, reader, DEFAULT, filter);\n                break;          \n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17aa383cdefa6c6eb46c3288753026d489892e36","date":1114593391,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#doChain(BitSet,IndexReader,int,Filter).mjava","sourceNew":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n                break;\n            case AND:\n                result.and(filter.bits(reader));\n                break;\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n                break;\n            case XOR:\n                result.xor(filter.bits(reader));\n                break;\n            default:\n                doChain(result, reader, DEFAULT, filter);\n                break;\n        }\n    }\n\n","sourceOld":"    private void doChain(BitSet result, IndexReader reader,\n                         int logic, Filter filter) throws IOException\n    {\n        switch (logic)\n        {\n            case OR:\n                result.or(filter.bits(reader));\n                break;\n            case AND:\n                result.and(filter.bits(reader));\n                break;\n            case ANDNOT:\n                result.andNot(filter.bits(reader));\n                break;\n            case XOR:\n                result.xor(filter.bits(reader));\n                break;\n            default:\n                doChain(result, reader, DEFAULT, filter);\n                break;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17aa383cdefa6c6eb46c3288753026d489892e36":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["c80243c97e6a5bf8a3715b9c032880cd603840ec"],"c80243c97e6a5bf8a3715b9c032880cd603840ec":["1b9bf80497a9632e1675d4f7d7f73ae1d800cf79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17aa383cdefa6c6eb46c3288753026d489892e36"]},"commit2Childs":{"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79":["c80243c97e6a5bf8a3715b9c032880cd603840ec"],"17aa383cdefa6c6eb46c3288753026d489892e36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b9bf80497a9632e1675d4f7d7f73ae1d800cf79"],"afc16d717d9ed1a8e45371668ca6de674164d624":["17aa383cdefa6c6eb46c3288753026d489892e36"],"c80243c97e6a5bf8a3715b9c032880cd603840ec":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}