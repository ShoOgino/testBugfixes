{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c13ac3312389224caec142b1fa4e837caa80ee0","date":1279383717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(0),\n      Integer.valueOf(4), Integer.valueOf(4),\n      Integer.valueOf(8), Integer.valueOf(8),\n      Integer.valueOf(12)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4), Integer.valueOf(8)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(56)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(60)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(62)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(63)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList().iterator(), Collections.<Integer>emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"778eb8d25c0eed19bb220d78402ae26e3f67c2d9","date":1279386974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(0),\n      Integer.valueOf(4), Integer.valueOf(4),\n      Integer.valueOf(8), Integer.valueOf(8),\n      Integer.valueOf(12)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4), Integer.valueOf(8)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(56)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(60)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(62)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(63)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList().iterator(), Collections.<Integer>emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n  }\n\n","bugFix":["6bcde5e3f23911110baa101ed062b544162825b5","53b6c192847de8643a5da505cc433cbf8476a175","0c13ac3312389224caec142b1fa4e837caa80ee0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x7fffffffffffec7fL),\n      Long.valueOf(0x8000000000002510L),Long.valueOf(0x800000000000251cL),\n      Long.valueOf(0x7fffffffffffec8L), Long.valueOf(0x7fffffffffffecfL),\n      Long.valueOf(0x800000000000250L), Long.valueOf(0x800000000000250L),\n      Long.valueOf(0x7fffffffffffedL),  Long.valueOf(0x7fffffffffffefL),\n      Long.valueOf(0x80000000000020L),  Long.valueOf(0x80000000000024L),\n      Long.valueOf(0x7ffffffffffffL),   Long.valueOf(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x7fffffffffffec78L),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000040L), Long.valueOf(0x800000000000043L),\n      Long.valueOf(0x80000000000000L),  Long.valueOf(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x00L),Long.valueOf(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x0L),Long.valueOf(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections. <Long> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      Long.valueOf(0x800000000000251cL),Long.valueOf(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","0c13ac3312389224caec142b1fa4e837caa80ee0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c13ac3312389224caec142b1fa4e837caa80ee0":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}