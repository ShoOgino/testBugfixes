{"path":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = (TermsEnum) threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = (TermsEnum) threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = (TermsEnum) threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator()} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator()} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator()} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  protected TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator(TermsEnum)} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator(null);\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","sourceOld":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator()} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator();\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#getThreadTermsEnum().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a thread-private {@link TermsEnum} instance. Obtaining\n   * {@link TermsEnum} from this method might be more efficient than using\n   * {@link #iterator(TermsEnum)} directly since this method doesn't necessarily create a\n   * new {@link TermsEnum} instance.\n   * <p>\n   * NOTE: {@link TermsEnum} instances obtained from this method must not be\n   * shared across threads. The enum should only be used within a local context\n   * where other threads can't access it.\n   * \n   * @return a thread-private {@link TermsEnum} instance\n   * @throws IOException\n   *           if an IOException occurs\n   * @lucene.internal\n   */\n  public TermsEnum getThreadTermsEnum() throws IOException {\n    TermsEnum termsEnum = threadEnums.get();\n    if (termsEnum == null) {\n      termsEnum = iterator(null);\n      threadEnums.set(termsEnum);\n    }\n    return termsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["068265517d1fbc623f5aeaee57fcd8df925678e4","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","068265517d1fbc623f5aeaee57fcd8df925678e4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"068265517d1fbc623f5aeaee57fcd8df925678e4":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["068265517d1fbc623f5aeaee57fcd8df925678e4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e2297162a22c55456e200caef2cbcb00fe381120":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e2297162a22c55456e200caef2cbcb00fe381120"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cc749c053615f5871f3b95715fe292f34e70a53","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}