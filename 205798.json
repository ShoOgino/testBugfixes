{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","sourceNew":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","sourceOld":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","sourceNew":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","sourceOld":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","sourceNew":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","sourceOld":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","sourceNew":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","sourceOld":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testFirstWordisStopWord().mjava","sourceNew":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","sourceOld":"  /**\n   * Test CommonGramsQueryFilter in the case that the first word is a stopword\n   */\n  public void testFirstWordisStopWord() throws Exception {\n    final String input = \"the dog\";\n    MockTokenizer wt = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wt.setReader(new StringReader(input));\n    CommonGramsFilter cgf = new CommonGramsFilter(TEST_VERSION_CURRENT, wt, commonWords);\n    TokenFilter nsf = new CommonGramsQueryFilter(cgf);\n    assertTokenStreamContents(nsf, new String[] { \"the_dog\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}