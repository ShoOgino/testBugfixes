{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","commits":[{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /** Returns top groups, starting from offset.  This may\n   *  return null, if no groups were collected, or if the\n   *  number of unique groups collected is <= offset. */\n  public Collection<SearchGroup> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup> result = new ArrayList<SearchGroup>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup searchGroup = new SearchGroup();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /** Returns top groups, starting from offset.  This may\n   *  return null, if no groups were collected, or if the\n   *  number of unique groups collected is <= offset. */\n  public Collection<SearchGroup> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup> result = new ArrayList<SearchGroup>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup searchGroup = new SearchGroup();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Comparable[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is <= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<SearchGroup<GROUP_VALUE_TYPE>>();\n    int upto = 0;\n    final int sortFieldCount = groupSort.getSort().length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<GROUP_VALUE_TYPE>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","1fa60a501961bce2ff07ee1cde7c78699025547e","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["c715a0f99152be7566591f323c6c5a25725a1bcb","d4aa50b979cd392e00e5bc0f23f78cbd106cb968","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c715a0f99152be7566591f323c6c5a25725a1bcb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}