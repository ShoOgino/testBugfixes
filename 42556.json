{"path":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      throw new SolrException( 400, \"missing content stream\" );\n    }\n\n    \n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      String charset = getCharsetFromContentType( stream.getContentType() );\n      Reader reader = null;\n      if( charset == null ) {\n        reader = new InputStreamReader( stream.getStream() );\n      }\n      else {\n        reader = new InputStreamReader( stream.getStream(), charset );\n      }\n      rsp.add( \"update\", this.update( reader ) );\n      \n      // Make sure its closed\n      try { reader.close(); } catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"440157898846af9a00b84382942df3f6e3c41a93","date":1175189311,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      throw new SolrException( 400, \"missing content stream\" );\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        rsp.add( \"update\", this.update( reader ) );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      throw new SolrException( 400, \"missing content stream\" );\n    }\n\n    \n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      String charset = getCharsetFromContentType( stream.getContentType() );\n      Reader reader = null;\n      if( charset == null ) {\n        reader = new InputStreamReader( stream.getStream() );\n      }\n      else {\n        reader = new InputStreamReader( stream.getStream(), charset );\n      }\n      rsp.add( \"update\", this.update( reader ) );\n      \n      // Make sure its closed\n      try { reader.close(); } catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5992372a0b4dffa024ea5ce638410723e4687c62","date":1175440405,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( 400, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        rsp.add( \"update\", this.update( reader ) );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      throw new SolrException( 400, \"missing content stream\" );\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        rsp.add( \"update\", this.update( reader ) );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01332993edd169beaf066de697712ec7fcff8590","date":1177878513,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( 400, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( reader );\n        // TODO -- return useful info.  \n        // rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( 400, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        rsp.add( \"update\", this.update( reader ) );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( reader );\n        // TODO -- return useful info.  \n        // rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( 400, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( reader );\n        // TODO -- return useful info.  \n        // rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b27e1327d2a2f9ea6abc93e203d0219091f09f3","date":1183228826,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( reader );\n        // TODO -- return useful info.  \n        // rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n\n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( reader );\n        // TODO -- return useful info.  \n        // rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039ee26c484fda13f0428eeeb09969370ff9149","date":1183229536,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n    \n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( req, req.getCore(), reader );\n        rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n    \n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( req, req.getCore(), reader );\n        rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(req, rsp, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n      return;\n    }\n    \n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    // Cycle through each stream\n    for( ContentStream stream : req.getContentStreams() ) {\n      Reader reader = stream.getReader();\n      try {\n        NamedList out = this.update( req, req.getCore(), reader );\n        rsp.add( \"update\", out );\n      }\n      finally {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n    \n    // perhaps commit when we are done\n    RequestHandlerUtils.handleCommit(req, rsp, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf","date":1190224983,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLInputFactory inputFactory = BaseXMLInputFactory.newInstance();\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d251a92048ac6223541a40d02ce1d472d7c3659","date":1190230853,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLInputFactory inputFactory = BaseXMLInputFactory.newInstance();\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorFactory processorFactory = \n      req.getCore().getUpdateProcessorFactory( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processorFactory.getInstance(req, rsp, null);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b909e7d84d56c113538485360000872547c3cfd","date":1219961929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e97a7d6ce275d5deea94b74ce25d8551202f9ba","date":1223943844,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          if( log.isTraceEnabled() ) {\n            String body = IOUtils.toString( reader );\n            log.trace( \"body\", body );\n            reader = new StringReader( body );\n          }\n          \n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d","date":1224067136,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          if( log.isTraceEnabled() ) {\n            String body = IOUtils.toString( reader );\n            log.trace( \"body\", body );\n            reader = new StringReader( body );\n          }\n          \n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n      // Perhaps rollback from the parameters\n      RequestHandlerUtils.handleRollback( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if( !RequestHandlerUtils.handleCommit(processor, params, false) ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\" );\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          if( log.isTraceEnabled() ) {\n            String body = IOUtils.toString( reader );\n            log.trace( \"body\", body );\n            reader = new StringReader( body );\n          }\n          \n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {    \n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processingChain = \n      req.getCore().getUpdateProcessingChain( params.get( UpdateParams.UPDATE_PROCESSOR ) );\n    \n    UpdateRequestProcessor processor = processingChain.createProcessor(req, rsp);\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if( streams == null ) {\n      if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n    }\n    else {\n      // Cycle through each stream\n      for( ContentStream stream : req.getContentStreams() ) {\n        Reader reader = stream.getReader();\n        try {\n          if( log.isTraceEnabled() ) {\n            String body = IOUtils.toString( reader );\n            log.trace( \"body\", body );\n            reader = new StringReader( body );\n          }\n          \n          XMLStreamReader parser = inputFactory.createXMLStreamReader(reader);\n          this.processUpdate( processor, parser );\n        }\n        finally {\n          IOUtils.closeQuietly(reader);\n        }\n      }\n      \n      // Perhaps commit from the parameters\n      RequestHandlerUtils.handleCommit( processor, params, false );\n      // Perhaps rollback from the parameters\n      RequestHandlerUtils.handleRollback( processor, params, false );\n    }\n    \n    // finish the request\n    processor.finish(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4039ee26c484fda13f0428eeeb09969370ff9149":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"440157898846af9a00b84382942df3f6e3c41a93":["d80013b5e260def972025c93a0b08524f9c38f49"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["6589002090bd74db749eef5befe2f447c0e3dd49"],"2e97a7d6ce275d5deea94b74ce25d8551202f9ba":["8b909e7d84d56c113538485360000872547c3cfd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d656bfb8102419b4568f368a9606efc4f059912e":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"5992372a0b4dffa024ea5ce638410723e4687c62":["440157898846af9a00b84382942df3f6e3c41a93"],"5d251a92048ac6223541a40d02ce1d472d7c3659":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["01332993edd169beaf066de697712ec7fcff8590"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["2e97a7d6ce275d5deea94b74ce25d8551202f9ba"],"01332993edd169beaf066de697712ec7fcff8590":["5992372a0b4dffa024ea5ce638410723e4687c62"],"8b909e7d84d56c113538485360000872547c3cfd":["d656bfb8102419b4568f368a9606efc4f059912e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["4039ee26c484fda13f0428eeeb09969370ff9149"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4039ee26c484fda13f0428eeeb09969370ff9149":["6589002090bd74db749eef5befe2f447c0e3dd49"],"440157898846af9a00b84382942df3f6e3c41a93":["5992372a0b4dffa024ea5ce638410723e4687c62"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"2e97a7d6ce275d5deea94b74ce25d8551202f9ba":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"d656bfb8102419b4568f368a9606efc4f059912e":["8b909e7d84d56c113538485360000872547c3cfd"],"5992372a0b4dffa024ea5ce638410723e4687c62":["01332993edd169beaf066de697712ec7fcff8590"],"5d251a92048ac6223541a40d02ce1d472d7c3659":["d656bfb8102419b4568f368a9606efc4f059912e"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"d80013b5e260def972025c93a0b08524f9c38f49":["440157898846af9a00b84382942df3f6e3c41a93"],"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"01332993edd169beaf066de697712ec7fcff8590":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"8b909e7d84d56c113538485360000872547c3cfd":["2e97a7d6ce275d5deea94b74ce25d8551202f9ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6589002090bd74db749eef5befe2f447c0e3dd49":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["4039ee26c484fda13f0428eeeb09969370ff9149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e34a66231ee53fe909c5f7c0e71131fcb5246d89","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}