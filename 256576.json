{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","commits":[{"id":"4bec5cc4b39c21d07f1ad4b306c40032b7f8f3f6","date":1433720389,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","pathOld":"/dev/null","sourceNew":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f","date":1439766922,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(TestUtil.alwaysDocValuesFormat(getDocValuesFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(FIELD_NAME, -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(FIELD_NAME, -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(\"field\", -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(\"field\", -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumBytes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testWrongNumBytes() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[1][];\n    point[0] = new byte[10];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true}, point, new boolean[] {true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with bytesPerDim=8 but this query has bytesPerDim=10\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(TestUtil.alwaysDocValuesFormat(getDocValuesFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(FIELD_NAME, -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(FIELD_NAME, -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testWrongNumDims().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testAccountableHasDelegate().mjava","sourceNew":"  public void testWrongNumDims() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", Long.MIN_VALUE));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    byte[][] point = new byte[2][];\n    try {\n      s.count(new DimensionalRangeQuery(\"value\", point, new boolean[] {true, true}, point, new boolean[] {true, true}));\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"field=\\\"value\\\" was indexed with numDims=1 but this query has numDims=2\", iae.getMessage());\n    }\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testAccountableHasDelegate() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(TestUtil.alwaysDocValuesFormat(getDocValuesFormat()));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BKDPointField(FIELD_NAME, -18.2861, 147.7));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n    // Need to run a query so the DV field is really loaded:\n    TopDocs hits = s.search(new BKDPointInBBoxQuery(FIELD_NAME, -30, 0, 140, 150), 1);\n    assertEquals(1, hits.totalHits);\n    assertTrue(Accountables.toString((Accountable) r.leaves().get(0).reader()).contains(\"delegate\"));\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4bec5cc4b39c21d07f1ad4b306c40032b7f8f3f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["4bec5cc4b39c21d07f1ad4b306c40032b7f8f3f6"]},"commit2Childs":{"4bec5cc4b39c21d07f1ad4b306c40032b7f8f3f6":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bec5cc4b39c21d07f1ad4b306c40032b7f8f3f6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}