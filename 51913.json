{"path":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        buffer = reuse.buffer;\n        buffer.reset();\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        buffer = ByteBuffersDataOutput.newResettableInstance();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = buffer.size();\n        addPositions(in, buffer);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n\n      this.postingInput = buffer.toDataInput();\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#SortingPostingsEnum(int,SortingPostingsEnum,PostingsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        buffer = reuse.buffer;\n        buffer.reset();\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        buffer = ByteBuffersDataOutput.newResettableInstance();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = buffer.size();\n        addPositions(in, buffer);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n\n      this.postingInput = buffer.toDataInput();\n    }\n\n","sourceOld":"    SortingPostingsEnum(int maxDoc, SortingPostingsEnum reuse, final PostingsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        buffer = reuse.buffer;\n        buffer.reset();\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        buffer = ByteBuffersDataOutput.newResettableInstance();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = ArrayUtil.growExact(docs, newLength);\n          offsets = ArrayUtil.growExact(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = buffer.size();\n        addPositions(in, buffer);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n\n      this.postingInput = buffer.toDataInput();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["9798d0818e7a880546802b509792d3f3d57babd2"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["d470c8182e92b264680e34081b75e70a9f2b3c89","9798d0818e7a880546802b509792d3f3d57babd2"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"9798d0818e7a880546802b509792d3f3d57babd2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d470c8182e92b264680e34081b75e70a9f2b3c89","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"9798d0818e7a880546802b509792d3f3d57babd2":["409da428f28953cf35fddd5c9ff5c7e4f5439863","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}