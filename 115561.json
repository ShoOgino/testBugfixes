{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    OriginalQueryParserHelper qp = new OriginalQueryParserHelper();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.UN_TOKENIZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer());\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testFarsiRangeCollating().mjava","sourceNew":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeCollating() throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the\n    // Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n    qp.setRangeCollator(c);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the\n    // single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not\n    // supported).\n\n    // Test ConstantScoreRangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    ScoreDoc[] result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"),\n        null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    result = is.search(qp.parse(\"[ \\u062F TO \\u0698 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(qp.parse(\"[ \\u0633 TO \\u0638 ]\", \"content\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"4256bc1b3c94786287ccdfc751230374521843cf":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8a848e758754282137f42bf85793c278e250390":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4256bc1b3c94786287ccdfc751230374521843cf":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}