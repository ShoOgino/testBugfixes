{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","commits":[{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = config.getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=2;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["ae75def1e2525383b6e1397ed97c44387da9941c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}