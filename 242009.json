{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","commits":[{"id":"d138d793b239578797b1bfba40d7bff269992497","date":1452821308,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c","date":1454808351,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","sourceNew":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new HttpSolrClient(nodeURL);\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","sourceOld":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","sourceNew":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new HttpSolrClient(nodeURL);\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","sourceOld":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","sourceNew":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new Builder(nodeURL).build();\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","sourceOld":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new HttpSolrClient(nodeURL);\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl#getDatabaseProductVersion().mjava","sourceNew":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new Builder(nodeURL).build();\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","sourceOld":"  @Override\n  public String getDatabaseProductVersion() throws SQLException {\n    // Returns the version for the first live node in the Solr cluster.\n    SolrQuery sysQuery = new SolrQuery();\n    sysQuery.setRequestHandler(\"/admin/info/system\");\n\n    CloudSolrClient cloudSolrClient = this.connection.getClient();\n    Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n    SolrClient solrClient = null;\n    for (String node : liveNodes) {\n      try {\n        String nodeURL = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(node);\n        solrClient = new HttpSolrClient(nodeURL);\n\n        QueryResponse rsp = solrClient.query(sysQuery);\n        return String.valueOf(((SimpleOrderedMap) rsp.getResponse().get(\"lucene\")).get(\"solr-spec-version\"));\n      } catch (SolrServerException | IOException ignore) {\n        return \"\";\n      } finally {\n        if (solrClient != null) {\n          try {\n            solrClient.close();\n          } catch (IOException ignore) {\n            // Don't worry about failing to close the Solr client\n          }\n        }\n      }\n    }\n\n    // If no version found just return empty string\n    return \"\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd75f58072bba84066e89d61bd7028de1bd5b632":["d138d793b239578797b1bfba40d7bff269992497","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"d138d793b239578797b1bfba40d7bff269992497":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["0b28b82b1214a85c0ebf5455e17f96a096eb6c6c","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["d138d793b239578797b1bfba40d7bff269992497"]},"commit2Childs":{"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d138d793b239578797b1bfba40d7bff269992497":["dd75f58072bba84066e89d61bd7028de1bd5b632","0b28b82b1214a85c0ebf5455e17f96a096eb6c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d138d793b239578797b1bfba40d7bff269992497"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b28b82b1214a85c0ebf5455e17f96a096eb6c6c":["dd75f58072bba84066e89d61bd7028de1bd5b632","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}