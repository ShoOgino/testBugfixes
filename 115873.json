{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","commits":[{"id":"feec55b6e9aaab41be57a5001b31fa14c3925ae4","date":1476170434,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestSparseDISI#doTestRandom(Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTestRandom(Directory dir) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    final int maxStep = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 2, 10));\n    final int numDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int doc = -1, i = 0; i < numDocs; ++i) {\n      doc += TestUtil.nextInt(random(), 1, maxStep);\n      docs.add(doc);\n    }\n    final int maxDoc = docs.get(docs.size() - 1) + TestUtil.nextInt(random(), 1, 100);\n\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    for (int doc : docs) {\n      set.set(doc);\n    }\n\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI.writeBitSet(new BitSetIterator(set, docs.size()), maxDoc, out);\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n      BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 20, maxStep, maxStep * 10}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n        BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc = disi2.advance(target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          int index = Collections.binarySearch(docs, doc);\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      assertSingleStepEquality(disi, disi2);\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int disi2length = set.length();\n        assertAdvanceExactRandomized(disi, disi2, disi2length, step);\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      assertSingleStepEquality(disi, disi2);\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int disi2length = set.length();\n        assertAdvanceExactRandomized(disi, disi2, disi2length, step);\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      assertSingleStepEquality(disi, disi2);\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int disi2length = set.length();\n        assertAdvanceExactRandomized(disi, disi2, disi2length, step);\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        for (int target = 0; target < set.length(); ) {\n          target += TestUtil.nextInt(random(), 0, step);\n          int doc = disi2.docID();\n          while (doc < target) {\n            doc = disi2.nextDoc();\n            index++;\n          }\n\n          boolean exists = disi.advanceExact(target);\n          assertEquals(doc == target, exists);\n          if (exists) {\n            assertEquals(index, disi.index());\n          } else if (random().nextBoolean()) {\n            assertEquals(doc, disi.nextDoc());\n            assertEquals(index, disi.index());\n            target = doc;\n          }\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["feec55b6e9aaab41be57a5001b31fa14c3925ae4","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["feec55b6e9aaab41be57a5001b31fa14c3925ae4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}