{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // nocommit: remove this hack and support missing!\n\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // nocommit: remove this hack and support missing!\n\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // nocommit: remove this hack and support missing!\n\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0106fc8bd579fa78caf3372887b2d50907b5635","date":1402916839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED);\n    addTermsDict(field, values);\n    addNumericField(field, docToOrd, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","f0106fc8bd579fa78caf3372887b2d50907b5635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f0106fc8bd579fa78caf3372887b2d50907b5635","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f0106fc8bd579fa78caf3372887b2d50907b5635","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}