{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * lengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":["26b31c0eddccc5a2f98f4f4b05d880d658d28a12","26b31c0eddccc5a2f98f4f4b05d880d658d28a12","26b31c0eddccc5a2f98f4f4b05d880d658d28a12"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * lengthNorm(fieldName, numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float computeNorm(String fieldName, FieldInvertState state) {\n    final int numTokens;\n    boolean overlaps = discountOverlaps;\n    if (ln_overlaps.containsKey(fieldName)) {\n      overlaps = ln_overlaps.get(fieldName).booleanValue();\n    }\n    if (overlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(fieldName, numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"3e00f80591de714c6975f454e33e0fa5218b5902":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["3e00f80591de714c6975f454e33e0fa5218b5902"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"3e00f80591de714c6975f454e33e0fa5218b5902":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3e00f80591de714c6975f454e33e0fa5218b5902","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}