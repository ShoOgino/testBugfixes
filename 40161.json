{"path":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","commits":[{"id":"51cd38b90c674ebecc798654e3574d5790a9aced","date":1202762089,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      if (info.hasDeletions()) {\n        message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2993c85d947e3191bba14229ea72fd5675d048e2","date":1228593940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      if (info.hasDeletions()) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      if (info.hasDeletions()) {\n        message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82","date":1245425825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      boolean deletionsInRAM = false;\n      SegmentReader sr = writer.readerPool.getIfExists(info);\n      try {\n        deletionsInRAM = sr != null && sr.hasDeletions();\n      } finally {\n        if (sr != null) {\n          writer.readerPool.release(sr);\n        }\n      }\n      if (info.hasDeletions() || deletionsInRAM) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      if (info.hasDeletions()) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":["51cd38b90c674ebecc798654e3574d5790a9aced"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      boolean deletionsInRAM = false;\n      SegmentReader sr = writer.readerPool.getIfExists(info);\n      try {\n        deletionsInRAM = sr != null && sr.hasDeletions();\n      } finally {\n        if (sr != null) {\n          writer.readerPool.release(sr);\n        }\n      }\n      if (info.hasDeletions() || deletionsInRAM) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos,\n                                                       IndexWriter writer)\n    throws CorruptIndexException, IOException\n  {\n    this.writer = writer;\n\n    final int numSegments = segmentInfos.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, i), useCompoundFile));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segmentInfos.range(firstSegmentWithDeletions, numSegments), useCompoundFile));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51cd38b90c674ebecc798654e3574d5790a9aced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["f33fc116e28d7704378c9dd333711753bd0c9706"],"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82":["2993c85d947e3191bba14229ea72fd5675d048e2"],"2993c85d947e3191bba14229ea72fd5675d048e2":["51cd38b90c674ebecc798654e3574d5790a9aced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51cd38b90c674ebecc798654e3574d5790a9aced"],"51cd38b90c674ebecc798654e3574d5790a9aced":["2993c85d947e3191bba14229ea72fd5675d048e2"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82":["f33fc116e28d7704378c9dd333711753bd0c9706"],"2993c85d947e3191bba14229ea72fd5675d048e2":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}