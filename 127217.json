{"path":"backwards/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}