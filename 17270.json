{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,FieldCache.Parser,Integer).mjava","sourceNew":"    IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    IntComparator(int numHits, String field, FieldCache.Parser parser, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n      this.parser = (IntParser) parser;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,FieldCache.Parser,Integer).mjava","sourceNew":"    IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    IntComparator(int numHits, String field, FieldCache.Parser parser, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n      this.parser = (IntParser) parser;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,FieldCache.Parser,Integer).mjava","sourceNew":"    IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    IntComparator(int numHits, String field, FieldCache.Parser parser, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n      this.parser = (IntParser) parser;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad906456425dd8552564bcc72a8e761a0b839e5a","date":1414477855,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","sourceNew":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","sourceNew":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue != null ? missingValue : 0);\n      //System.out.println(\"IntComparator.init\");\n      //new Throwable().printStackTrace(System.out);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","sourceNew":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue != null ? missingValue : 0);\n      //System.out.println(\"IntComparator.init\");\n      //new Throwable().printStackTrace(System.out);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","sourceNew":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue != null ? missingValue : 0);\n      //System.out.println(\"IntComparator.init\");\n      //new Throwable().printStackTrace(System.out);\n      values = new int[numHits];\n    }\n\n","sourceOld":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue);\n      values = new int[numHits];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.IntComparator#IntComparator(int,String,Integer).mjava","sourceNew":null,"sourceOld":"    /** \n     * Creates a new comparator based on {@link Integer#compare} for {@code numHits}.\n     * When a document has no value for the field, {@code missingValue} is substituted. \n     */\n    public IntComparator(int numHits, String field, Integer missingValue) {\n      super(field, missingValue != null ? missingValue : 0);\n      //System.out.println(\"IntComparator.init\");\n      //new Throwable().printStackTrace(System.out);\n      values = new int[numHits];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad906456425dd8552564bcc72a8e761a0b839e5a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["ad906456425dd8552564bcc72a8e761a0b839e5a"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad906456425dd8552564bcc72a8e761a0b839e5a":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad906456425dd8552564bcc72a8e761a0b839e5a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ad906456425dd8552564bcc72a8e761a0b839e5a","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ad906456425dd8552564bcc72a8e761a0b839e5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}