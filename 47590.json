{"path":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","commits":[{"id":"41f7f08509420d59592367d932f6b559dd709ca7","date":1204748616,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"/dev/null","sourceNew":"  public void testLucene23Upgrades() throws Exception {\r\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\r\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\r\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy\");\r\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\r\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler\");\r\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\r\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\r\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72795268249b27583ff50fb731db1179e4d4bdce","date":1253625275,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  public void testLucene23Upgrades() throws Exception {\r\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\r\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\r\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\r\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\r\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\r\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\r\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\r\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\r\n  }\r\n\n","sourceOld":"  public void testLucene23Upgrades() throws Exception {\r\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\r\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\r\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy\");\r\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\r\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler\");\r\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\r\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\r\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc524639edfdfa4edfb67ae889c2b6029f9314c","date":1255358511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":"  public void testLucene23Upgrades() throws Exception {\r\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\r\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\r\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\r\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\r\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\r\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\r\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\r\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\r\n  }\r\n\n","bugFix":null,"bugIntro":["a3800dc8cdd8c46b4863712aacac0db52566f146","8deebe9424cbabea4272c0e2bf9e1234b949658b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","sourceOld":"  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertTrue(mergePolicy + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n    boolean luceneAutoCommit = solrConfig.getBool(\"indexDefaults/luceneAutoCommit\");\n    assertTrue(luceneAutoCommit + \" does not equal: \" + false, luceneAutoCommit == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"41f7f08509420d59592367d932f6b559dd709ca7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"72795268249b27583ff50fb731db1179e4d4bdce":["41f7f08509420d59592367d932f6b559dd709ca7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["72795268249b27583ff50fb731db1179e4d4bdce"],"ad94625fb8d088209f46650c8097196fec67f00c":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41f7f08509420d59592367d932f6b559dd709ca7":["72795268249b27583ff50fb731db1179e4d4bdce"],"72795268249b27583ff50fb731db1179e4d4bdce":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["41f7f08509420d59592367d932f6b559dd709ca7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}