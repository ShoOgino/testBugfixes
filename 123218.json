{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","commits":[{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      if (boost != null) {\n        mlt.setBoost(true);\n        mlt.setBoostFactor(Float.parseFloat(boost));\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n      mlt.setBoost(false);\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bccc45dd8c1b6c02b164d20d9e383575c74659a","date":1480027580,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","sourceNew":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost)); // this is an additional multiplicative boost coming from the field boost\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      if (boost != null) {\n        mlt.setBoost(true);\n        mlt.setBoostFactor(Float.parseFloat(boost));\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n      mlt.setBoost(false);\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","sourceNew":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost)); // this is an additional multiplicative boost coming from the field boost\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      if (boost != null) {\n        mlt.setBoost(true);\n        mlt.setBoostFactor(Float.parseFloat(boost));\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n      mlt.setBoost(false);\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","sourceNew":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost)); // this is an additional multiplicative boost coming from the field boost\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      if (boost != null) {\n        mlt.setBoost(true);\n        mlt.setBoostFactor(Float.parseFloat(boost));\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n      mlt.setBoost(false);\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd446c14dcc4cef602abdf4803b25ddce521773e","date":1508329120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier#knnSearch(Document).mjava","sourceNew":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost)); // this is an additional multiplicative boost coming from the field boost\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n      mlt.setBoostFactor(1);// restore neutral boost for next field\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  /**\n   * Returns the top k results from a More Like This query based on the input document\n   *\n   * @param document the document to use for More Like This search\n   * @return the top results for the MLT query\n   * @throws IOException If there is a low-level I/O error\n   */\n  private TopDocs knnSearch(Document document) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      String[] fieldValues = document.getValues(fieldName);\n      mlt.setBoost(true); // we want always to use the boost coming from TF * IDF of the term\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost)); // this is an additional multiplicative boost coming from the field boost\n      }\n      mlt.setAnalyzer(field2analyzer.get(fieldName));\n      for (String fieldContent : fieldValues) {\n        mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(fieldContent)), BooleanClause.Occur.SHOULD));\n      }\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["134a24d0cb66520908d88384f1a559875704ed25","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["134a24d0cb66520908d88384f1a559875704ed25","9bccc45dd8c1b6c02b164d20d9e383575c74659a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bccc45dd8c1b6c02b164d20d9e383575c74659a":["134a24d0cb66520908d88384f1a559875704ed25"],"134a24d0cb66520908d88384f1a559875704ed25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd446c14dcc4cef602abdf4803b25ddce521773e":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd446c14dcc4cef602abdf4803b25ddce521773e"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","dd446c14dcc4cef602abdf4803b25ddce521773e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["134a24d0cb66520908d88384f1a559875704ed25"],"9bccc45dd8c1b6c02b164d20d9e383575c74659a":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"134a24d0cb66520908d88384f1a559875704ed25":["727bb765ff2542275f6d31f67be18d7104bae148","75babd1dfc2521603bfeb0968042e921d8c6c652","9bccc45dd8c1b6c02b164d20d9e383575c74659a"],"dd446c14dcc4cef602abdf4803b25ddce521773e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}