{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","commits":[{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","sourceNew":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n\n","sourceOld":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation#GroupOperation(StreamExpression,StreamFactory).mjava","sourceNew":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n\n","sourceOld":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"01624b85de12fb02335810bdf325124e59040772":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}