{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is empty, then positioned == false\n    leadPosition = pp.position + pp.offset;\n    leadOffset = pp.postings.startOffset();\n    currentEndPostings = advanceEndPostings;\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      leadPosition = pp.position + pp.offset;\n      leadOffset = pp.postings.startOffset();\n      currentEndPostings = advanceEndPostings;\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","sourceNew":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is not full, then positioned == false\n    captureLead(pp);\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        assert pp != null;  // if the pq is not full, then positioned == false\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      captureLead(pp);\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","sourceOld":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is empty, then positioned == false\n    leadPosition = pp.position + pp.offset;\n    leadOffset = pp.postings.startOffset();\n    currentEndPostings = advanceEndPostings;\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      leadPosition = pp.position + pp.offset;\n      leadOffset = pp.postings.startOffset();\n      currentEndPostings = advanceEndPostings;\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","sourceNew":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is empty, then positioned == false\n    leadPosition = pp.position + pp.offset;\n    leadOffset = pp.postings.startOffset();\n    currentEndPostings = advanceEndPostings;\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      leadPosition = pp.position + pp.offset;\n      leadOffset = pp.postings.startOffset();\n      currentEndPostings = advanceEndPostings;\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","sourceOld":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is not full, then positioned == false\n    captureLead(pp);\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        assert pp != null;  // if the pq is not full, then positioned == false\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      captureLead(pp);\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#nextMatch().mjava","sourceNew":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is not full, then positioned == false\n    captureLead(pp);\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        assert pp != null;  // if the pq is not full, then positioned == false\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      captureLead(pp);\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","sourceOld":"  @Override\n  public boolean nextMatch() throws IOException {\n    if (!positioned) {\n      return false;\n    }\n    PhrasePositions pp = pq.pop();\n    assert pp != null;  // if the pq is empty, then positioned == false\n    leadPosition = pp.position + pp.offset;\n    leadOffset = pp.postings.startOffset();\n    currentEndPostings = advanceEndPostings;\n    matchLength = end - pp.position;\n    int next = pq.top().position; \n    while (advancePP(pp)) {\n      if (hasRpts && !advanceRpts(pp)) {\n        break; // pps exhausted\n      }\n      if (pp.position > next) { // done minimizing current match-length\n        pq.add(pp);\n        if (matchLength <= slop) {\n          return true;\n        }\n        pp = pq.pop();\n        next = pq.top().position;\n        matchLength = end - pp.position;\n      } else {\n        int matchLength2 = end - pp.position;\n        if (matchLength2 < matchLength) {\n          matchLength = matchLength2;\n        }\n      }\n      leadPosition = pp.position + pp.offset;\n      leadOffset = pp.postings.startOffset();\n      currentEndPostings = advanceEndPostings;\n    }\n    positioned = false;\n    return matchLength <= slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}