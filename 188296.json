{"path":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (parser != null) buffer.append('(').append(parser).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (locale != null) buffer.append('(').append(locale).append(')');\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3dda5c67f03002b11a78b2fcdf517fe897a3e30","date":1308708708,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (creator != null) buffer.append('(').append(creator).append(')');\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    String dv = useIndexValues ? \" [dv]\" : \"\";\n    switch (type) {\n      case SCORE:\n        buffer.append(\"<score>\");\n        break;\n\n      case DOC:\n        buffer.append(\"<doc>\");\n        break;\n\n      case STRING:\n        buffer.append(\"<string\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case STRING_VAL:\n        buffer.append(\"<string_val\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case BYTE:\n        buffer.append(\"<byte: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case SHORT:\n        buffer.append(\"<short: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case INT:\n        buffer.append(\"<int\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case LONG:\n        buffer.append(\"<long: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case FLOAT:\n        buffer.append(\"<float\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case DOUBLE:\n        buffer.append(\"<double\" + dv + \": \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      case CUSTOM:\n        buffer.append(\"<custom:\\\"\").append(field).append(\"\\\": \").append(comparatorSource).append('>');\n        break;\n      \n      case REWRITEABLE:\n        buffer.append(\"<rewriteable: \\\"\").append(field).append(\"\\\">\");\n        break;\n\n      default:\n        buffer.append(\"<???: \\\"\").append(field).append(\"\\\">\");\n        break;\n    }\n\n    if (reverse) buffer.append('!');\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"2553b00f699380c64959ccb27991289aae87be2e":["3e492fb0f2bb0b4b47208286f9331ff55963c656","a3dda5c67f03002b11a78b2fcdf517fe897a3e30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ff1421d1974cfd5072e195bbb63592657da2f66e"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a3dda5c67f03002b11a78b2fcdf517fe897a3e30"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","a3dda5c67f03002b11a78b2fcdf517fe897a3e30"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a3dda5c67f03002b11a78b2fcdf517fe897a3e30":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ff1421d1974cfd5072e195bbb63592657da2f66e","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"382fe3a6ca9745891afebda9b9a57cc158305545":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a3dda5c67f03002b11a78b2fcdf517fe897a3e30":["2553b00f699380c64959ccb27991289aae87be2e","382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3dda5c67f03002b11a78b2fcdf517fe897a3e30","d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}