{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#isPrefixWildcard(CharSequence).mjava","commits":[{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#isPrefixWildcard(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  private boolean isPrefixWildcard(CharSequence text) {\n    if (text == null || text.length() <= 0 || !isWildcard(text)) return false;\n    \n    // Validate last character is a '*' and was not escaped\n    // If single '*' is is a wildcard not prefix to simulate old queryparser\n    if (text.charAt(text.length()-1) != '*') return false;\n    if (UnescapedCharSequence.wasEscaped(text, text.length()-1)) return false;\n    if (text.length() == 1) return false;\n      \n    // Only make a prefix if there is only one single star at the end and no '?' or '*' characters\n    // If single wildcard return false to mimic old queryparser\n    for(int i=0; i<text.length(); i++){\n      if (text.charAt(i) == '?') return false;\n      if (text.charAt(i) == '*' && !UnescapedCharSequence.wasEscaped(text, i)){        \n        if (i == text.length()-1) \n          return true;\n        else \n          return false;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#isPrefixWildcard(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#isPrefixWildcard(CharSequence).mjava","sourceNew":"  private boolean isPrefixWildcard(CharSequence text) {\n    if (text == null || text.length() <= 0 || !isWildcard(text)) return false;\n    \n    // Validate last character is a '*' and was not escaped\n    // If single '*' is is a wildcard not prefix to simulate old queryparser\n    if (text.charAt(text.length()-1) != '*') return false;\n    if (UnescapedCharSequence.wasEscaped(text, text.length()-1)) return false;\n    if (text.length() == 1) return false;\n      \n    // Only make a prefix if there is only one single star at the end and no '?' or '*' characters\n    // If single wildcard return false to mimic old queryparser\n    for(int i=0; i<text.length(); i++){\n      if (text.charAt(i) == '?') return false;\n      if (text.charAt(i) == '*' && !UnescapedCharSequence.wasEscaped(text, i)){        \n        if (i == text.length()-1) \n          return true;\n        else \n          return false;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean isPrefixWildcard(CharSequence text) {\n    if (text == null || text.length() <= 0 || !isWildcard(text)) return false;\n    \n    // Validate last character is a '*' and was not escaped\n    // If single '*' is is a wildcard not prefix to simulate old queryparser\n    if (text.charAt(text.length()-1) != '*') return false;\n    if (UnescapedCharSequence.wasEscaped(text, text.length()-1)) return false;\n    if (text.length() == 1) return false;\n      \n    // Only make a prefix if there is only one single star at the end and no '?' or '*' characters\n    // If single wildcard return false to mimic old queryparser\n    for(int i=0; i<text.length(); i++){\n      if (text.charAt(i) == '?') return false;\n      if (text.charAt(i) == '*' && !UnescapedCharSequence.wasEscaped(text, i)){        \n        if (i == text.length()-1) \n          return true;\n        else \n          return false;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f75cd88b219e040b204bff4c189784659752f786"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f75cd88b219e040b204bff4c189784659752f786"],"f75cd88b219e040b204bff4c189784659752f786":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}