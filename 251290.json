{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable == null || deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable == null || deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbdc45ccf11212d7170640770d2e85f96bc97eae","date":1447325826,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable == null || deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#getRefCount(String).mjava","sourceNew":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","sourceOld":"  private RefCount getRefCount(String fileName) {\n    assert locked();\n    RefCount rc;\n    if (!refCounts.containsKey(fileName)) {\n      rc = new RefCount(fileName);\n      // We should never incRef a file we are already wanting to delete:\n      assert deletable.contains(fileName) == false: \"file \\\"\" + fileName + \"\\\" cannot be incRef'd: it's already pending delete\";\n      refCounts.put(fileName, rc);\n    } else {\n      rc = refCounts.get(fileName);\n    }\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbdc45ccf11212d7170640770d2e85f96bc97eae":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55980207f1977bd1463465de1659b821347e2fa8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["dbdc45ccf11212d7170640770d2e85f96bc97eae","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["dbdc45ccf11212d7170640770d2e85f96bc97eae","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dbdc45ccf11212d7170640770d2e85f96bc97eae","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["dbdc45ccf11212d7170640770d2e85f96bc97eae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"dbdc45ccf11212d7170640770d2e85f96bc97eae":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["dbdc45ccf11212d7170640770d2e85f96bc97eae","55980207f1977bd1463465de1659b821347e2fa8"],"55980207f1977bd1463465de1659b821347e2fa8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","55980207f1977bd1463465de1659b821347e2fa8"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}