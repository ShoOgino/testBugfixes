{"path":"lucene/facet/src/java/org/apache/lucene/facet/collections/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","sourceNew":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","sourceOld":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","sourceNew":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","sourceOld":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/LRUHashMap#removeEldestEntry(Map.Entry[K,V]).mjava","sourceNew":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","sourceOld":"  // We override LinkedHashMap's removeEldestEntry() method. This method\n  // is called every time a new entry is added, and if we return true\n  // here, the eldest element will be deleted automatically. In our case,\n  // we return true if the size of the map grew beyond our limit - ignoring\n  // what is that eldest element that we'll be deleting.\n  @Override\n  protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n    return size() > maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}