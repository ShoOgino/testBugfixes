{"path":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","commits":[{"id":"ae2cc9c0968d7f98c987726279617b99c53129ed","date":1319936406,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"/dev/null","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINIG_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n      }\n    }\n    catch (ClassCastException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Not an encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    return clazz;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3ed2780359811c94f363542cd04b6f49738633d","date":1319944392,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINING_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n      }\n    }\n    catch (ClassCastException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Not an encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    return clazz;\n  }\n\n","sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINIG_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n      }\n    }\n    catch (ClassCastException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Not an encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    return clazz;\n  }\n\n","bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINING_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new InitializationException(\"Unknown encoder: \" + name + \" [\" + registry.keySet() + \"]\");\n      }\n    }\n    catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" [\" + registry.keySet() + \"]\");\n    }\n    return clazz;\n  }\n\n","sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINING_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n      }\n    }\n    catch (ClassCastException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Not an encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    return clazz;\n  }\n\n","bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76cc9b4f652f477b113ac4dcf7593e1414108fcc","date":1336271018,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    Class<? extends Encoder> clazz = null;\n    try {\n      clazz = lookupEncoder(PACKAGE_CONTAINING_ENCODERS+name);\n    } catch (ClassNotFoundException e) {\n      try {\n        clazz = lookupEncoder(name);\n      } catch (ClassNotFoundException cnfe) {\n        throw new InitializationException(\"Unknown encoder: \" + name + \" [\" + registry.keySet() + \"]\");\n      }\n    }\n    catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" [\" + registry.keySet() + \"]\");\n    }\n    return clazz;\n  }\n\n","bugFix":["f3ed2780359811c94f363542cd04b6f49738633d","ae2cc9c0968d7f98c987726279617b99c53129ed","39d25aba1848c644c6d22b943d3d66f661445ac7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#resolveEncoder(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":null,"sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#resolveEncoder(String).mjava","sourceNew":null,"sourceOld":"  private Class<? extends Encoder> resolveEncoder(String name) {\n    String lookupName = name;\n    if (name.indexOf('.') == -1) {\n      lookupName = PACKAGE_CONTAINING_ENCODERS + name;\n    }\n    try {\n      return Class.forName(lookupName).asSubclass(Encoder.class);\n    } catch (ClassNotFoundException cnfe) {\n      throw new InitializationException(\"Unknown encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), cnfe);\n    } catch (ClassCastException e) {\n      throw new InitializationException(\"Not an encoder: \" + name + \" must be full class name or one of \" + registry.keySet(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"f3ed2780359811c94f363542cd04b6f49738633d":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"ae2cc9c0968d7f98c987726279617b99c53129ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["f3ed2780359811c94f363542cd04b6f49738633d"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"f3ed2780359811c94f363542cd04b6f49738633d":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"ae2cc9c0968d7f98c987726279617b99c53129ed":["f3ed2780359811c94f363542cd04b6f49738633d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}