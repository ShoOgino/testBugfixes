{"path":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"/dev/null","sourceNew":"  public void set(final int index, final long value) {\n    final long majorBitPos = index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9c811a9de65f8536719a1f507d2f84516dcbdd5","date":1284036765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/Packed64#set(int,long).mjava","sourceNew":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","sourceOld":"  public void set(final int index, final long value) {\n    final long majorBitPos = (long)index * bitsPerValue;\n    final int elementPos = (int)(majorBitPos >>> BLOCK_BITS); // / BLOCK_SIZE\n    final int bitPos =     (int)(majorBitPos & MOD_MASK); // % BLOCK_SIZE);\n    final int base = bitPos * FAC_BITPOS;\n\n    blocks[elementPos  ] = (blocks[elementPos  ] & writeMasks[base])\n                           | (value << shifts[base + 1] >>> shifts[base]);\n    blocks[elementPos+1] = (blocks[elementPos+1] & writeMasks[base+1])\n                           | ((value << shifts[base + 2]) & writeMasks[base+2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a9c811a9de65f8536719a1f507d2f84516dcbdd5":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a9c811a9de65f8536719a1f507d2f84516dcbdd5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}