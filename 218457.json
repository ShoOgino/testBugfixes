{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/email/TestUAX29URLEmailTokenizer#testEmails().mjava","commits":[{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":1,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/email/TestUAX29URLEmailTokenizer#testEmails().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testEmails().mjava","sourceNew":"  public void testEmails() throws Exception {\n    Reader reader = null;\n    String randomTextWithEmails;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.email.addresses.txt\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithEmails = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithEmails \n               && randomTextWithEmails.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] emails;\n    try {\n      List<String> emailList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"email.addresses.from.random.text.with.email.addresses.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          emailList.add(line);\n        }\n      }\n      emails = emailList.toArray(new String[emailList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != emails && emails.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (emailAnalyzer, randomTextWithEmails, emails);\n  }\n\n","sourceOld":"  public void testEmails() throws Exception {\n    Reader reader = null;\n    String randomTextWithEmails;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.email.addresses.txt\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithEmails = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithEmails \n               && randomTextWithEmails.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] emails;\n    try {\n      List<String> emailList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"email.addresses.from.random.text.with.email.addresses.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          emailList.add(line);\n        }\n      }\n      emails = emailList.toArray(new String[emailList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != emails && emails.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (emailAnalyzer, randomTextWithEmails, emails);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}