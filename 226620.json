{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","commits":[{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc83a5aa5437733334022157adbd6c2754fd9fca","date":1298605476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfd60688653855da1a42cd89a1df4e6738ac079","date":1298618289,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc83a5aa5437733334022157adbd6c2754fd9fca":["30da203d7de68a87a16025523a483a96c24f4291"],"6620df8541b174097b1133a4fc370adb2e570524":["fc83a5aa5437733334022157adbd6c2754fd9fca"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","fc83a5aa5437733334022157adbd6c2754fd9fca"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30da203d7de68a87a16025523a483a96c24f4291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfd60688653855da1a42cd89a1df4e6738ac079":["bde51b089eb7f86171eb3406e38a274743f9b7ac","fc83a5aa5437733334022157adbd6c2754fd9fca"],"30da203d7de68a87a16025523a483a96c24f4291":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"fc83a5aa5437733334022157adbd6c2754fd9fca":["6620df8541b174097b1133a4fc370adb2e570524","d619839baa8ce5503e496b94a9e42ad6f079293f","2dfd60688653855da1a42cd89a1df4e6738ac079"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","30da203d7de68a87a16025523a483a96c24f4291","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"2dfd60688653855da1a42cd89a1df4e6738ac079":[],"30da203d7de68a87a16025523a483a96c24f4291":["fc83a5aa5437733334022157adbd6c2754fd9fca","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["2dfd60688653855da1a42cd89a1df4e6738ac079"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d619839baa8ce5503e496b94a9e42ad6f079293f","2dfd60688653855da1a42cd89a1df4e6738ac079","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}