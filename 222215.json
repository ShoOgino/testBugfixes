{"path":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery#clone().mjava","sourceNew":"  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      SpanQuery clause = (SpanQuery) clauses.get(i);\n      newClauses[i] = (SpanQuery) clause.clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      SpanQuery clause = (SpanQuery) clauses.get(i);\n      newClauses[i] = (SpanQuery) clause.clone();\n    }\n    BoostingNearQuery boostingNearQuery = new BoostingNearQuery(newClauses, slop, inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62b1ed69b2d54a65df6f993499b39562d1dc1f9","date":1255700561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      SpanQuery clause = (SpanQuery) clauses.get(i);\n      newClauses[i] = (SpanQuery) clause.clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      SpanQuery clause = (SpanQuery) clauses.get(i);\n      newClauses[i] = (SpanQuery) clause.clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      SpanQuery clause = (SpanQuery) clauses.get(i);\n      newClauses[i] = (SpanQuery) clause.clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    int sz = clauses.size();\n    SpanQuery[] newClauses = new SpanQuery[sz];\n\n    for (int i = 0; i < sz; i++) {\n      newClauses[i] = (SpanQuery) clauses.get(i).clone();\n    }\n    PayloadNearQuery boostingNearQuery = new PayloadNearQuery(newClauses, slop,\n        inOrder);\n    boostingNearQuery.setBoost(getBoost());\n    return boostingNearQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"ef82ff03e4016c705811b2658e81471a645c0e49":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}