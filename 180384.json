{"path":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","commits":[{"id":"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","date":1289765998,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","date":1292210954,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"c26f00b574427b55127e869b935845554afde1fa":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}