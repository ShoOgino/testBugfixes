{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link LuceneTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ade9d7ae1b1bd9a5106326063f9407397e7168cc","ade9d7ae1b1bd9a5106326063f9407397e7168cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link LuceneTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link LuceneTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link LuceneTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache.\n   * Return true if anything was removed, false otherwise.\n   * \n   * See comment in {@link DirectoryTaxonomyWriter#addToCache(String, Integer)}\n   * for an explanation why we clean 2/3rds of the cache, and not just one\n   * entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}