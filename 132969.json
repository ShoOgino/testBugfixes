{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","commits":[{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(ZoneId.of(timeZoneStr));\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","sourceNew":null,"sourceOld":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(ZoneId.of(timeZoneStr));\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(ZoneId.of(timeZoneStr));\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e85888836e267b030da776be55b653ba5dfff37f","date":1520423556,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","sourceNew":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","sourceOld":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(ZoneId.of(timeZoneStr));\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404f65815cc874649176858833ace645e4ca172","date":1520945234,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(Date,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#parseStartTime(String,String).mjava","sourceNew":"  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(now, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","sourceOld":"  private Instant parseStartTime(String startTimeStr, String timeZoneStr) {\n    if (startTimeStr == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter 'startTime' cannot be null\");\n    }\n    try {\n      // try parsing startTime as an ISO-8601 date time string\n      return DateMathParser.parseMath(null, startTimeStr).toInstant();\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  throw e;\n    }\n    if (timeZoneStr == null)  {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null\");\n    }\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);\n    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern(\"['T'[HH[:mm[:ss]]]]\")\n        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());\n    return Instant.from(dateTimeFormatter.parse(startTimeStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4404f65815cc874649176858833ace645e4ca172":["e85888836e267b030da776be55b653ba5dfff37f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4404f65815cc874649176858833ace645e4ca172"],"e85888836e267b030da776be55b653ba5dfff37f":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"4404f65815cc874649176858833ace645e4ca172":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"e85888836e267b030da776be55b653ba5dfff37f":["4404f65815cc874649176858833ace645e4ca172"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["e85888836e267b030da776be55b653ba5dfff37f"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}