{"path":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testMaxBlock().mjava","commits":[{"id":"fd80b885e3e9bdc61935e784f634562d13b81979","date":1533736198,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testMaxBlock().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxBlock() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    FieldType ft = new FieldType();\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setTokenized(true);\n    ft.freeze();\n\n    for (int i = 0; i < 1024; i++) {\n      // create documents with an increasing number of As and one B\n      Document doc = new Document();\n      doc.add(new Field(\"foo\", new TermFreqTokenStream(\"a\", i+1), ft));\n      if (random().nextFloat() < 0.5f) {\n        doc.add(new Field(\"foo\", new TermFreqTokenStream(\"b\", 1), ft));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new TestSimilarity.SimpleSimilarity());\n    // freq == score\n    // searcher.setSimilarity(new TestSimilarity.SimpleSimilarity());\n    final Query reqQ = new TermQuery(new Term(\"foo\", \"a\"));\n    final Query optQ = new TermQuery(new Term(\"foo\", \"b\"));\n    final Query boolQ = new BooleanQuery.Builder()\n        .add(reqQ, Occur.MUST)\n        .add(optQ, Occur.SHOULD)\n        .build();\n    Scorer actual = reqOptScorer(searcher, reqQ, optQ, true);\n    Scorer expected = searcher\n        .createWeight(boolQ, ScoreMode.COMPLETE, 1)\n        .scorer(searcher.getIndexReader().leaves().get(0));\n    actual.setMinCompetitiveScore(Math.nextUp(1));\n    // Checks that all blocks are fully visited\n    for (int i = 0; i < 1024; i++) {\n      assertEquals(i, actual.iterator().nextDoc());\n      assertEquals(i, expected.iterator().nextDoc());\n      assertEquals(actual.score(),expected.score(), 0);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd80b885e3e9bdc61935e784f634562d13b81979":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd80b885e3e9bdc61935e784f634562d13b81979"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd80b885e3e9bdc61935e784f634562d13b81979"],"fd80b885e3e9bdc61935e784f634562d13b81979":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}