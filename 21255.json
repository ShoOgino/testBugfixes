{"path":"lucene/src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["9454a6510e2db155fb01faa5c049b06ece95fab9","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}