{"path":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      if (terms.size() == 1) {\t\t\t  // optimize one-term case\n        Term term = (Term)terms.elementAt(0);\n        TermDocs docs = reader.termDocs(term);\n        if (docs == null)\n          return null;\n        return new TermScorer(this, docs, searcher.getSimilarity(),\n                              reader.norms(term.field()));\n      }\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, searcher.getSimilarity(), slop,\n                                 reader.norms(field));\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917a0c943aa5659b50fffad7167c838653bd809d","date":1042572030,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, searcher.getSimilarity(), slop,\n                                 reader.norms(field));\n      \n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      if (terms.size() == 1) {\t\t\t  // optimize one-term case\n        Term term = (Term)terms.elementAt(0);\n        TermDocs docs = reader.termDocs(term);\n        if (docs == null)\n          return null;\n        return new TermScorer(this, docs, searcher.getSimilarity(),\n                              reader.norms(term.field()));\n      }\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, searcher.getSimilarity(), slop,\n                                 reader.norms(field));\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c","date":1076095160,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getSimilarity(searcher), slop,\n                                 reader.norms(field));\n      \n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, searcher.getSimilarity(), slop,\n                                 reader.norms(field));\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher), slop,\n                                 reader.norms(field));\n      \n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getSimilarity(searcher), slop,\n                                 reader.norms(field));\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n      \n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher), slop,\n                                 reader.norms(field));\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f758d6efad251890e720eb5370329f6ab5b509","date":1217253519,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.get(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.get(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        TermPositions p = reader.termPositions((Term)terms.get(i));\n        if (p == null)\n          return null;\n        tps[i] = p;\n      }\n\n      if (slop == 0)\t\t\t\t  // optimize exact case\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return\n          new SloppyPhraseScorer(this, tps, getPositions(), similarity, slop,\n                                 reader.norms(field));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f758d6efad251890e720eb5370329f6ab5b509":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4988178cfbf5117763a956901f39d3efa3282e72"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c":["917a0c943aa5659b50fffad7167c838653bd809d"],"052fac7830290bd38a04cddee1a121ee07656b56":["19f758d6efad251890e720eb5370329f6ab5b509"],"917a0c943aa5659b50fffad7167c838653bd809d":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"],"4988178cfbf5117763a956901f39d3efa3282e72":["8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c"]},"commit2Childs":{"19f758d6efad251890e720eb5370329f6ab5b509":["052fac7830290bd38a04cddee1a121ee07656b56"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["19f758d6efad251890e720eb5370329f6ab5b509"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["917a0c943aa5659b50fffad7167c838653bd809d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c":["4988178cfbf5117763a956901f39d3efa3282e72"],"917a0c943aa5659b50fffad7167c838653bd809d":["8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4988178cfbf5117763a956901f39d3efa3282e72":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}