{"path":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","commits":[{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer());\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    \n    FuzzyQuery q = (FuzzyQuery) qp.parse(\"fouba~2\");\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"foubara~2\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = (FuzzyQuery) qp.parse(\"t~3\");\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    searcher.close();\n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["112629f1dfd1451722c6047bcf593e6efc96f5f4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a4d59223802237d352245759cf541e315aab20a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["3a4d59223802237d352245759cf541e315aab20a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3a4d59223802237d352245759cf541e315aab20a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a4d59223802237d352245759cf541e315aab20a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3a4d59223802237d352245759cf541e315aab20a"],"3a4d59223802237d352245759cf541e315aab20a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}