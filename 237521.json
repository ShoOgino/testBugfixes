{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n\t  SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n\t  aninfo.add(\"className\", analyzer.getClass().getName());\n\t  if (analyzer instanceof TokenizerChain) {\n\n\t    TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n      \n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n\t  }\n\t  return aninfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getOriginalArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getOriginalArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getOriginalArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","bugFix":null,"bugIntro":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getOriginalArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getOriginalArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getOriginalArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<Object>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<Map<String, Object>>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getOriginalArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<Object>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getOriginalArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<Map<String, Object>>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<String, Object>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getOriginalArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","bugFix":null,"bugIntro":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1486037b0fcc4d552ab91d319279d41d68fe6a94","date":1437497377,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getAnalyzerInfo(Analyzer).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      if (0 < cfiltfacs.length) {\n        SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<>();\n        for (CharFilterFactory cfiltfac : cfiltfacs) {\n          Map<String, Object> tok = new HashMap<>();\n          String className = cfiltfac.getClass().getName();\n          tok.put(\"className\", className);\n          tok.put(\"args\", cfiltfac.getOriginalArgs());\n          cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n        }\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getOriginalArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      if (0 < filtfacs.length) {\n        SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<>();\n        for (TokenFilterFactory filtfac : filtfacs) {\n          Map<String, Object> tok = new HashMap<>();\n          String className = filtfac.getClass().getName();\n          tok.put(\"className\", className);\n          tok.put(\"args\", filtfac.getOriginalArgs());\n          filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n        }\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getAnalyzerInfo(Analyzer analyzer) {\n    SimpleOrderedMap<Object> aninfo = new SimpleOrderedMap<>();\n    aninfo.add(\"className\", analyzer.getClass().getName());\n    if (analyzer instanceof TokenizerChain) {\n\n      TokenizerChain tchain = (TokenizerChain)analyzer;\n\n      CharFilterFactory[] cfiltfacs = tchain.getCharFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> cfilters = new SimpleOrderedMap<>();\n      for (CharFilterFactory cfiltfac : cfiltfacs) {\n        Map<String, Object> tok = new HashMap<>();\n        String className = cfiltfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", cfiltfac.getOriginalArgs());\n        cfilters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (cfilters.size() > 0) {\n        aninfo.add(\"charFilters\", cfilters);\n      }\n\n      SimpleOrderedMap<Object> tokenizer = new SimpleOrderedMap<>();\n      TokenizerFactory tfac = tchain.getTokenizerFactory();\n      tokenizer.add(\"className\", tfac.getClass().getName());\n      tokenizer.add(\"args\", tfac.getOriginalArgs());\n      aninfo.add(\"tokenizer\", tokenizer);\n\n      TokenFilterFactory[] filtfacs = tchain.getTokenFilterFactories();\n      SimpleOrderedMap<Map<String, Object>> filters = new SimpleOrderedMap<>();\n      for (TokenFilterFactory filtfac : filtfacs) {\n        Map<String, Object> tok = new HashMap<>();\n        String className = filtfac.getClass().getName();\n        tok.put(\"className\", className);\n        tok.put(\"args\", filtfac.getOriginalArgs());\n        filters.add(className.substring(className.lastIndexOf('.')+1), tok);\n      }\n      if (filters.size() > 0) {\n        aninfo.add(\"filters\", filters);\n      }\n    }\n    return aninfo;\n  }\n\n","bugFix":["a345c7aa5a3be11b064d7123059f0c5546700897","634f330c54fd3f9f491d52036dc3f40b4f4d8934","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1486037b0fcc4d552ab91d319279d41d68fe6a94"]},"commit2Childs":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}