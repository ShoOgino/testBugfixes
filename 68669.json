{"path":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","commits":[{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,DocumentsWriter,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, DocumentsWriter docWriter,\n                          CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    this.docWriter = docWriter;\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null)\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null)\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,DocumentsWriter,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, DocumentsWriter docWriter,\n                          CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n\n    this.docWriter = docWriter;\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null)\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null)\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n    \n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {  \n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n        \n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {  \n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n    \n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider,IndexWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,CodecProvider).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos,\n                          PrintStream infoStream, CodecProvider codecs, IndexWriter writer) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n    this.writer = writer;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  This will remove\n   * any files not referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.infoStream = infoStream;\n\n    final String currentSegmentsFile = segmentInfos.getCurrentSegmentFileName();\n\n    if (infoStream != null) {\n      message(\"init: current segments file is \\\"\" + currentSegmentsFile + \"\\\"; deletionPolicy=\" + policy);\n    }\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    indexFilenameFilter = new IndexFileNameFilter(codecs);\n\n    CommitPoint currentCommitPoint = null;\n    String[] files = null;\n    try {\n      files = directory.listAll();\n    } catch (NoSuchDirectoryException e) {\n      // it means the directory is empty, so ignore it.\n      files = new String[0];\n    }\n\n    for (String fileName : files) {\n\n      if ((indexFilenameFilter.accept(null, fileName)) && !fileName.endsWith(\"write.lock\") && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (infoStream != null) {\n            message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n          }\n          SegmentInfos sis = new SegmentInfos(codecs);\n          try {\n            sis.read(directory, fileName, codecs);\n          } catch (FileNotFoundException e) {\n            // LUCENE-948: on NFS (and maybe others), if\n            // you have writers switching back and forth\n            // between machines, it's very likely that the\n            // dir listing will be stale and will claim a\n            // file segments_X exists when in fact it\n            // doesn't.  So, we catch this and handle it\n            // as if the file does not exist\n            if (infoStream != null) {\n              message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n            }\n            sis = null;\n          } catch (IOException e) {\n            if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n              throw e;\n            } else {\n              // Most likely we are opening an index that\n              // has an aborted \"future\" commit, so suppress\n              // exc in this case\n              sis = null;\n            }\n          }\n          if (sis != null) {\n            final SegmentInfos infos = sis;\n            for (SegmentInfo segmentInfo : infos) {\n              try {\n                /*\n                 * Force FI to load for each segment since we could see a\n                 * segments file and load successfully above if the files are\n                 * still referenced when they are deleted and the os doesn't let\n                 * you delete them. Yet its likely that fnm files are removed\n                 * while seg file is still around Since LUCENE-2984 we need FI\n                 * to find out if a seg has vectors and prox so we need those\n                 * files to be opened for a commit point.\n                 */\n                segmentInfo.getFieldInfos();\n              } catch (FileNotFoundException e) {\n                refresh(segmentInfo.name);\n                sis = null;\n                if (infoStream != null) {\n                  message(\"init: hit FileNotFoundException when loading commit \\\"\" + fileName + \"\\\"; skipping this commit point\");\n                }\n              }\n            }\n           \n          }\n          if (sis != null) {\n            final CommitPoint commitPoint = new CommitPoint(commitsToDelete, directory, sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n\n            if (lastSegmentInfos == null || sis.getGeneration() > lastSegmentInfos.getGeneration()) {\n              lastSegmentInfos = sis;\n            }\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null && currentSegmentsFile != null) {\n      // We did not in fact see the segments_N file\n      // corresponding to the segmentInfos that was passed\n      // in.  Yet, it must exist, because our caller holds\n      // the write lock.  This can happen when the directory\n      // listing was stale (eg when index accessed via NFS\n      // client with stale directory listing cache).  So we\n      // try now to explicitly open this commit point:\n      SegmentInfos sis = new SegmentInfos(codecs);\n      try {\n        sis.read(directory, currentSegmentsFile, codecs);\n      } catch (IOException e) {\n        throw new CorruptIndexException(\"failed to locate current segments_N file\");\n      }\n      if (infoStream != null) {\n        message(\"forced open of current segments file \" + segmentInfos.getCurrentSegmentFileName());\n      }\n      currentCommitPoint = new CommitPoint(commitsToDelete, directory, sis);\n      commits.add(currentCommitPoint);\n      incRef(sis, true);\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    CollectionUtil.mergeSort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    for(Map.Entry<String, RefCount> entry : refCounts.entrySet() ) {\n      RefCount rc = entry.getValue();\n      final String fileName = entry.getKey();\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    if (currentSegmentsFile != null) {\n      policy.onInit(commits);\n    }\n\n    // Always protect the incoming segmentInfos since\n    // sometime it may not be the most recent commit\n    checkpoint(segmentInfos, false);\n\n    startingCommitDeleted = currentCommitPoint == null ? false : currentCommitPoint.isDeleted();\n\n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7719bda090a2ae5bab940a27ba7bb9054b29818":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7719bda090a2ae5bab940a27ba7bb9054b29818"]},"commit2Childs":{"f7719bda090a2ae5bab940a27ba7bb9054b29818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["f7719bda090a2ae5bab940a27ba7bb9054b29818","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}