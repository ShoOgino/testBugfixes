{"path":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginsRegistry#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45","date":1425862488,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n        \"omitHeader\", \"true\",\n        \"wt\", \"json\",\n        \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0307cd8b531b56b34e2cbe13f110cdcd09435e14","date":1433707411,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"solrpingquery\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":["e56881a4ebc3438313e3c008a7124ba0f8ecc7bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    PluginInfo config = getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      config.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(config);\n    //schemahandler\n    PluginInfo schema = getReqHandlerInfo(\"/schema\", SchemaHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      schema.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(schema);\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    implicits.add(getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null));\n    //schemahandler\n    implicits.add(getReqHandlerInfo(\"/schema\", SchemaHandler.class, null));\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12ee9465d37a9eedeee8a630aa7551b013cd4e4","date":1450303849,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(createPluginInfoWithDefaults(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    PluginInfo config = createPluginInfoWithDefaults(\"/config\", SolrConfigHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      config.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(config);\n    //schemahandler\n    PluginInfo schema = createPluginInfoWithDefaults(\"/schema\", SchemaHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      schema.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(schema);\n    //register replicationhandler always for SolrCloud\n    implicits.add(createPluginInfoWithDefaults(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(createPluginInfoWithDefaults(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n\n    PluginInfo exportInitArgs = createPluginInfo(\"/export\", SearchHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"rq\", \"{!xport}\",\n            \"wt\", \"xsort\",\n            \"distrib\", \"false\"\n        ));\n    exportInitArgs.initArgs.add(\"components\", Collections.singletonList(\"query\"));\n    implicits.add(exportInitArgs);\n\n    implicits.add(createPluginInfo(\"/stream\", StreamHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"wt\", \"json\",\n            \"distrib\", \"false\"\n        )));\n\n    implicits.add(createPluginInfo(\"/sql\", SQLHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"wt\", \"json\",\n            \"distrib\", \"false\"\n        )));\n\n    //register adminHandlers\n    implicits.add(createPluginInfoWithDefaults(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/file\", ShowFileRequestHandler.class, null));\n    implicits.add(createPluginInfo(\"/admin/ping\", PingRequestHandler.class,\n        null, // defaults\n        null, // appends\n        // invariants\n        makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(getReqHandlerInfo(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(getReqHandlerInfo(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    PluginInfo config = getReqHandlerInfo(\"/config\", SolrConfigHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      config.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(config);\n    //schemahandler\n    PluginInfo schema = getReqHandlerInfo(\"/schema\", SchemaHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      schema.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(schema);\n    //register replicationhandler always for SolrCloud\n    implicits.add(getReqHandlerInfo(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(getReqHandlerInfo(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n    //register adminHandlers\n    implicits.add(getReqHandlerInfo(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(getReqHandlerInfo(\"/admin/file\", ShowFileRequestHandler.class, null));\n    PluginInfo ping = getReqHandlerInfo(\"/admin/ping\", PingRequestHandler.class, null);\n    ping.initArgs.add(INVARIANTS, new NamedList<>(makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(ping);\n    implicits.add(getReqHandlerInfo(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4","date":1456067995,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ImplicitPlugins#getHandlers(SolrCore).mjava","sourceNew":null,"sourceOld":"  public static List<PluginInfo> getHandlers(SolrCore solrCore){\n    List<PluginInfo> implicits = new ArrayList<>();\n\n    //update handle implicits\n    implicits.add(createPluginInfoWithDefaults(\"/update\", UpdateRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.JSON_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/json\")));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.CSV_PATH, UpdateRequestHandler.class, singletonMap(\"update.contentType\", \"application/csv\")));\n    implicits.add(createPluginInfoWithDefaults(UpdateRequestHandler.DOC_PATH, UpdateRequestHandler.class, makeMap(\"update.contentType\", \"application/json\", \"json.command\", \"false\")));\n\n    //solrconfighandler\n    PluginInfo config = createPluginInfoWithDefaults(\"/config\", SolrConfigHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      config.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(config);\n    //schemahandler\n    PluginInfo schema = createPluginInfoWithDefaults(\"/schema\", SchemaHandler.class, null);\n    if (solrCore.getConfigSetProperties() != null) {\n      schema.initArgs.addAll(solrCore.getConfigSetProperties());\n    }\n    implicits.add(schema);\n    //register replicationhandler always for SolrCloud\n    implicits.add(createPluginInfoWithDefaults(\"/replication\", ReplicationHandler.class,null));\n\n    implicits.add(createPluginInfoWithDefaults(\"/get\", RealTimeGetHandler.class,\n        makeMap(\n            \"omitHeader\", \"true\",\n            WT, JSON,\n            \"indent\", \"true\")));\n\n    PluginInfo exportInitArgs = createPluginInfo(\"/export\", SearchHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"rq\", \"{!xport}\",\n            \"wt\", \"xsort\",\n            \"distrib\", \"false\"\n        ));\n    exportInitArgs.initArgs.add(\"components\", Collections.singletonList(\"query\"));\n    implicits.add(exportInitArgs);\n\n    implicits.add(createPluginInfo(\"/stream\", StreamHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"wt\", \"json\",\n            \"distrib\", \"false\"\n        )));\n\n    implicits.add(createPluginInfo(\"/sql\", SQLHandler.class,\n        null, // defaults\n        null, // appends\n        // we need invariants here\n        makeMap(\n            \"wt\", \"json\",\n            \"distrib\", \"false\"\n        )));\n\n    //register adminHandlers\n    implicits.add(createPluginInfoWithDefaults(\"/admin/luke\", LukeRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/system\", SystemInfoHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/mbeans\", SolrInfoMBeanHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/plugins\", PluginInfoHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/threads\", ThreadDumpHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/properties\", PropertiesRequestHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/logging\", LoggingHandler.class, null));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/file\", ShowFileRequestHandler.class, null));\n    implicits.add(createPluginInfo(\"/admin/ping\", PingRequestHandler.class,\n        null, // defaults\n        null, // appends\n        // invariants\n        makeMap(\"echoParams\", \"all\", \"q\", \"{!lucene}*:*\")));\n    implicits.add(createPluginInfoWithDefaults(\"/admin/segments\", SegmentsInfoRequestHandler.class, null));\n    return implicits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["0307cd8b531b56b34e2cbe13f110cdcd09435e14"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"0307cd8b531b56b34e2cbe13f110cdcd09435e14":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"d12ee9465d37a9eedeee8a630aa7551b013cd4e4":["6466e433d7f5218e77c8115ed28176855fc3c143"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["d12ee9465d37a9eedeee8a630aa7551b013cd4e4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0307cd8b531b56b34e2cbe13f110cdcd09435e14":["6466e433d7f5218e77c8115ed28176855fc3c143"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["0307cd8b531b56b34e2cbe13f110cdcd09435e14","d2638f781be724518ff6c2263d14a48cf6e68017"],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"d12ee9465d37a9eedeee8a630aa7551b013cd4e4":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}