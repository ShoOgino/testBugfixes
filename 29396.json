{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SumSqEvaluator#doWork(Object).mjava","commits":[{"id":"e1a9c0ee6e175f37dff63298be6b952d786db982","date":1514746103,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SumSqEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    List<Number> list = (List<Number>)value;\n\n    if(0 == list.size()){\n      return list;\n    }\n\n    double[] vec = new double[list.size()];\n    for(int i=0; i< vec.length; i++) {\n      vec[i] = list.get(i).doubleValue();\n    }\n\n    return StatUtils.sumSq(vec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SumSqEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SumSqEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> list = (List<Number>)value;\n\n    if(0 == list.size()){\n      return list;\n    }\n\n    double[] vec = new double[list.size()];\n    for(int i=0; i< vec.length; i++) {\n      vec[i] = list.get(i).doubleValue();\n    }\n\n    return StatUtils.sumSq(vec);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if(null == value){\n      return value;\n    }\n    else if(!(value instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a List\",toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    List<Number> list = (List<Number>)value;\n\n    if(0 == list.size()){\n      return list;\n    }\n\n    double[] vec = new double[list.size()];\n    for(int i=0; i< vec.length; i++) {\n      vec[i] = list.get(i).doubleValue();\n    }\n\n    return StatUtils.sumSq(vec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["e1a9c0ee6e175f37dff63298be6b952d786db982"],"e1a9c0ee6e175f37dff63298be6b952d786db982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1a9c0ee6e175f37dff63298be6b952d786db982":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e1a9c0ee6e175f37dff63298be6b952d786db982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}