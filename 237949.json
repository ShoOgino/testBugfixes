{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        for (ContentStream contentStream : contentStreams) {\n          try {\n            parsedCommands = ApiBag.getCommandOperations(contentStream.getReader(), getValidators(), validateInput);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Error reading commands\");\n          }\n          break;\n        }\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        for (ContentStream contentStream : contentStreams) {\n          try {\n            parsedCommands = ApiBag.getCommandOperations(contentStream.getReader(), getValidators(), validateInput);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Error reading commands\");\n          }\n          break;\n        }\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        for (ContentStream contentStream : contentStreams) {\n          try {\n            parsedCommands = ApiBag.getCommandOperations(contentStream.getReader(), getValidators(), validateInput);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Error reading commands\");\n          }\n          break;\n        }\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        for (ContentStream contentStream : contentStreams) {\n          try {\n            parsedCommands = ApiBag.getCommandOperations(contentStream.getReader(), getValidators(), validateInput);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Error reading commands\");\n          }\n          break;\n        }\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        for (ContentStream contentStream : contentStreams) {\n          try {\n            parsedCommands = ApiBag.getCommandOperations(contentStream.getReader(), getValidators(), validateInput);\n          } catch (IOException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Error reading commands\");\n          }\n          break;\n        }\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCommands(boolean).mjava","sourceNew":"  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.emptyList();\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public List<CommandOperation> getCommands(boolean validateInput) {\n    if (parsedCommands == null) {\n      Iterable<ContentStream> contentStreams = solrReq.getContentStreams();\n      if (contentStreams == null) parsedCommands = Collections.EMPTY_LIST;\n      else {\n        parsedCommands = ApiBag.getCommandOperations(contentStreams.iterator().next(), getValidators(), validateInput);\n      }\n    }\n    return CommandOperation.clone(parsedCommands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"3adc4d119a7deba35b2721853853464857d9d0a9":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3adc4d119a7deba35b2721853853464857d9d0a9"]},"commit2Childs":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3adc4d119a7deba35b2721853853464857d9d0a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["4d3fc88a06a44fc3112186e9be4562b36713955d","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["3adc4d119a7deba35b2721853853464857d9d0a9"],"28288370235ed02234a64753cdbf0c6ec096304a":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}