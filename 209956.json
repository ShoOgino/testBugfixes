{"path":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":["e6e919043fa85ee891123768dd655a98edbbf63c"],"bugIntro":["01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","date":1453797574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      add(term.field(), term.bytes());\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":3,"author":"jbernste","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      add(term.field(), term.bytes());\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      add(term.field(), term.bytes());\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTermBytes.copyBytes(term.bytes);\n        lastTerm.bytes = lastTermBytes.get();\n        lastTerm.field = term.field;\n        size += 1;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","ac88193d9fe80e165a43bb0555c43afa83da8330"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac88193d9fe80e165a43bb0555c43afa83da8330"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["ac88193d9fe80e165a43bb0555c43afa83da8330","01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}