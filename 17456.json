{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      IndexReader[] subReaders = reader.getSequentialSubReaders();\n      if (subReaders == null) {\n        // atomic reader\n        add(base, reader);\n        base += reader.maxDoc();\n      } else {\n        // composite reader\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicIndexReader) {\n        // atomic reader\n        add(base, (AtomicIndexReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeIndexReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeIndexReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      IndexReader[] subReaders = reader.getSequentialSubReaders();\n      if (subReaders == null) {\n        // atomic reader\n        add(base, reader);\n        base += reader.maxDoc();\n      } else {\n        // composite reader\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicIndexReader) {\n        // atomic reader\n        add(base, (AtomicIndexReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeIndexReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeIndexReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      IndexReader[] subReaders = reader.getSequentialSubReaders();\n      if (subReaders == null) {\n        // atomic reader\n        add(base, reader);\n        base += reader.maxDoc();\n      } else {\n        // composite reader\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}