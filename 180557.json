{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopFieldDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopFieldDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopFieldDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopFieldDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testSort().mjava","sourceNew":null,"sourceOld":"  public void testSort() throws Exception {\n    SortField sf = new SortField(\"field\", new FieldComparatorSource() {\n      @Override\n      public FieldComparator<String> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        return new SlowCollatedStringComparator(numHits, fieldname, collator);\n      }\n    });\n    final Sort sort = new Sort(sf);\n    \n    final TopFieldDocs docs1 = searcher.search(TermRangeQuery.newStringRange(\"field\", null, splitDoc, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs1);\n    \n    final TopFieldDocs docs2 = searcher.search(TermRangeQuery.newStringRange(\"field\", splitDoc, null, true, true), null, numDocs/(1+random().nextInt(4)), sort);\n    doCheckSorting(docs2);\n    \n    final TopFieldDocs docs = TopDocs.merge(sort, numDocs/(1+random().nextInt(4)), new TopFieldDocs[]{docs1, docs2});\n    doCheckSorting(docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["fb17639909a369c1e64866842e5c213440acc17e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fb17639909a369c1e64866842e5c213440acc17e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}