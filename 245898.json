{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testLetStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testLetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLetStream().mjava","sourceNew":"  @Test\n  public void testLetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\", \"test_i\", \"5\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\", \"test_i\", \"4\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t, test_i\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(d =\"+expr+\", b = add(1,3), c=col(d, test_i), tuple(test = add(1,1), test1=b, results=d, test2=add(c)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple1 = tuples.get(0);\n    List<Map> results = (List<Map>)tuple1.get(\"results\");\n    assertTrue(results.size() == 2);\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuple1.getLong(\"test\").equals(2L));\n    assertTrue(tuple1.getLong(\"test1\").equals(4L));\n    assertTrue(tuple1.getLong(\"test2\").equals(9L));\n  }\n\n","sourceOld":"  @Test\n  public void testLetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\", \"test_i\", \"5\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\", \"test_i\", \"4\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t, test_i\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(d =\"+expr+\", b = add(1,3), c=col(d, test_i), tuple(test = add(1,1), test1=b, results=d, test2=add(c)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple1 = tuples.get(0);\n    List<Map> results = (List<Map>)tuple1.get(\"results\");\n    assertTrue(results.size() == 2);\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuple1.getLong(\"test\").equals(2L));\n    assertTrue(tuple1.getLong(\"test1\").equals(4L));\n    assertTrue(tuple1.getLong(\"test2\").equals(9L));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testLetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testLetStream().mjava","sourceNew":"  @Test\n  public void testLetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\", \"test_i\", \"5\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\", \"test_i\", \"4\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t, test_i\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(d =\"+expr+\", b = add(1,3), c=col(d, test_i), tuple(test = add(1,1), test1=b, results=d, test2=add(c)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple1 = tuples.get(0);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> results = (List<Map>)tuple1.get(\"results\");\n    assertTrue(results.size() == 2);\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuple1.getLong(\"test\").equals(2L));\n    assertTrue(tuple1.getLong(\"test1\").equals(4L));\n    assertTrue(tuple1.getLong(\"test2\").equals(9L));\n  }\n\n","sourceOld":"  @Test\n  public void testLetStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\", \"test_i\", \"5\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\", \"test_i\", \"4\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t, test_i\\\", sort=\\\"id desc\\\")\";\n    String cat = \"let(d =\"+expr+\", b = add(1,3), c=col(d, test_i), tuple(test = add(1,1), test1=b, results=d, test2=add(c)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple1 = tuples.get(0);\n    List<Map> results = (List<Map>)tuple1.get(\"results\");\n    assertTrue(results.size() == 2);\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuple1.getLong(\"test\").equals(2L));\n    assertTrue(tuple1.getLong(\"test1\").equals(4L));\n    assertTrue(tuple1.getLong(\"test2\").equals(9L));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}