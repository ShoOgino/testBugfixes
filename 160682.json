{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException, MergeAbortedException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        fileEntry.dir.deleteFile(fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","989d940c4bf402188f4f0ae13736836885227383"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}