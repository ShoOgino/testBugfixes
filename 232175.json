{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(testDir, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir,\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(testDir, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir,\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(testDir, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir,\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(testDir, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir,\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(testDir, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir,\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"localhost:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = \"127.0.0.1:\" + j.getLocalPort() + context;\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrServer(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n    System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(\"control\").toString());\n    writeCoreProperties(testDir.toPath().resolve(\"control/cores\"), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path coresPath = testDir.toPath().resolve(shardname).resolve(\"cores\");\n      writeCoreProperties(coresPath, DEFAULT_TEST_CORENAME);\n      System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(shardname).toString());\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n\n    File controlHome = testDir.toPath().resolve(\"control\").toFile();\n\n    seedSolrHome(controlHome);\n    writeCoreProperties(controlHome.toPath().resolve(\"cores\").resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(controlHome, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path shardHome = testDir.toPath().resolve(shardname);\n      seedSolrHome(shardHome.toFile());\n      Path coresPath = shardHome.resolve(\"cores\");\n      writeCoreProperties(coresPath.resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n      JettySolrRunner j = createJetty(shardHome.toFile(),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n    System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(\"control\").toString());\n    writeCoreProperties(testDir.toPath().resolve(\"control/cores\"), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path coresPath = testDir.toPath().resolve(shardname).resolve(\"cores\");\n      writeCoreProperties(coresPath, DEFAULT_TEST_CORENAME);\n      System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(shardname).toString());\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n\n    File controlHome = testDir.toPath().resolve(\"control\").toFile();\n\n    seedSolrHome(controlHome);\n    writeCoreProperties(controlHome.toPath().resolve(\"cores\").resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(controlHome, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path shardHome = testDir.toPath().resolve(shardname);\n      seedSolrHome(shardHome.toFile());\n      Path coresPath = shardHome.resolve(\"cores\");\n      writeCoreProperties(coresPath.resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n      JettySolrRunner j = createJetty(shardHome.toFile(),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n    System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(\"control\").toString());\n    writeCoreProperties(testDir.toPath().resolve(\"control/cores\"), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path coresPath = testDir.toPath().resolve(shardname).resolve(\"cores\");\n      writeCoreProperties(coresPath, DEFAULT_TEST_CORENAME);\n      System.setProperty(\"coreRootDirectory\", testDir.toPath().resolve(shardname).toString());\n      JettySolrRunner j = createJetty(new File(getSolrHome()),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#createServers(int).mjava","sourceNew":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n\n    File controlHome = testDir.toPath().resolve(\"control\").toFile();\n\n    seedSolrHome(controlHome);\n    writeCoreProperties(controlHome.toPath().resolve(\"cores\").resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(controlHome, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n    controlJetty.start();\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path shardHome = testDir.toPath().resolve(shardname);\n      seedSolrHome(shardHome.toFile());\n      Path coresPath = shardHome.resolve(\"cores\");\n      writeCoreProperties(coresPath.resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n      JettySolrRunner j = createJetty(shardHome.toFile(),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      j.start();\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","sourceOld":"  // TODO: for now we redefine this method so that it pulls from the above\n  // we don't get helpful override behavior due to the method being static\n  @Override\n  protected void createServers(int numShards) throws Exception {\n\n    System.setProperty(\"configSetBaseDir\", TEST_HOME());\n\n    File controlHome = testDir.toPath().resolve(\"control\").toFile();\n\n    seedSolrHome(controlHome);\n    writeCoreProperties(controlHome.toPath().resolve(\"cores\").resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n    controlJetty = createJetty(controlHome, testDir + \"/control/data\", null, getSolrConfigFile(), getSchemaFile());\n\n    controlClient = createNewSolrClient(controlJetty.getLocalPort());\n\n    shardsArr = new String[numShards];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < numShards; i++) {\n      if (sb.length() > 0) sb.append(',');\n      String shardname = \"shard\" + i;\n      Path shardHome = testDir.toPath().resolve(shardname);\n      seedSolrHome(shardHome.toFile());\n      Path coresPath = shardHome.resolve(\"cores\");\n      writeCoreProperties(coresPath.resolve(DEFAULT_TEST_CORENAME), DEFAULT_TEST_CORENAME);\n      JettySolrRunner j = createJetty(shardHome.toFile(),\n          testDir + \"/shard\" + i + \"/data\", null, getSolrConfigFile(),\n          getSchemaFile());\n      jettys.add(j);\n      clients.add(createNewSolrClient(j.getLocalPort()));\n      String shardStr = buildUrl(j.getLocalPort());\n      shardsArr[i] = shardStr;\n      sb.append(shardStr);\n    }\n\n    shards = sb.toString();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","7530de27b87b961b51f01bd1299b7004d46e8823"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"bafca15d8e408346a67f4282ad1143b88023893b":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","9bc766d645fa848f86c381c7f6acf2c881c99399"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["9bc766d645fa848f86c381c7f6acf2c881c99399","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["33d0ed80b7b47e34ad3ff033a77544563aba3085","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}