{"path":"src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","commits":[{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // performance test vs HashMap<String,Object>\n  // HashMap will have an edge because we are testing with\n  // non-dynamically created keys and String caches hashCode\n  public static void main(String[] args) {\n    int a=0;\n    String impl = args[a++].intern();          // hash OR chars OR char\n    int iter1 = Integer.parseInt(args[a++]);   // iterations of put()\n    int iter2 = Integer.parseInt(args[a++]);   // iterations of get()\n\n    int ret=0;\n    long start = System.currentTimeMillis();\n    String[] stopwords = StopAnalyzer.ENGLISH_STOP_WORDS;\n    // words = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] stopwordschars = new char[stopwords.length][];\n    for (int i=0; i<stopwords.length; i++) {\n      stopwordschars[i] = stopwords[i].toCharArray();\n    }\n\n    String[] testwords = \"now is the time for all good men to come to the aid of their country\".split(\" \");\n    // testwords = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] testwordchars = new char[testwords.length][];\n\n    for (int i=0; i<testwordchars.length; i++) {\n      testwordchars[i] = testwords[i].toCharArray();\n    }\n\n    HashMap<String,Integer> hm=null;\n    CharArrayMap<Integer> cm=null;\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter1; i++) {\n\n        hm = new HashMap<String,Integer>();\n        int v=0;\n        for (String word : stopwords) {\n          hm.put(word, ++v);\n        }\n        ret += hm.size();\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (String s : stopwords) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (char[] s : stopwordschars) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    }\n\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = hm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter2; i++) {\n        for (char[] word : testwordchars) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n\n    System.out.println(\"result=\" + ret);\n    System.out.println(\"time=\" +(end-start));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","pathOld":"src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","sourceNew":"  // performance test vs HashMap<String,Object>\n  // HashMap will have an edge because we are testing with\n  // non-dynamically created keys and String caches hashCode\n  public static void main(String[] args) {\n    int a=0;\n    String impl = args[a++].intern();          // hash OR chars OR char\n    int iter1 = Integer.parseInt(args[a++]);   // iterations of put()\n    int iter2 = Integer.parseInt(args[a++]);   // iterations of get()\n\n    int ret=0;\n    long start = System.currentTimeMillis();\n    Set<String> stopwords = (Set<String>) StopAnalyzer.ENGLISH_STOP_WORDS_SET;\n    // words = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] stopwordschars = new char[stopwords.size()][];\n    Iterator<String> it = stopwords.iterator();\n    for (int i=0; i<stopwords.size(); i++) {\n      stopwordschars[i] = it.next().toCharArray();\n    }\n\n    String[] testwords = \"now is the time for all good men to come to the aid of their country\".split(\" \");\n    // testwords = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] testwordchars = new char[testwords.length][];\n\n    for (int i=0; i<testwordchars.length; i++) {\n      testwordchars[i] = testwords[i].toCharArray();\n    }\n\n    HashMap<String,Integer> hm=null;\n    CharArrayMap<Integer> cm=null;\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter1; i++) {\n\n        hm = new HashMap<String,Integer>();\n        int v=0;\n        for (String word : stopwords) {\n          hm.put(word, ++v);\n        }\n        ret += hm.size();\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (String s : stopwords) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (char[] s : stopwordschars) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    }\n\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = hm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter2; i++) {\n        for (char[] word : testwordchars) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n\n    System.out.println(\"result=\" + ret);\n    System.out.println(\"time=\" +(end-start));\n  }\n\n","sourceOld":"  // performance test vs HashMap<String,Object>\n  // HashMap will have an edge because we are testing with\n  // non-dynamically created keys and String caches hashCode\n  public static void main(String[] args) {\n    int a=0;\n    String impl = args[a++].intern();          // hash OR chars OR char\n    int iter1 = Integer.parseInt(args[a++]);   // iterations of put()\n    int iter2 = Integer.parseInt(args[a++]);   // iterations of get()\n\n    int ret=0;\n    long start = System.currentTimeMillis();\n    String[] stopwords = StopAnalyzer.ENGLISH_STOP_WORDS;\n    // words = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] stopwordschars = new char[stopwords.length][];\n    for (int i=0; i<stopwords.length; i++) {\n      stopwordschars[i] = stopwords[i].toCharArray();\n    }\n\n    String[] testwords = \"now is the time for all good men to come to the aid of their country\".split(\" \");\n    // testwords = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] testwordchars = new char[testwords.length][];\n\n    for (int i=0; i<testwordchars.length; i++) {\n      testwordchars[i] = testwords[i].toCharArray();\n    }\n\n    HashMap<String,Integer> hm=null;\n    CharArrayMap<Integer> cm=null;\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter1; i++) {\n\n        hm = new HashMap<String,Integer>();\n        int v=0;\n        for (String word : stopwords) {\n          hm.put(word, ++v);\n        }\n        ret += hm.size();\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (String s : stopwords) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (char[] s : stopwordschars) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    }\n\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = hm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter2; i++) {\n        for (char[] word : testwordchars) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n\n    System.out.println(\"result=\" + ret);\n    System.out.println(\"time=\" +(end-start));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","pathOld":"src/test/org/apache/solr/util/TestCharArrayMap#main(String[]).mjava","sourceNew":"  // performance test vs HashMap<String,Object>\n  // HashMap will have an edge because we are testing with\n  // non-dynamically created keys and String caches hashCode\n  public static void main(String[] args) {\n    int a=0;\n    String impl = args[a++].intern();          // hash OR chars OR char\n    int iter1 = Integer.parseInt(args[a++]);   // iterations of put()\n    int iter2 = Integer.parseInt(args[a++]);   // iterations of get()\n\n    int ret=0;\n    long start = System.currentTimeMillis();\n    Set<String> stopwords = (Set<String>) StopAnalyzer.ENGLISH_STOP_WORDS_SET;\n    // words = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] stopwordschars = new char[stopwords.size()][];\n    Iterator<String> it = stopwords.iterator();\n    for (int i=0; i<stopwords.size(); i++) {\n      stopwordschars[i] = it.next().toCharArray();\n    }\n\n    String[] testwords = \"now is the time for all good men to come to the aid of their country\".split(\" \");\n    // testwords = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] testwordchars = new char[testwords.length][];\n\n    for (int i=0; i<testwordchars.length; i++) {\n      testwordchars[i] = testwords[i].toCharArray();\n    }\n\n    HashMap<String,Integer> hm=null;\n    CharArrayMap<Integer> cm=null;\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter1; i++) {\n\n        hm = new HashMap<String,Integer>();\n        int v=0;\n        for (String word : stopwords) {\n          hm.put(word, ++v);\n        }\n        ret += hm.size();\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (String s : stopwords) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (char[] s : stopwordschars) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    }\n\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = hm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter2; i++) {\n        for (char[] word : testwordchars) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n\n    System.out.println(\"result=\" + ret);\n    System.out.println(\"time=\" +(end-start));\n  }\n\n","sourceOld":"  // performance test vs HashMap<String,Object>\n  // HashMap will have an edge because we are testing with\n  // non-dynamically created keys and String caches hashCode\n  public static void main(String[] args) {\n    int a=0;\n    String impl = args[a++].intern();          // hash OR chars OR char\n    int iter1 = Integer.parseInt(args[a++]);   // iterations of put()\n    int iter2 = Integer.parseInt(args[a++]);   // iterations of get()\n\n    int ret=0;\n    long start = System.currentTimeMillis();\n    Set<String> stopwords = (Set<String>) StopAnalyzer.ENGLISH_STOP_WORDS_SET;\n    // words = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] stopwordschars = new char[stopwords.size()][];\n    Iterator<String> it = stopwords.iterator();\n    for (int i=0; i<stopwords.size(); i++) {\n      stopwordschars[i] = it.next().toCharArray();\n    }\n\n    String[] testwords = \"now is the time for all good men to come to the aid of their country\".split(\" \");\n    // testwords = \"this is a different test to see what is really going on here... I hope it works well but I'm not sure it will\".split(\" \");\n    char[][] testwordchars = new char[testwords.length][];\n\n    for (int i=0; i<testwordchars.length; i++) {\n      testwordchars[i] = testwords[i].toCharArray();\n    }\n\n    HashMap<String,Integer> hm=null;\n    CharArrayMap<Integer> cm=null;\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter1; i++) {\n\n        hm = new HashMap<String,Integer>();\n        int v=0;\n        for (String word : stopwords) {\n          hm.put(word, ++v);\n        }\n        ret += hm.size();\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (String s : stopwords) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter1; i++) {\n        cm = new CharArrayMap<Integer>(2,false);\n        int v=0;\n        for (char[] s : stopwordschars) {\n          cm.put(s,++v);\n        }\n        ret += cm.size();\n      }\n    }\n\n\n    if (impl==\"hash\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = hm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"chars\") {\n      for (int i=0; i<iter2; i++) {\n        for (String word : testwords) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    } else if (impl==\"char\") {\n      for (int i=0; i<iter2; i++) {\n        for (char[] word : testwordchars) {\n          Integer v = cm.get(word);\n          ret += v==null ? 0 : v;\n        }\n      }\n    }\n\n    long end = System.currentTimeMillis();\n\n    System.out.println(\"result=\" + ret);\n    System.out.println(\"time=\" +(end-start));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}