{"path":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","sourceNew":"    @Override\n    public float sumOfSquaredWeights() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).sumOfSquaredWeights();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float sumOfSquaredWeights() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).sumOfSquaredWeights();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float sumOfSquaredWeights() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).sumOfSquaredWeights();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float sumOfSquaredWeights() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).sumOfSquaredWeights();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#sumOfSquaredWeights().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float sumOfSquaredWeights() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).sumOfSquaredWeights();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}