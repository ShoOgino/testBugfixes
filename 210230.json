{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    if (tvx != null) {\n\n      if (state.numDocsInStore > 0)\n        // In case there are some final documents that we\n        // didn't see (because they hit a non-aborting exception):\n        fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n\n      tvx.flush();\n      tvd.flush();\n      tvf.flush();\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      for (final TermsHashConsumerPerField field : entry.getValue() ) {\n        TermVectorsTermsWriterPerField perField = (TermVectorsTermsWriterPerField) field;\n        perField.termsHashPerField.reset();\n        perField.shrinkHash();\n      }\n\n      TermVectorsTermsWriterPerThread perThread = (TermVectorsTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n  }\n\n","sourceOld":"  @Override\n  synchronized void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    if (tvx != null) {\n\n      if (state.numDocsInStore > 0)\n        // In case there are some final documents that we\n        // didn't see (because they hit a non-aborting exception):\n        fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n\n      tvx.flush();\n      tvd.flush();\n      tvf.flush();\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      for (final TermsHashConsumerPerField field : entry.getValue() ) {\n        TermVectorsTermsWriterPerField perField = (TermVectorsTermsWriterPerField) field;\n        perField.termsHashPerField.reset();\n        perField.shrinkHash();\n      }\n\n      TermVectorsTermsWriterPerThread perThread = (TermVectorsTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  synchronized void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    if (tvx != null) {\n\n      if (state.numDocsInStore > 0)\n        // In case there are some final documents that we\n        // didn't see (because they hit a non-aborting exception):\n        fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n\n      tvx.flush();\n      tvd.flush();\n      tvf.flush();\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      for (final TermsHashConsumerPerField field : entry.getValue() ) {\n        TermVectorsTermsWriterPerField perField = (TermVectorsTermsWriterPerField) field;\n        perField.termsHashPerField.reset();\n        perField.shrinkHash();\n      }\n\n      TermVectorsTermsWriterPerThread perThread = (TermVectorsTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}