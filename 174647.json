{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","commits":[{"id":"f5eb842cfee458c37a15154f49502a6a00fc662f","date":1494313961,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      if (cli.hasOption(\"enable\") && cli.hasOption(\"disable\")) {\n        System.out.println(\"You have specified both -enable and -disable. Only one should be provided.\");\n        return 1;\n      }\n      if  (cli.hasOption(\"enable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          System.out.println(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        \n        if (cli.hasOption(\"credentials\") == false && cli.hasOption(\"prompt\") == false) {\n          System.out.println(\"Option -credentials or -prompt is required with -enable.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        } else if (cli.hasOption(\"prompt\") == false &&\n            (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n          System.out.println(\"Option -credentials is not in correct format.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        }\n\n        String username, password;\n        if (cli.hasOption(\"credentials\")) {\n          String credentials = cli.getOptionValue(\"credentials\");\n          username = credentials.split(\":\")[0];\n          password = credentials.split(\":\")[1];\n        } else {\n          Console console = System.console();\n          username = console.readLine(\"Enter username: \");\n          password = new String(console.readPassword(\"Enter password: \"));\n        }\n        // check if security is already enabled or not\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          if (zkClient.exists(\"/security.json\", true)) {\n            byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n            if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n              System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth -disable'. Existing security.json: \\n\"\n                  + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n              exit(1);\n            }\n          }\n        }\n\n        boolean blockUnknown = cli.getOptionValue(\"blockUnknown\") == null ?\n            cli.hasOption(\"blockUnknown\"): Boolean.valueOf(cli.getOptionValue(\"blockUnknown\"));\n\n            String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n                \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n                \"\\n   \\\"credentials\\\":{\\\"\"+username+\"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n                \"\\n  },\" +\n                \"\\n  \\\"authorization\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n                \"\\n   \\\"permissions\\\":[\" +\n                \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n                \"\\n   ],\" +\n                \"\\n   \\\"user-role\\\":{\\\"\"+username+\"\\\":\\\"admin\\\"}\" +\n                \"\\n  }\" +\n                \"\\n}\";\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n\n            String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n            File includeFile = new File(solrIncludeFilename);\n            if (includeFile.exists() == false || includeFile.canWrite() == false) {\n              System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            File basicAuthConfFile = new File(includeFile.getParent() + File.separator + \"basicAuth.conf\");\n            \n            if (basicAuthConfFile.getParentFile().canWrite() == false) {\n              System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            \n            FileUtils.writeStringToFile(basicAuthConfFile, \n                \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n            // update the solr.in.sh file to contain the necessary authentication lines\n            updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), username, password);\n            return 0;\n      } else if (cli.hasOption(\"disable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        System.out.println(\"Uploading following security.json: {}\");\n\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n        }\n\n        String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n        File includeFile = new File(solrIncludeFilename);\n        if (includeFile.exists() == false || includeFile.canWrite() == false) {\n          System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n          System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n          System.exit(0);\n        }\n\n        // update the solr.in.sh file to comment out the necessary authentication lines\n        updateIncludeFileDisableAuth(includeFile);\n        return 0;\n      }\n\n      System.out.println(\"Options not understood (should be -enable or -disable).\");\n      new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1396efc84e04da571f41a8f47919f874385db0a8","date":1494866186,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      if (cli.hasOption(\"enable\") && cli.hasOption(\"disable\")) {\n        System.out.println(\"You have specified both -enable and -disable. Only one should be provided.\");\n        return 1;\n      }\n      if  (cli.hasOption(\"enable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          System.out.println(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        \n        if (cli.hasOption(\"credentials\") == false && cli.hasOption(\"prompt\") == false) {\n          System.out.println(\"Option -credentials or -prompt is required with -enable.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        } else if (cli.hasOption(\"prompt\") == false &&\n            (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n          System.out.println(\"Option -credentials is not in correct format.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        }\n\n        String username, password;\n        if (cli.hasOption(\"credentials\")) {\n          String credentials = cli.getOptionValue(\"credentials\");\n          username = credentials.split(\":\")[0];\n          password = credentials.split(\":\")[1];\n        } else {\n          Console console = System.console();\n          username = console.readLine(\"Enter username: \");\n          password = new String(console.readPassword(\"Enter password: \"));\n        }\n        // check if security is already enabled or not\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          if (zkClient.exists(\"/security.json\", true)) {\n            byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n            if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n              System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth -disable'. Existing security.json: \\n\"\n                  + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n              exit(1);\n            }\n          }\n        }\n\n        boolean blockUnknown = cli.getOptionValue(\"blockUnknown\") == null ?\n            cli.hasOption(\"blockUnknown\"): Boolean.valueOf(cli.getOptionValue(\"blockUnknown\"));\n\n            String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n                \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n                \"\\n   \\\"credentials\\\":{\\\"\"+username+\"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n                \"\\n  },\" +\n                \"\\n  \\\"authorization\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n                \"\\n   \\\"permissions\\\":[\" +\n                \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n                \"\\n   ],\" +\n                \"\\n   \\\"user-role\\\":{\\\"\"+username+\"\\\":\\\"admin\\\"}\" +\n                \"\\n  }\" +\n                \"\\n}\";\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n\n            String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n            File includeFile = new File(solrIncludeFilename);\n            if (includeFile.exists() == false || includeFile.canWrite() == false) {\n              System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            File basicAuthConfFile = new File(includeFile.getParent() + File.separator + \"basicAuth.conf\");\n            \n            if (basicAuthConfFile.getParentFile().canWrite() == false) {\n              System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            \n            FileUtils.writeStringToFile(basicAuthConfFile, \n                \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n            // update the solr.in.sh file to contain the necessary authentication lines\n            updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), username, password);\n            return 0;\n      } else if (cli.hasOption(\"disable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        System.out.println(\"Uploading following security.json: {}\");\n\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n        }\n\n        String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n        File includeFile = new File(solrIncludeFilename);\n        if (includeFile.exists() == false || includeFile.canWrite() == false) {\n          System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n          System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n          System.exit(0);\n        }\n\n        // update the solr.in.sh file to comment out the necessary authentication lines\n        updateIncludeFileDisableAuth(includeFile);\n        return 0;\n      }\n\n      System.out.println(\"Options not understood (should be -enable or -disable).\");\n      new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      if (cli.hasOption(\"enable\") && cli.hasOption(\"disable\")) {\n        System.out.println(\"You have specified both -enable and -disable. Only one should be provided.\");\n        return 1;\n      }\n      if  (cli.hasOption(\"enable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          System.out.println(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        \n        if (cli.hasOption(\"credentials\") == false && cli.hasOption(\"prompt\") == false) {\n          System.out.println(\"Option -credentials or -prompt is required with -enable.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        } else if (cli.hasOption(\"prompt\") == false &&\n            (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n          System.out.println(\"Option -credentials is not in correct format.\");\n          new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n          exit(1);\n        }\n\n        String username, password;\n        if (cli.hasOption(\"credentials\")) {\n          String credentials = cli.getOptionValue(\"credentials\");\n          username = credentials.split(\":\")[0];\n          password = credentials.split(\":\")[1];\n        } else {\n          Console console = System.console();\n          username = console.readLine(\"Enter username: \");\n          password = new String(console.readPassword(\"Enter password: \"));\n        }\n        // check if security is already enabled or not\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          if (zkClient.exists(\"/security.json\", true)) {\n            byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n            if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n              System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth -disable'. Existing security.json: \\n\"\n                  + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n              exit(1);\n            }\n          }\n        }\n\n        boolean blockUnknown = cli.getOptionValue(\"blockUnknown\") == null ?\n            cli.hasOption(\"blockUnknown\"): Boolean.valueOf(cli.getOptionValue(\"blockUnknown\"));\n\n            String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n                \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n                \"\\n   \\\"credentials\\\":{\\\"\"+username+\"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n                \"\\n  },\" +\n                \"\\n  \\\"authorization\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n                \"\\n   \\\"permissions\\\":[\" +\n                \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n                \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n                \"\\n   ],\" +\n                \"\\n   \\\"user-role\\\":{\\\"\"+username+\"\\\":\\\"admin\\\"}\" +\n                \"\\n  }\" +\n                \"\\n}\";\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n\n            String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n            File includeFile = new File(solrIncludeFilename);\n            if (includeFile.exists() == false || includeFile.canWrite() == false) {\n              System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            File basicAuthConfFile = new File(includeFile.getParent() + File.separator + \"basicAuth.conf\");\n            \n            if (basicAuthConfFile.getParentFile().canWrite() == false) {\n              System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n              printAuthEnablingInstructions(username, password);\n              System.exit(0);\n            }\n            \n            FileUtils.writeStringToFile(basicAuthConfFile, \n                \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n            // update the solr.in.sh file to contain the necessary authentication lines\n            updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), username, password);\n            return 0;\n      } else if (cli.hasOption(\"disable\")) {\n        String zkHost = getZkHost(cli);\n        if (zkHost == null) {\n          stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n          exit(1);\n        }\n\n        System.out.println(\"Uploading following security.json: {}\");\n\n        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n          zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n        }\n\n        String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n        File includeFile = new File(solrIncludeFilename);\n        if (includeFile.exists() == false || includeFile.canWrite() == false) {\n          System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n          System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n          System.exit(0);\n        }\n\n        // update the solr.in.sh file to comment out the necessary authentication lines\n        updateIncludeFileDisableAuth(includeFile);\n        return 0;\n      }\n\n      System.out.println(\"Options not understood (should be -enable or -disable).\");\n      new HelpFormatter().printHelp(\"bin/solr auth [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","date":1499421663,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      if (type.equalsIgnoreCase(\"basicAuth\") == false) {\n        System.out.println(\"Only type=basicAuth supported at the moment.\");\n        exit(1);\n      }\n\n      String cmd = cli.getArgs()[0];\n      boolean prompt = Boolean.parseBoolean(cli.getOptionValue(\"prompt\", \"false\"));\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      switch (cmd) {\n        case \"enable\":\n          if (!prompt && !cli.hasOption(\"credentials\")) {\n            System.out.println(\"Option -credentials or -prompt is required with enable.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          } else if (!prompt && (cli.getOptionValue(\"credentials\") == null || !cli.getOptionValue(\"credentials\").contains(\":\"))) {\n            System.out.println(\"Option -credentials is not in correct format.\");\n            new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n            exit(1);\n          }\n\n          String zkHost = null;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n            if (zkHost == null) {\n              if (cli.hasOption(\"zkHost\")) {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure that ZooKeeper is running and the correct zkHost has been passed in.\");\n              } else {\n                System.out.println(\"Couldn't get ZooKeeper host. Please make sure Solr is running in cloud mode, or a zkHost has been passed in.\");\n              }\n              exit(1);\n            }\n\n            // check if security is already enabled or not\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              if (zkClient.exists(\"/security.json\", true)) {\n                byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                  System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                      + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                  exit(1);\n                }\n              }\n            }\n          }\n\n          String username, password;\n          if (cli.hasOption(\"credentials\")) {\n            String credentials = cli.getOptionValue(\"credentials\");\n            username = credentials.split(\":\")[0];\n            password = credentials.split(\":\")[1];\n          } else {\n            Console console = System.console();\n            username = console.readLine(\"Enter username: \");\n            password = new String(console.readPassword(\"Enter password: \"));\n          }\n\n          boolean blockUnknown = Boolean.valueOf(cli.getOptionValue(\"blockUnknown\", \"false\"));\n\n          String securityJson = \"{\" +\n              \"\\n  \\\"authentication\\\":{\" +\n              \"\\n   \\\"blockUnknown\\\": \" + blockUnknown + \",\" +\n              \"\\n   \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\" +\n              \"\\n   \\\"credentials\\\":{\\\"\" + username + \"\\\":\\\"\" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + \"\\\"}\" +\n              \"\\n  },\" +\n              \"\\n  \\\"authorization\\\":{\" +\n              \"\\n   \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\" +\n              \"\\n   \\\"permissions\\\":[\" +\n              \"\\n {\\\"name\\\":\\\"security-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"collection-admin-edit\\\", \\\"role\\\":\\\"admin\\\"},\" +\n              \"\\n {\\\"name\\\":\\\"core-admin-edit\\\", \\\"role\\\":\\\"admin\\\"}\" +\n              \"\\n   ],\" +\n              \"\\n   \\\"user-role\\\":{\\\"\" + username + \"\\\":\\\"admin\\\"}\" +\n              \"\\n  }\" +\n              \"\\n}\";\n\n          if (!updateIncludeFileOnly) {\n            System.out.println(\"Uploading following security.json: \" + securityJson);\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n          String authConfDir = cli.getOptionValue(\"authConfDir\");\n          File basicAuthConfFile = new File(authConfDir + File.separator + \"basicAuth.conf\");\n\n          if (basicAuthConfFile.getParentFile().canWrite() == false) {\n            System.out.println(\"Cannot write to file: \" + basicAuthConfFile.getAbsolutePath());\n            printAuthEnablingInstructions(username, password);\n            System.exit(0);\n          }\n\n          FileUtils.writeStringToFile(basicAuthConfFile,\n              \"httpBasicAuthUser=\" + username + \"\\nhttpBasicAuthPassword=\" + password, StandardCharsets.UTF_8);\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath());\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c458333dd8c8b935c4a00af68cdb5371e68532a","date":1525693273,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          CLIO.out(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.getOptions().length == 0 || cli.getArgs().length == 0 || cli.getArgs().length > 1 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n\n      ensureArgumentIsValidBooleanIfPresent(cli, \"blockUnknown\");\n      ensureArgumentIsValidBooleanIfPresent(cli, \"updateIncludeFileOnly\");\n\n      String type = cli.getOptionValue(\"type\", \"basicAuth\");\n      switch (type) {\n        case \"basicAuth\":\n          return handleBasicAuth(cli);\n        case \"kerberos\":\n          return handleKerberos(cli);\n        default:\n          System.out.println(\"Only type=basicAuth or kerberos supported at the moment.\");\n          exit(1);\n      }\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["e9017cf144952056066919f1ebc7897ff9bd71b1","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"1396efc84e04da571f41a8f47919f874385db0a8":["f5eb842cfee458c37a15154f49502a6a00fc662f"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["f5eb842cfee458c37a15154f49502a6a00fc662f","1396efc84e04da571f41a8f47919f874385db0a8"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["e9017cf144952056066919f1ebc7897ff9bd71b1","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["4c458333dd8c8b935c4a00af68cdb5371e68532a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4c458333dd8c8b935c4a00af68cdb5371e68532a","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"f5eb842cfee458c37a15154f49502a6a00fc662f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"4c458333dd8c8b935c4a00af68cdb5371e68532a":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4c458333dd8c8b935c4a00af68cdb5371e68532a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"1396efc84e04da571f41a8f47919f874385db0a8":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["f9a989a32a073c55e3aef6f807a3474184bbcf49","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f5eb842cfee458c37a15154f49502a6a00fc662f":["1396efc84e04da571f41a8f47919f874385db0a8","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","f5eb842cfee458c37a15154f49502a6a00fc662f"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4c458333dd8c8b935c4a00af68cdb5371e68532a"],"4c458333dd8c8b935c4a00af68cdb5371e68532a":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}