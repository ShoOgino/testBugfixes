{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    getClusterStateProvider().connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    stateProvider.connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   * <em>or</em> the set of live nodes changes.\n   *\n   * <p>\n   * The Watcher will automatically be removed when it's \n   * <code>onStateChanged</code> returns <code>true</code>\n   * </p>\n   *\n   * <p>\n   * This implementation utilizes {@link ZkStateReader#registerCollectionStateWatcher} internally.\n   * Callers that don't care about liveNodes are encouraged to use a {@link DocCollectionWatcher} \n   * instead\n   * </p>\n   *\n   * @see #registerDocCollectionWatcher(String, DocCollectionWatcher)\n   * @see ZkStateReader#registerCollectionStateWatcher\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    getClusterStateProvider().connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    getClusterStateProvider().connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}