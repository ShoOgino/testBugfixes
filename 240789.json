{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","commits":[{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      // we cannot use reader context here, as reader is\n      // already closed and calling getTopReaderContext() throws AlreadyClosed!\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (final IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      // we cannot use reader context here, as reader is\n      // already closed and calling getTopReaderContext() throws AlreadyClosed!\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (final IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      // we cannot use reader context here, as reader is\n      // already closed and calling getTopReaderContext() throws AlreadyClosed!\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (final IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      // we cannot use reader context here, as reader is\n      // already closed and calling getTopReaderContext() throws AlreadyClosed!\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (final IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      // we cannot use reader context here, as reader is\n      // already closed and calling getTopReaderContext() throws AlreadyClosed!\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (final IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      List<? extends IndexReader> subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (IndexReader r : subReaders) {\n        assertReaderClosed(r, checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}