{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Random,Directory,IndexWriterConfig,TestPoint).mjava","commits":[{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Random,Directory,IndexWriterConfig,TestPoint).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an indexwriter that enables the specified test point */\n  public static IndexWriter mockIndexWriter(Random r, Directory dir, IndexWriterConfig conf, TestPoint testPoint) throws IOException {\n    conf.setInfoStream(new TestPointInfoStream(conf.getInfoStream(), testPoint));\n    DirectoryReader reader = null;\n    if (r.nextBoolean() && DirectoryReader.indexExists(dir) && conf.getOpenMode() != IndexWriterConfig.OpenMode.CREATE) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW: open writer from reader\");\n      }\n      reader = DirectoryReader.open(dir);\n      conf.setIndexCommit(reader.getIndexCommit());\n    }\n\n    IndexWriter iw;\n    boolean success = false;\n    try {\n      iw = new IndexWriter(dir, conf);\n      success = true;\n    } finally {\n      if (reader != null) {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader);\n        }\n      }\n    }\n    iw.enableTestPoints = true;\n    return iw;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Random,Directory,IndexWriterConfig,TestPoint).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#mockIndexWriter(Random,Directory,IndexWriterConfig,TestPoint).mjava","sourceNew":"  /** Returns an indexwriter that enables the specified test point */\n  public static IndexWriter mockIndexWriter(Random r, Directory dir, IndexWriterConfig conf, TestPoint testPoint) throws IOException {\n    conf.setInfoStream(new TestPointInfoStream(conf.getInfoStream(), testPoint));\n    DirectoryReader reader = null;\n    if (r.nextBoolean() && DirectoryReader.indexExists(dir) && conf.getOpenMode() != IndexWriterConfig.OpenMode.CREATE) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW: open writer from reader\");\n      }\n      reader = DirectoryReader.open(dir);\n      conf.setIndexCommit(reader.getIndexCommit());\n    }\n\n    IndexWriter iw;\n    boolean success = false;\n    try {\n      iw = new IndexWriter(dir, conf) {\n        @Override\n        protected boolean isEnableTestPoints() {\n          return true;\n        }\n      };\n      success = true;\n    } finally {\n      if (reader != null) {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader);\n        }\n      }\n    }\n    return iw;\n  }\n\n","sourceOld":"  /** Returns an indexwriter that enables the specified test point */\n  public static IndexWriter mockIndexWriter(Random r, Directory dir, IndexWriterConfig conf, TestPoint testPoint) throws IOException {\n    conf.setInfoStream(new TestPointInfoStream(conf.getInfoStream(), testPoint));\n    DirectoryReader reader = null;\n    if (r.nextBoolean() && DirectoryReader.indexExists(dir) && conf.getOpenMode() != IndexWriterConfig.OpenMode.CREATE) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW: open writer from reader\");\n      }\n      reader = DirectoryReader.open(dir);\n      conf.setIndexCommit(reader.getIndexCommit());\n    }\n\n    IndexWriter iw;\n    boolean success = false;\n    try {\n      iw = new IndexWriter(dir, conf);\n      success = true;\n    } finally {\n      if (reader != null) {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader);\n        }\n      }\n    }\n    iw.enableTestPoints = true;\n    return iw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}