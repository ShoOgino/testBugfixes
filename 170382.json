{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"/dev/null","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"/dev/null","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"/dev/null","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a8694a87008a807285cc5c5bf08343d192fa4f5","date":1462392236,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d1133cd318337807404d717f360f631834fb953","date":1462455707,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e","date":1462474069,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(collectionName);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#indexDocs(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#indexDocs(String).mjava","sourceNew":null,"sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    client.add(docs);// batch\n    client.commit(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d1133cd318337807404d717f360f631834fb953":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","6a8694a87008a807285cc5c5bf08343d192fa4f5"],"6a8694a87008a807285cc5c5bf08343d192fa4f5":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["55b50463286869f584cf849d1587a0fcd54d1dfa","6a8694a87008a807285cc5c5bf08343d192fa4f5"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["73450c0955930295d34703e7ddbfc6973b7a121a","9d1133cd318337807404d717f360f631834fb953"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"9d1133cd318337807404d717f360f631834fb953":["87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"73450c0955930295d34703e7ddbfc6973b7a121a":["9d1133cd318337807404d717f360f631834fb953","87e7a11c689e4d6ff62db8585a16d1b7aad9c98e"],"6a8694a87008a807285cc5c5bf08343d192fa4f5":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["73450c0955930295d34703e7ddbfc6973b7a121a","6a8694a87008a807285cc5c5bf08343d192fa4f5","55b50463286869f584cf849d1587a0fcd54d1dfa","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"87e7a11c689e4d6ff62db8585a16d1b7aad9c98e":["4c623a7f72be34d6c45bee682028c50327d9e4b7","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}