{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e, false);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_findClass(String,Class[T],String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#findClass(String,String...).mjava","sourceNew":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public <T> Class<? extends T> findClass(String cname, Class<T> expectedType, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader).asSubclass(expectedType);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class<? extends T> clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader).asSubclass(expectedType);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader).asSubclass(expectedType);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method loads a class either with it's FQN or a short-name (solr.class-simplename or class-simplename).\n   * It tries to load the class with the name that is given first and if it fails, it tries all the known\n   * solr packages. This method caches the FQN of a short-name in a static map in-order to make subsequent lookups\n   * for the same class faster. The caching is done only if the class is loaded by the webapp classloader and it\n   * is loaded using a shortname.\n   *\n   * @param cname The name or the short name of the class.\n   * @param subpackages the packages to be tried if the cnams starts with solr.\n   * @return the loaded class. An exception is thrown if it fails\n   */\n  public Class findClass(String cname, String... subpackages) {\n    if (subpackages == null || subpackages.length == 0 || subpackages == packages) {\n      subpackages = packages;\n      String  c = classNameCache.get(cname);\n      if(c != null) {\n        try {\n          return Class.forName(c, true, classLoader);\n        } catch (ClassNotFoundException e) {\n          //this is unlikely\n          log.error(\"Unable to load cached class-name :  \"+ c +\" for shortname : \"+cname + e);\n        }\n\n      }\n    }\n    Class clazz = null;\n    // first try cname == full name\n    try {\n      return Class.forName(cname, true, classLoader);\n    } catch (ClassNotFoundException e) {\n      String newName=cname;\n      if (newName.startsWith(project)) {\n        newName = cname.substring(project.length()+1);\n      }\n      for (String subpackage : subpackages) {\n        try {\n          String name = base + '.' + subpackage + newName;\n          log.trace(\"Trying class name \" + name);\n          return clazz = Class.forName(name,true,classLoader);\n        } catch (ClassNotFoundException e1) {\n          // ignore... assume first exception is best.\n        }\n      }\n  \n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error loading class '\" + cname + \"'\", e);\n    }finally{\n      //cache the shortname vs FQN if it is loaded by the webapp classloader  and it is loaded\n      // using a shortname\n      if ( clazz != null &&\n              clazz.getClassLoader() == SolrResourceLoader.class.getClassLoader() &&\n              !cname.equals(clazz.getName()) &&\n              (subpackages.length == 0 || subpackages == packages)) {\n        //store in the cache\n        classNameCache.put(cname, clazz.getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}