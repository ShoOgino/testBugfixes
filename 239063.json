{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","commits":[{"id":"b046c3e04315940a761d69bb348c761c11d995d4","date":1347605712,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","sourceNew":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(String c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","date":1383406909,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","sourceNew":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec","date":1384175856,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","sourceNew":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","bugFix":["e91746d568843981a68fb96dcecc7f383eb55701"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","sourceNew":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(leafReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   * @param c the class\n   * @return the average number of unique terms\n   * @throws IOException if a low level I/O problem happens\n   */\n  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(leafReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(leafReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(Term).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   * @param term the term representing the class\n   * @return the average number of unique terms\n   * @throws IOException if a low level I/O problem happens\n   */\n  private double getTextTermFreqForClass(Term term) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(leafReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = leafReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   * @param c the class\n   * @return the average number of unique terms\n   * @throws IOException if a low level I/O problem happens\n   */\n  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    double avgNumberOfUniqueTerms = 0;\n    for (String textFieldName : textFieldNames) {\n      Terms terms = MultiFields.getTerms(leafReader, textFieldName);\n      long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n      avgNumberOfUniqueTerms += numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    }\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["134a24d0cb66520908d88384f1a559875704ed25"],"b046c3e04315940a761d69bb348c761c11d995d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["b046c3e04315940a761d69bb348c761c11d995d4"],"134a24d0cb66520908d88384f1a559875704ed25":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38b5bd3ae837751f57f363e9a41b833794222814"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b046c3e04315940a761d69bb348c761c11d995d4"],"38b5bd3ae837751f57f363e9a41b833794222814":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b046c3e04315940a761d69bb348c761c11d995d4":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"134a24d0cb66520908d88384f1a559875704ed25":["38b5bd3ae837751f57f363e9a41b833794222814"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["134a24d0cb66520908d88384f1a559875704ed25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}