{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","commits":[{"id":"205c262e058cd0f7d3b92d4742749368cada2eb2","date":1271674460,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /**\n   * Example showing how to use the SnapshotDeletionPolicy to take a backup.\n   * This method does not really do a backup; instead, it reads every byte of\n   * every file just to test that the files indeed exist and are readable even\n   * while the index is changing.\n   */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot(\"id\"));\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release(\"id\");\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /**\n   * Example showing how to use the SnapshotDeletionPolicy to take a backup.\n   * This method does not really do a backup; instead, it reads every byte of\n   * every file just to test that the files indeed exist and are readable even\n   * while the index is changing.\n   */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot(\"id\"));\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release(\"id\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Example showing how to use the SnapshotDeletionPolicy to take a backup.\n   * This method does not really do a backup; instead, it reads every byte of\n   * every file just to test that the files indeed exist and are readable even\n   * while the index is changing.\n   */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot(\"id\"));\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release(\"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"205c262e058cd0f7d3b92d4742749368cada2eb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["205c262e058cd0f7d3b92d4742749368cada2eb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"205c262e058cd0f7d3b92d4742749368cada2eb2":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["205c262e058cd0f7d3b92d4742749368cada2eb2"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}