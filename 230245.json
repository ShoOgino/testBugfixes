{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return new SortedSetDocsWithField(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    if (field.getDocValuesType() == FieldInfo.DocValuesType.SORTED_SET) {\n      return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n    } else {\n      return new Bits.MatchAllBits(maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}