{"path":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","commits":[{"id":"ad5c037f4cf3ce8870b782e5228d9f308eeda6f9","date":1391560885,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get standard query parsers registered by default.\n   *\n   * @see org.apache.solr.search.QParserPlugin#standardPlugins\n   * @return Map of classes extending QParserPlugin keyed by the registered name\n   */\n  private Map<String,Class<QParserPlugin>> getStandardQParsers() {\n    Object[] standardPluginsValue = QParserPlugin.standardPlugins;\n\n    Map<String, Class<QParserPlugin>> standardPlugins \n      = new HashMap<String, Class<QParserPlugin>>(standardPluginsValue.length / 2);\n\n    for (int i = 0; i < standardPluginsValue.length; i += 2) {\n      @SuppressWarnings(\"unchecked\")\n      String registeredName = (String) standardPluginsValue[i];\n      @SuppressWarnings(\"unchecked\")\n      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];\n      standardPlugins.put(registeredName, clazz);\n    }\n    return standardPlugins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","sourceNew":"  /**\n   * Get standard query parsers registered by default.\n   *\n   * @see org.apache.solr.search.QParserPlugin#standardPlugins\n   * @return Map of classes extending QParserPlugin keyed by the registered name\n   */\n  private Map<String,Class<QParserPlugin>> getStandardQParsers() {\n    Object[] standardPluginsValue = QParserPlugin.standardPlugins;\n\n    Map<String, Class<QParserPlugin>> standardPlugins \n      = new HashMap<>(standardPluginsValue.length / 2);\n\n    for (int i = 0; i < standardPluginsValue.length; i += 2) {\n      @SuppressWarnings(\"unchecked\")\n      String registeredName = (String) standardPluginsValue[i];\n      @SuppressWarnings(\"unchecked\")\n      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];\n      standardPlugins.put(registeredName, clazz);\n    }\n    return standardPlugins;\n  }\n\n","sourceOld":"  /**\n   * Get standard query parsers registered by default.\n   *\n   * @see org.apache.solr.search.QParserPlugin#standardPlugins\n   * @return Map of classes extending QParserPlugin keyed by the registered name\n   */\n  private Map<String,Class<QParserPlugin>> getStandardQParsers() {\n    Object[] standardPluginsValue = QParserPlugin.standardPlugins;\n\n    Map<String, Class<QParserPlugin>> standardPlugins \n      = new HashMap<String, Class<QParserPlugin>>(standardPluginsValue.length / 2);\n\n    for (int i = 0; i < standardPluginsValue.length; i += 2) {\n      @SuppressWarnings(\"unchecked\")\n      String registeredName = (String) standardPluginsValue[i];\n      @SuppressWarnings(\"unchecked\")\n      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];\n      standardPlugins.put(registeredName, clazz);\n    }\n    return standardPlugins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get standard query parsers registered by default.\n   *\n   * @see org.apache.solr.search.QParserPlugin#standardPlugins\n   * @return Map of classes extending QParserPlugin keyed by the registered name\n   */\n  private Map<String,Class<QParserPlugin>> getStandardQParsers() {\n    Object[] standardPluginsValue = QParserPlugin.standardPlugins;\n\n    Map<String, Class<QParserPlugin>> standardPlugins \n      = new HashMap<>(standardPluginsValue.length / 2);\n\n    for (int i = 0; i < standardPluginsValue.length; i += 2) {\n      @SuppressWarnings(\"unchecked\")\n      String registeredName = (String) standardPluginsValue[i];\n      @SuppressWarnings(\"unchecked\")\n      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];\n      standardPlugins.put(registeredName, clazz);\n    }\n    return standardPlugins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestStandardQParsers#getStandardQParsers().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get standard query parsers registered by default.\n   *\n   * @see org.apache.solr.search.QParserPlugin#standardPlugins\n   * @return Map of classes extending QParserPlugin keyed by the registered name\n   */\n  private Map<String,Class<QParserPlugin>> getStandardQParsers() {\n    Object[] standardPluginsValue = QParserPlugin.standardPlugins;\n\n    Map<String, Class<QParserPlugin>> standardPlugins \n      = new HashMap<>(standardPluginsValue.length / 2);\n\n    for (int i = 0; i < standardPluginsValue.length; i += 2) {\n      @SuppressWarnings(\"unchecked\")\n      String registeredName = (String) standardPluginsValue[i];\n      @SuppressWarnings(\"unchecked\")\n      Class<QParserPlugin> clazz = (Class<QParserPlugin>) standardPluginsValue[i + 1];\n      standardPlugins.put(registeredName, clazz);\n    }\n    return standardPlugins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad5c037f4cf3ce8870b782e5228d9f308eeda6f9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9aea0485ecacb6734c17da2d02569816c23a69c1"],"ad5c037f4cf3ce8870b782e5228d9f308eeda6f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ad5c037f4cf3ce8870b782e5228d9f308eeda6f9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad5c037f4cf3ce8870b782e5228d9f308eeda6f9"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}