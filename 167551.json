{"path":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * returns a ToleratedUpdateError instance from the data in this Map \n   * @see #getSimpleMap\n   */\n  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data) {\n    final String id = data.get(\"id\");\n    final String message = data.get(\"message\");\n    final String t = data.get(\"type\");\n    if (null == t || null == id || null == message) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'\");\n    }\n    try {\n      return new ToleratedUpdateError(CmdType.valueOf(t), id, message);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid type for ToleratedUpdateError: \" + t, iae);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","sourceNew":"  /** \n   * returns a ToleratedUpdateError instance from the data in this Map \n   * @see #getSimpleMap\n   */\n  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data) {\n    final String id = data.get(ID);\n    final String message = data.get(\"message\");\n    final String t = data.get(\"type\");\n    if (null == t || null == id || null == message) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'\");\n    }\n    try {\n      return new ToleratedUpdateError(CmdType.valueOf(t), id, message);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid type for ToleratedUpdateError: \" + t, iae);\n    }\n  }\n\n","sourceOld":"  /** \n   * returns a ToleratedUpdateError instance from the data in this Map \n   * @see #getSimpleMap\n   */\n  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data) {\n    final String id = data.get(\"id\");\n    final String message = data.get(\"message\");\n    final String t = data.get(\"type\");\n    if (null == t || null == id || null == message) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'\");\n    }\n    try {\n      return new ToleratedUpdateError(CmdType.valueOf(t), id, message);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid type for ToleratedUpdateError: \" + t, iae);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/ToleratedUpdateError#parseMap(SimpleOrderedMap[String]).mjava","sourceNew":"  /** \n   * returns a ToleratedUpdateError instance from the data in this Map \n   * @see #getSimpleMap\n   */\n  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data) {\n    final String id = data.get(ID);\n    final String message = data.get(\"message\");\n    final String t = data.get(\"type\");\n    if (null == t || null == id || null == message) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'\");\n    }\n    try {\n      return new ToleratedUpdateError(CmdType.valueOf(t), id, message);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid type for ToleratedUpdateError: \" + t, iae);\n    }\n  }\n\n","sourceOld":"  /** \n   * returns a ToleratedUpdateError instance from the data in this Map \n   * @see #getSimpleMap\n   */\n  public static ToleratedUpdateError parseMap(SimpleOrderedMap<String> data) {\n    final String id = data.get(\"id\");\n    final String message = data.get(\"message\");\n    final String t = data.get(\"type\");\n    if (null == t || null == id || null == message) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Map does not represent a ToleratedUpdateError, must contain 'type', 'id', and 'message'\");\n    }\n    try {\n      return new ToleratedUpdateError(CmdType.valueOf(t), id, message);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid type for ToleratedUpdateError: \" + t, iae);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}