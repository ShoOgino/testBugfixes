{"path":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592e183306e8e4efabf3e7e08d3e709c9b97dbb","date":1324403520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    IndexOutput out = null;\n    IndexInput in = null;\n    try {\n      synchronized(uncacheLock) {\n        if (VERBOSE) {\n          System.out.println(\"nrtdir.unCache name=\" + fileName);\n        }\n        if (!cache.fileExists(fileName)) {\n          // Another thread beat us...\n          return;\n        }\n        IOContext context = IOContext.DEFAULT;\n        if (delegate.fileExists(fileName)) {\n          throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n        }\n        out = delegate.createOutput(fileName, context);\n\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n\n        // Lock order: uncacheLock -> this\n        synchronized(this) {\n          // Must sync here because other sync methods have\n          // if (cache.fileExists(name)) { ... } else { ... }:\n          cache.deleteFile(fileName);\n        }\n      }\n    } finally {\n      IOUtils.close(in, out);\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    final IndexOutput out;\n    IOContext context = IOContext.DEFAULT;\n    synchronized(this) {\n      if (!delegate.fileExists(fileName)) {\n        assert cache.fileExists(fileName);\n        out = delegate.createOutput(fileName, context);\n      } else {\n        out = null;\n      }\n    }\n\n    if (out != null) {\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n      synchronized(this) {\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","46855a2e3c096d06b604f73733ed9fefa822ba45","24230fe54121f9be9d85f2c2067536296785e421"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cf5b119f7d5d61d024cad22094da38a42def6d7","date":1325522885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    IndexOutput out = null;\n    IndexInput in = null;\n    try {\n      synchronized(uncacheLock) {\n        if (VERBOSE) {\n          System.out.println(\"nrtdir.unCache name=\" + fileName);\n        }\n        if (!cache.fileExists(fileName)) {\n          // Another thread beat us...\n          return;\n        }\n        IOContext context = IOContext.DEFAULT;\n        if (delegate.fileExists(fileName)) {\n          throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n        }\n        out = delegate.createOutput(fileName, context);\n\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n\n        // Lock order: uncacheLock -> this\n        synchronized(this) {\n          // Must sync here because other sync methods have\n          // if (cache.fileExists(name)) { ... } else { ... }:\n          cache.deleteFile(fileName);\n        }\n      }\n    } finally {\n      IOUtils.close(in, out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#unCache(String).mjava","sourceNew":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","sourceOld":"  private void unCache(String fileName) throws IOException {\n    // Only let one thread uncache at a time; this only\n    // happens during commit() or close():\n    synchronized(uncacheLock) {\n      if (VERBOSE) {\n        System.out.println(\"nrtdir.unCache name=\" + fileName);\n      }\n      if (!cache.fileExists(fileName)) {\n        // Another thread beat us...\n        return;\n      }\n      if (delegate.fileExists(fileName)) {\n        throw new IOException(\"cannot uncache file=\\\"\" + fileName + \"\\\": it was separately also created in the delegate directory\");\n      }\n      final IOContext context = IOContext.DEFAULT;\n      final IndexOutput out = delegate.createOutput(fileName, context);\n      IndexInput in = null;\n      try {\n        in = cache.openInput(fileName, context);\n        in.copyBytes(out, in.length());\n      } finally {\n        IOUtils.close(in, out);\n      }\n\n      // Lock order: uncacheLock -> this\n      synchronized(this) {\n        // Must sync here because other sync methods have\n        // if (cache.fileExists(name)) { ... } else { ... }:\n        cache.deleteFile(fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"5cf5b119f7d5d61d024cad22094da38a42def6d7":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cf5b119f7d5d61d024cad22094da38a42def6d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["5cf5b119f7d5d61d024cad22094da38a42def6d7"],"5cf5b119f7d5d61d024cad22094da38a42def6d7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}