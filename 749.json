{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","sourceNew":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;\n    this.offsetAtt = addAttribute(OffsetAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    this.termAtt = addAttribute(TermAttribute.class);\n    this.flagsAtt = addAttribute(FlagsAttribute.class);    \n  }\n\n","sourceOld":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;\n    this.offsetAtt = addAttribute(OffsetAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    this.termAtt = addAttribute(TermAttribute.class);\n    this.flagsAtt = addAttribute(FlagsAttribute.class);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","sourceNew":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","sourceOld":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;\n    this.offsetAtt = addAttribute(OffsetAttribute.class);\n    this.typeAtt = addAttribute(TypeAttribute.class);\n    this.posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    this.termAtt = addAttribute(TermAttribute.class);\n    this.flagsAtt = addAttribute(FlagsAttribute.class);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d074913729152b7b242d4fe770ecf2a45e34a5ce","date":1333987241,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","sourceNew":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    // TODO: cutover to enum\n    if (tokenOutput != TOKENS_ONLY &&\n        tokenOutput != UNTOKENIZED_ONLY &&\n        tokenOutput != BOTH) {\n      throw new IllegalArgumentException(\"tokenOutput must be TOKENS_ONLY, UNTOKENIZED_ONLY or BOTH\");\n    }\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","sourceOld":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","sourceNew":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    // TODO: cutover to enum\n    if (tokenOutput != TOKENS_ONLY &&\n        tokenOutput != UNTOKENIZED_ONLY &&\n        tokenOutput != BOTH) {\n      throw new IllegalArgumentException(\"tokenOutput must be TOKENS_ONLY, UNTOKENIZED_ONLY or BOTH\");\n    }\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","sourceOld":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#init(int,Set[String]).mjava","sourceNew":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    // TODO: cutover to enum\n    if (tokenOutput != TOKENS_ONLY &&\n        tokenOutput != UNTOKENIZED_ONLY &&\n        tokenOutput != BOTH) {\n      throw new IllegalArgumentException(\"tokenOutput must be TOKENS_ONLY, UNTOKENIZED_ONLY or BOTH\");\n    }\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","sourceOld":"  private void init(int tokenOutput, Set<String> untokenizedTypes) {\n    // TODO: cutover to enum\n    if (tokenOutput != TOKENS_ONLY &&\n        tokenOutput != UNTOKENIZED_ONLY &&\n        tokenOutput != BOTH) {\n      throw new IllegalArgumentException(\"tokenOutput must be TOKENS_ONLY, UNTOKENIZED_ONLY or BOTH\");\n    }\n    this.tokenOutput = tokenOutput;\n    this.untokenizedTypes = untokenizedTypes;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a7347509fad0711ac30cb15a746e9a3830a38ebd","d074913729152b7b242d4fe770ecf2a45e34a5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"d074913729152b7b242d4fe770ecf2a45e34a5ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","d074913729152b7b242d4fe770ecf2a45e34a5ce"],"d074913729152b7b242d4fe770ecf2a45e34a5ce":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}