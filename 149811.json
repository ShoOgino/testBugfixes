{"path":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}