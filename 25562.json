{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrServer).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL());\n    client.setConnectionTimeout(15000);\n    client.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n    NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n    NamedList stats = (NamedList) uhandler.get(\"stats\");\n    Long commits = (Long) stats.get(\"commits\");\n    client.shutdown();\n    return commits;\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrServer solrServer) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(solrServer.getBaseURL());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n    NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n    NamedList stats = (NamedList) uhandler.get(\"stats\");\n    Long commits = (Long) stats.get(\"commits\");\n    server.shutdown();\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL());\n    client.setConnectionTimeout(15000);\n    client.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n    NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n    NamedList stats = (NamedList) uhandler.get(\"stats\");\n    Long commits = (Long) stats.get(\"commits\");\n    client.shutdown();\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = new HttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATE\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATE\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATEHANDLER\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATE\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    try (HttpSolrClient client = getHttpSolrClient(sourceClient.getBaseURL())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n      NamedList uhandlerCat = (NamedList) mbeans.get(\"UPDATE\");\n      NamedList uhandler = (NamedList) uhandlerCat.get(\"updateHandler\");\n      NamedList stats = (NamedList) uhandler.get(\"stats\");\n      return (Long) stats.get(\"commits\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#getNumCommits(HttpSolrClient).mjava","sourceNew":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","sourceOld":"  private Long getNumCommits(HttpSolrClient sourceClient) throws\n      SolrServerException, IOException {\n    // construct the /admin/metrics URL\n    URL url = new URL(sourceClient.getBaseURL());\n    String path = url.getPath().substring(1);\n    String[] elements = path.split(\"/\");\n    String collection = elements[elements.length - 1];\n    String urlString = url.toString();\n    urlString = urlString.substring(0, urlString.length() - collection.length() - 1);\n    try (HttpSolrClient client = getHttpSolrClient(urlString, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      //params.set(\"qt\", \"/admin/metrics?prefix=UPDATE.updateHandler&registry=solr.core.\" + collection);\n      params.set(\"qt\", \"/admin/metrics\");\n      params.set(\"prefix\", \"UPDATE.updateHandler\");\n      params.set(\"registry\", \"solr.core.\" + collection);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      NamedList<Object> resp = client.request(req);\n      NamedList metrics = (NamedList) resp.get(\"metrics\");\n      NamedList uhandlerCat = (NamedList) metrics.getVal(0);\n      Map<String,Object> commits = (Map<String,Object>) uhandlerCat.get(\"UPDATE.updateHandler.commits\");\n      return (Long) commits.get(\"count\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"e98520789adb1d5ad05afb4956eca0944a929688":["43d1e498704edd2bba13548a189eed4dfccff11b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["816521ebaad5add9cb96bb88c577394e2938c40b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["43d1e498704edd2bba13548a189eed4dfccff11b"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43d1e498704edd2bba13548a189eed4dfccff11b":["e98520789adb1d5ad05afb4956eca0944a929688","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}