{"path":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    MultiTermQuery expected = new PrefixQuery(new Term(\"field\", \"prefix\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.1F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    wq.setBoost(0.2F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    wq.setBoost(0.3F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.4F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    MultiTermQuery expected = new PrefixQuery(new Term(\"field\", \"prefix\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.1F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    wq.setBoost(0.2F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    wq.setBoost(0.3F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.4F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    MultiTermQuery expected = new PrefixQuery(new Term(\"field\", \"prefix\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.1F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    wq.setBoost(0.2F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    wq.setBoost(0.3F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n    \n    wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    wq.setBoost(0.4F);\n    expected.setRewriteMethod(wq.getRewriteMethod());\n    expected.setBoost(wq.getBoost());\n    assertEquals(searcher.rewrite(expected), searcher.rewrite(wq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    MockRAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    assertTrue(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(searcher.getIndexReader()) instanceof AutomatonTermsEnum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms) instanceof AutomatonTermsEnum);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["a05409176bd65129d67a785ee70e881e238a9aef"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a05409176bd65129d67a785ee70e881e238a9aef","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","60ba444201d2570214b6fcf1d15600dc1a01f548","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}