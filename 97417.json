{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b11f32acac13cc087cc735808dfe19c2b52673b","date":1295972884,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8","9b87acd61509ed222a7ae58c584568eca5a6243e"],"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n      if (isMaster)\n        details.add(\"master\", master);\n      if (isSlave && showSlaveDetails)\n        details.add(\"slave\", slave);\n\n    }\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(boolean).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   *\n   * @param showSlaveDetails\n   */\n  private NamedList<Object> getReplicationDetails(boolean showSlaveDetails) {\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null) master.add(CONF_FILES, includeConfFiles);\n      master.add(REPLICATE_AFTER, getReplicateAfterStrings());\n      master.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n\n    SnapPuller snapPuller = tempSnapPuller;\n    if (showSlaveDetails && snapPuller != null) {\n      Properties props = loadReplicationProperties();\n      try {\n        NamedList<String> command = new NamedList<String>();\n        command.add(COMMAND, CMD_DETAILS);\n        command.add(\"slave\", \"false\");\n        NamedList nl = snapPuller.getCommandResponse(command);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (Exception e) {\n        LOG.warn(\"Exception while invoking 'details' method for replication on master \", e);\n        slave.add(ERR_STATUS, \"invalid_master\");\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, new Date(snapPuller.getNextScheduledExecTime()).toString());\n      } else if (isPollingDisabled()) {\n        slave.add(NEXT_EXECUTION_AT, \"Polling disabled\");\n      }\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n      addVal(slave, SnapPuller.INDEX_REPLICATED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT_LIST, props, List.class);\n      addVal(slave, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n      addVal(slave, SnapPuller.CONF_FILES_REPLICATED_AT, props, Integer.class);\n      addVal(slave, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n      addVal(slave, SnapPuller.TIMES_FAILED, props, Integer.class);\n      addVal(slave, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n      addVal(slave, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n\n      slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n      boolean isReplicating = isReplicating();\n      slave.add(\"isReplicating\", String.valueOf(isReplicating));\n      if (isReplicating) {\n        try {\n          long bytesToDownload = 0;\n          List<String> filesToDownload = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files to download\n          for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n\n          slave.add(\"filesToDownload\", filesToDownload);\n          slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n          slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n          long bytesDownloaded = 0;\n          List<String> filesDownloaded = new ArrayList<String>();\n          for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          //get list of conf files downloaded\n          for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n            filesDownloaded.add((String) file.get(NAME));\n            bytesDownloaded += (Long) file.get(SIZE);\n          }\n\n          Map<String, Object> currentFile = snapPuller.getCurrentFile();\n          String currFile = null;\n          long currFileSize = 0, currFileSizeDownloaded = 0;\n          float percentDownloaded = 0;\n          if (currentFile != null) {\n            currFile = (String) currentFile.get(NAME);\n            currFileSize = (Long) currentFile.get(SIZE);\n            if (currentFile.containsKey(\"bytesDownloaded\")) {\n              currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n              bytesDownloaded += currFileSizeDownloaded;\n              if (currFileSize > 0)\n                percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n            }\n          }\n          slave.add(\"filesDownloaded\", filesDownloaded);\n          slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n          long estimatedTimeRemaining = 0;\n\n          if (snapPuller.getReplicationStartTime() > 0) {\n            slave.add(\"replicationStartTime\", new Date(snapPuller.getReplicationStartTime()).toString());\n          }\n          long elapsed = getTimeElapsed(snapPuller);\n          slave.add(\"timeElapsed\", String.valueOf(elapsed) + \"s\");\n\n          if (bytesDownloaded > 0)\n            estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * elapsed) / bytesDownloaded;\n          float totalPercent = 0;\n          long downloadSpeed = 0;\n          if (bytesToDownload > 0)\n            totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n          if (elapsed > 0)\n            downloadSpeed = (bytesDownloaded / elapsed);\n          if (currFile != null)\n            slave.add(\"currentFile\", currFile);\n          slave.add(\"currentFileSize\", readableSize(currFileSize));\n          slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n          slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n          slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n          slave.add(\"totalPercent\", String.valueOf(totalPercent));\n          slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n          slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        } catch (Exception e) {\n          LOG.error(\"Exception while writing replication details: \", e);\n        }\n      }\n    }\n\n    if (isMaster)\n      details.add(\"master\", master);\n    if (isSlave && showSlaveDetails)\n      details.add(\"slave\", slave);\n    \n    NamedList snapshotStats = snapShootDetails;\n    if (snapshotStats != null)\n      details.add(CMD_BACKUP, snapshotStats);\n    \n    return details;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b11f32acac13cc087cc735808dfe19c2b52673b":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["0b11f32acac13cc087cc735808dfe19c2b52673b","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","0b11f32acac13cc087cc735808dfe19c2b52673b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0b11f32acac13cc087cc735808dfe19c2b52673b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","0b11f32acac13cc087cc735808dfe19c2b52673b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"0b11f32acac13cc087cc735808dfe19c2b52673b":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["0b11f32acac13cc087cc735808dfe19c2b52673b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}