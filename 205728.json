{"path":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"c9a61250c5cc14f652925f9198023e4bb80bb38c","date":1327258210,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"048b765a037e2876b7135b192df407f43dc222fc","date":1328267485,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TypeTokenFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    String stopTypesFiles = args.get(\"types\");\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\", false);\n    useWhitelist = getBoolean(\"useWhitelist\", false);\n    if (stopTypesFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(stopTypesFiles);\n        if (files.size() > 0) {\n          stopTypes = new HashSet<String>();\n          for (String file : files) {\n            List<String> typesLines = loader.getLines(file.trim());\n            stopTypes.addAll(typesLines);\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading types\", e);\n      }\n    } else {\n      throw new InitializationException(\"Missing required parameter: types.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9a61250c5cc14f652925f9198023e4bb80bb38c"],"aba371508186796cc6151d8223a5b4e16d02e26e":["39d25aba1848c644c6d22b943d3d66f661445ac7","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c9a61250c5cc14f652925f9198023e4bb80bb38c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["39d25aba1848c644c6d22b943d3d66f661445ac7","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9a61250c5cc14f652925f9198023e4bb80bb38c"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["048b765a037e2876b7135b192df407f43dc222fc"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["39d25aba1848c644c6d22b943d3d66f661445ac7","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"048b765a037e2876b7135b192df407f43dc222fc":["c9a61250c5cc14f652925f9198023e4bb80bb38c"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c9a61250c5cc14f652925f9198023e4bb80bb38c":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","048b765a037e2876b7135b192df407f43dc222fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","c9a61250c5cc14f652925f9198023e4bb80bb38c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"048b765a037e2876b7135b192df407f43dc222fc":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}