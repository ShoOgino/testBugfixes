{"path":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a","date":1293241159,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["0883328ff2cc09b5c999d05c04e16530d819c627","2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a":["0883328ff2cc09b5c999d05c04e16530d819c627"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["70ad682703b8585f5d0a637efec044d57ec05efb","2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1da8d55113b689b06716246649de6f62430f15c0":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}