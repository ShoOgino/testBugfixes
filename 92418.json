{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","commits":[{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","14975dba6846360ff627c6797726fa4899a3413d"],"14975dba6846360ff627c6797726fa4899a3413d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"14975dba6846360ff627c6797726fa4899a3413d":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["14975dba6846360ff627c6797726fa4899a3413d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}