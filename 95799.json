{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","commits":[{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the number of deletes that a merge would claim on the given segment. This method will by default return\n   * the sum of the del count on disk and the pending delete count. Yet, subclasses that wrap merge readers\n   * might modify this to reflect deletes that are carried over to the target segment in the case of soft deletes.\n   *\n   * Soft deletes all deletes to survive across merges in order to control when the soft-deleted data is claimed.\n   * @see IndexWriter#softUpdateDocument(Term, Iterable, Field...)\n   * @see IndexWriterConfig#setSoftDeletesField(String)\n   * @param info the segment info that identifies the segment\n   * @param pendingDeleteCount the number of pending deletes for this segment\n   * @param readerSupplier a supplier that allows to obtain a {@link CodecReader} for this segment\n   */\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount,\n                               IOSupplier<CodecReader> readerSupplier) throws IOException {\n    return info.getDelCount() + pendingDeleteCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the number of deletes that a merge would claim on the given segment. This method will by default return\n   * the sum of the del count on disk and the pending delete count. Yet, subclasses that wrap merge readers\n   * might modify this to reflect deletes that are carried over to the target segment in the case of soft deletes.\n   *\n   * Soft deletes all deletes to survive across merges in order to control when the soft-deleted data is claimed.\n   * @see IndexWriter#softUpdateDocument(Term, Iterable, Field...)\n   * @see IndexWriterConfig#setSoftDeletesField(String)\n   * @param info the segment info that identifies the segment\n   * @param pendingDeleteCount the number of pending deletes for this segment\n   * @param readerSupplier a supplier that allows to obtain a {@link CodecReader} for this segment\n   */\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount,\n                               IOSupplier<CodecReader> readerSupplier) throws IOException {\n    return info.getDelCount() + pendingDeleteCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef2a94da918b657d107b616a643e1759db43b6a","date":1527706131,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  /**\n   * Returns the number of deletes that a merge would claim on the given segment. This method will by default return\n   * the sum of the del count on disk and the pending delete count. Yet, subclasses that wrap merge readers\n   * might modify this to reflect deletes that are carried over to the target segment in the case of soft deletes.\n   *\n   * Soft deletes all deletes to survive across merges in order to control when the soft-deleted data is claimed.\n   * @see IndexWriter#softUpdateDocument(Term, Iterable, Field...)\n   * @see IndexWriterConfig#setSoftDeletesField(String)\n   * @param info the segment info that identifies the segment\n   * @param delCount the number deleted documents for this segment\n   * @param readerSupplier a supplier that allows to obtain a {@link CodecReader} for this segment\n   */\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount,\n                               IOSupplier<CodecReader> readerSupplier) throws IOException {\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of deletes that a merge would claim on the given segment. This method will by default return\n   * the sum of the del count on disk and the pending delete count. Yet, subclasses that wrap merge readers\n   * might modify this to reflect deletes that are carried over to the target segment in the case of soft deletes.\n   *\n   * Soft deletes all deletes to survive across merges in order to control when the soft-deleted data is claimed.\n   * @see IndexWriter#softUpdateDocument(Term, Iterable, Field...)\n   * @see IndexWriterConfig#setSoftDeletesField(String)\n   * @param info the segment info that identifies the segment\n   * @param pendingDeleteCount the number of pending deletes for this segment\n   * @param readerSupplier a supplier that allows to obtain a {@link CodecReader} for this segment\n   */\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount,\n                               IOSupplier<CodecReader> readerSupplier) throws IOException {\n    return info.getDelCount() + pendingDeleteCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"aef2a94da918b657d107b616a643e1759db43b6a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aef2a94da918b657d107b616a643e1759db43b6a"]},"commit2Childs":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["aef2a94da918b657d107b616a643e1759db43b6a"],"aef2a94da918b657d107b616a643e1759db43b6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}