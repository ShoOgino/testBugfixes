{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","commits":[{"id":"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","date":1474482359,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"/dev/null","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"/dev/null","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05569170a222447d3aec8fad773feedf4429fdd5","date":1476800012,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b437b84da5e49daf1197c9cd533015490cdcb2c2","date":1476818430,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"/dev/null","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11122ff28c20e6e4e02cb1366eaa029a92f69ce","date":1477307742,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderFailureAfterFreshStartTest#waitForNewLeader(CloudSolrClient,String,Replica,int).mjava","sourceNew":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  static void waitForNewLeader(CloudSolrClient cloudClient, String shardName, Replica oldLeader, int maxWaitInSecs)\n      throws Exception {\n    log.info(\"Will wait for a node to become leader for {} secs\", maxWaitInSecs);\n    boolean waitForLeader = true;\n    int i = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    \n    while(waitForLeader) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection coll = clusterState.getCollection(\"collection1\");\n      Slice slice = coll.getSlice(shardName);\n      if(slice.getLeader() != oldLeader && slice.getState() == State.ACTIVE) {\n        log.info(\"New leader got elected in {} secs\", i);\n        break;\n      }\n      \n      if(i == maxWaitInSecs) {\n        Diagnostics.logThreadDumps(\"Could not find new leader in specified timeout\");\n        zkStateReader.getZkClient().printLayoutToStdOut();\n        fail(\"Could not find new leader even after waiting for \" + maxWaitInSecs + \"secs\");\n      }\n      \n      i++;\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["05569170a222447d3aec8fad773feedf4429fdd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05569170a222447d3aec8fad773feedf4429fdd5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b437b84da5e49daf1197c9cd533015490cdcb2c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"]},"commit2Childs":{"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","fcc7eba0b32cbc7cc5b8fd388032bb833fa07786","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["05569170a222447d3aec8fad773feedf4429fdd5"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"fcc7eba0b32cbc7cc5b8fd388032bb833fa07786":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"05569170a222447d3aec8fad773feedf4429fdd5":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}