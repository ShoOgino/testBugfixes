{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doOpenIfChanged(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac7dd9818a7652666183eb1d4bfadc4317bba7df","date":1323510702,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doOpenIfChanged(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doOpenIfChanged(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":"  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones the subreaders.\n   * (see {@link IndexReader#clone()}).\n   * <br>\n   * <p>\n   * If subreaders are shared, then the reference count of those\n   * readers is increased to ensure that the subreaders remain open\n   * until the last referring reader is closed.\n   */\n  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#clone().mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized Object clone() {\n    try {\n      return doReopen(true);\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["8a8259c922a83abc544609227a60d48e5ee93e7e","ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["ac7dd9818a7652666183eb1d4bfadc4317bba7df","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}