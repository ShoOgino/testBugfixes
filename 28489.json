{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"/dev/null","sourceNew":"\tprivate Hits initSearch(String queryString) throws IOException, ParseException {\n\n\t\tsearcher = new IndexSearcher(indexName);\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tgetFieldInfo();\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tMultiFieldQueryParser parser = new  MultiFieldQueryParser(queryString, analyzer);\n\n\t\tint arraySize = fields.size();\n\t\tfieldsArray = new String[arraySize];\n\t\tfor (int ii = 0; ii < arraySize; ii++) {\n\t\t\tfieldsArray[ii] = (String) fields.get(ii);\n\t\t}\n\t\tquery = parser.parse(queryString, fieldsArray, analyzer);\n\t\tSystem.out.println(\"Searching for: \" + query.toString());\n\t\tHits hits = searcher.search(query);\n\t\treturn (hits);\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"\tprivate Hits initSearch(String queryString) throws IOException, ParseException {\n\n\t\tsearcher = new IndexSearcher(indexName);\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tgetFieldInfo();\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tMultiFieldQueryParser parser = new  MultiFieldQueryParser(queryString, analyzer);\n\n\t\tint arraySize = fields.size();\n\t\tfieldsArray = new String[arraySize];\n\t\tfor (int ii = 0; ii < arraySize; ii++) {\n\t\t\tfieldsArray[ii] = (String) fields.get(ii);\n\t\t}\n\t\tquery = parser.parse(queryString, fieldsArray, analyzer);\n\t\tSystem.out.println(\"Searching for: \" + query.toString());\n\t\tHits hits = searcher.search(query);\n\t\treturn (hits);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e4d3082b7847419c97c9936fc8429981c55bfc3","date":1106439327,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e4d3082b7847419c97c9936fc8429981c55bfc3":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["0e4d3082b7847419c97c9936fc8429981c55bfc3"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"0e4d3082b7847419c97c9936fc8429981c55bfc3":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["0e4d3082b7847419c97c9936fc8429981c55bfc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}