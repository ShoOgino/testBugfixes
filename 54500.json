{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"/dev/null","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"/dev/null","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"/dev/null","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState(true);\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState(true);\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState(true);\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateCloudState(true);\n      final CloudState state = stateReader.getCloudState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getCloudState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState();\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState(true);\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      stateReader.updateClusterState();\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollections();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException, TimeoutException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n     \n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        stateReader.waitForState(requiredCollection, 30000, TimeUnit.MILLISECONDS, (liveNodes, collectionState) ->  collectionState != null);\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n        Thread.sleep(50);\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException, TimeoutException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        stateReader.waitForState(requiredCollection, 30000, TimeUnit.MILLISECONDS, (liveNodes, collectionState) ->  collectionState != null);\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException, TimeoutException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n     \n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        stateReader.waitForState(requiredCollection, 30000, TimeUnit.MILLISECONDS, (liveNodes, collectionState) ->  collectionState != null);\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#waitForCollections(ZkStateReader,String...).mjava","sourceNew":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException, TimeoutException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        stateReader.waitForState(requiredCollection, 30000, TimeUnit.MILLISECONDS, (liveNodes, collectionState) ->  collectionState != null);\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n\n      }\n    }\n    log.warn(\"Timeout waiting for collections: {} state: {}\"\n        , Arrays.asList(collections), stateReader.getClusterState());\n  }\n\n","sourceOld":"  //wait until collections are available\n  private void waitForCollections(ZkStateReader stateReader, String... collections) throws InterruptedException, KeeperException, TimeoutException {\n    int maxIterations = 100;\n    while (0 < maxIterations--) {\n\n      final ClusterState state = stateReader.getClusterState();\n      Set<String> availableCollections = state.getCollectionsMap().keySet();\n      int availableCount = 0;\n      for(String requiredCollection: collections) {\n        stateReader.waitForState(requiredCollection, 30000, TimeUnit.MILLISECONDS, (liveNodes, collectionState) ->  collectionState != null);\n        if(availableCollections.contains(requiredCollection)) {\n          availableCount++;\n        }\n        if(availableCount == collections.length) return;\n\n      }\n    }\n    log.warn(\"Timeout waiting for collections: \" + Arrays.asList(collections) + \" state:\" + stateReader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"73450c0955930295d34703e7ddbfc6973b7a121a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["102da6baafc0f534a59f31729343dbab9d3b9e9a","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}