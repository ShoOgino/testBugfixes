{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","date":1491468518,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"114b665752b215f36836a7c5411f7c433b4d1352","date":1497007372,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    final String ulogDir = replica.getStr(\"ulogDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), ulogDir, targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    final String ulogDir = replica.getStr(\"ulogDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), ulogDir, targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.info(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    final String ulogDir = replica.getStr(\"ulogDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), ulogDir, targetNode, async, coll, replica, slice);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    final String ulogDir = replica.getStr(\"ulogDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), ulogDir, targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    final String ulogDir = replica.getStr(\"ulogDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), ulogDir, targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","date":1500089733,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"sourceNode is a required param\" );\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"sourceNode is a required param\" );\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      ocmh.checkRequired(message, SHARD_ID_PROP, \"fromNode\");\n      String fromNode = message.getStr(\"fromNode\");\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(fromNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + fromNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"sourceNode is a required param\" );\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"sourceNode is a required param\" );\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      // this picks up a single random replica from the sourceNode\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove=\" + inPlaceMove + \", isSharedFS=\" + isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, \"targetNode\");\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(\"targetNode\");\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"sourceNode is a required param\" );\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" do not have any replica belong to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved {}\", replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    if (dataDir != null && dataDir.toString().startsWith(\"hdfs:/\")) {\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","bugFix":["ecb39e783dd104116a9502e8b0ab3df89f35ac19","541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, OverseerCollectionMessageHandler.RANDOM);\n      // this picks up a single random replica from the sourceNode\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove=\" + inPlaceMove + \", isSharedFS=\" + isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      // this picks up a single random replica from the sourceNode\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove=\" + inPlaceMove + \", isSharedFS=\" + isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String collection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = clusterState.getCollection(collection).getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas());\n      Collections.shuffle(sliceReplicas, RANDOM);\n      // this picks up a single random replica from the sourceNode\n      for (Replica r : slice.getReplicas()) {\n        if (r.getNodeName().equals(sourceNode)) {\n          replica = r;\n        }\n      }\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove=\" + inPlaceMove + \", isSharedFS=\" + isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2bcfee499548996a6e5448bbf93b8f276d010270":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"114b665752b215f36836a7c5411f7c433b4d1352":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["114b665752b215f36836a7c5411f7c433b4d1352","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["2bcfee499548996a6e5448bbf93b8f276d010270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["114b665752b215f36836a7c5411f7c433b4d1352"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bcfee499548996a6e5448bbf93b8f276d010270":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"114b665752b215f36836a7c5411f7c433b4d1352":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["2bcfee499548996a6e5448bbf93b8f276d010270","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","f9a989a32a073c55e3aef6f807a3474184bbcf49","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}