{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.out.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.out.println(\"client\" + cnt++);\n      if (verbose) System.out.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.out.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.out.println(\" live:\" + live);\n      \n      if (verbose) System.out.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent, expected:\" + lastNum\n              + \" and got:\" + num;\n        }\n        lastNum = num;\n      }\n    }\n    \n    return failMessage;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.out.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.out.println(\"client\" + cnt++);\n      if (verbose) System.out.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.out.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.out.println(\" live:\" + live);\n      \n      if (verbose) System.out.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent, expected:\" + lastNum\n              + \" and got:\" + num;\n        }\n        lastNum = num;\n      }\n    }\n    \n    return failMessage;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.out.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.out.println(\"client\" + cnt++);\n      if (verbose) System.out.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.out.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.out.println(\" live:\" + live);\n      \n      if (verbose) System.out.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent, expected:\" + lastNum\n              + \" and got:\" + num;\n        }\n        lastNum = num;\n      }\n    }\n    \n    return failMessage;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f787671ca16d65e86976f99bd603595f757a91","date":1330045652,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.out.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.out.println(\"client\" + cnt++);\n      if (verbose) System.out.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.out.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.out.println(\" live:\" + live);\n      \n      if (verbose) System.out.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent, expected:\" + lastNum\n              + \" and got:\" + num;\n        }\n        lastNum = num;\n      }\n    }\n    \n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.out.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.out.println(\"client\" + cnt++);\n      if (verbose) System.out.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.out.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.out.println(\" live:\" + live);\n      \n      if (verbose) System.out.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent, expected:\" + lastNum\n              + \" and got:\" + num;\n        }\n        lastNum = num;\n      }\n    }\n    \n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9411f5e8a82e9ad442310774346d645c9e336f54","date":1342705922,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<SolrServer> solrClients = shardToClient.get(shard);\n    if (solrClients == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToClient.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrClients.size());\n\n    SolrServer lastClient = null;\n    for (SolrServer client : solrClients) {\n      ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = client.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + client;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = client.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), client.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = client;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":null,"sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getCloudState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getCloudState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","94f787671ca16d65e86976f99bd603595f757a91"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["9411f5e8a82e9ad442310774346d645c9e336f54","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"94f787671ca16d65e86976f99bd603595f757a91":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["94f787671ca16d65e86976f99bd603595f757a91","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["9411f5e8a82e9ad442310774346d645c9e336f54"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["94f787671ca16d65e86976f99bd603595f757a91","9411f5e8a82e9ad442310774346d645c9e336f54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9411f5e8a82e9ad442310774346d645c9e336f54":["94f787671ca16d65e86976f99bd603595f757a91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"94f787671ca16d65e86976f99bd603595f757a91":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","9411f5e8a82e9ad442310774346d645c9e336f54"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","94f787671ca16d65e86976f99bd603595f757a91","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"9411f5e8a82e9ad442310774346d645c9e336f54":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","217c5e3cedf564c6d370670858e1b1edab16fcac","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}