{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(Polygon2D,Line).mjava","sourceNew":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(Polygon2D queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","sourceNew":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = quantizeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n      double ax, ay, bx, by, temp;\n      Relation r;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ay = quantizeLat(line.getLat(i));\n        ax = quantizeLon(line.getLon(i));\n        by = quantizeLat(line.getLat(j));\n        bx = quantizeLon(line.getLon(j));\n        if (ay > by) {\n          temp = ay;\n          ay = by;\n          by = temp;\n          temp = ax;\n          ax = bx;\n          bx = temp;\n        } else if (ay == by) {\n          if (ax > bx) {\n            temp = ay;\n            ay = by;\n            by = temp;\n            temp = ax;\n            ax = bx;\n            bx = temp;\n          }\n        }\n        r = queryPoly.relateTriangle(ax, ay, bx, by, ax, ay);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","sourceNew":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = quantizeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","sourceNew":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D component2D, Object shape) {\n      Line line = (Line) shape;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        Relation r = component2D.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testLine(EdgeTree,Line).mjava","sourceNew":null,"sourceOld":"    private boolean testLine(EdgeTree queryPoly, Line line) {\n\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        double[] qTriangle = encoder.quantizeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        Relation r = queryPoly.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["5ed90f8ba7e7be13d155f954862178b23a324125"],"2aeefba8262036d422d639e48c49d51316bea138":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["2aeefba8262036d422d639e48c49d51316bea138"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["5ed90f8ba7e7be13d155f954862178b23a324125","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"2aeefba8262036d422d639e48c49d51316bea138":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"e4fccad460342b1af30cb328cc8297751a218d78":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}