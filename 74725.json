{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<String>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","date":1469760343,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    // NOTE: we're abusing the \"results\" float[] here ...\n    // - even elements are ids which must be valid 'ints'\n    // - odd elements are the expected score values\n    \n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    for (int i=0; i<results.length; i+=2) {\n      final int id = (int) results[i];\n      assert ((float) id) == results[i];\n        \n      String xpath = \"//doc[./str[@name='id']='\" + id + \"' \" \n        + \" and ./float[@name='score']='\" + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    // NOTE: we're abusing the \"results\" float[] here ...\n    // - even elements are ids which must be valid 'ints'\n    // - odd elements are the expected score values\n    \n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    for (int i=0; i<results.length; i+=2) {\n      final int id = (int) results[i];\n      assert ((float) id) == results[i];\n        \n      String xpath = \"//doc[./str[@name='id']='\" + id + \"' \" \n        + \" and ./float[@name='score']='\" + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,List[String],float...).mjava","sourceNew":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    // NOTE: we're abusing the \"results\" float[] here ...\n    // - even elements are ids which must be valid 'ints'\n    // - odd elements are the expected score values\n    \n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    for (int i=0; i<results.length; i+=2) {\n      final int id = (int) results[i];\n      assert ((float) id) == results[i];\n        \n      String xpath = \"//doc[./str[@name='id']='\" + id + \"' \" \n        + \" and ./float[@name='score']='\" + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","sourceOld":"  protected void singleTest(String field, String funcTemplate, List<String> args, float... results) {\n    String parseableQuery = func(field, funcTemplate);\n\n    List<String> nargs = new ArrayList<>(Arrays.asList(\"q\", parseableQuery\n            ,\"fl\", \"*,score\"\n            ,\"indent\",\"on\"\n            ,\"rows\",\"100\"));\n\n    if (args != null) {\n      for (String arg : args) {\n        nargs.add(arg.replace(\"\\0\",field));\n      }\n    }\n\n    List<String> tests = new ArrayList<>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(nargs.toArray(new String[]{}))\n            , tests.toArray(new String[]{})\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f":["2106271e380c198349e0f6eac0395bb462913fab"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"28288370235ed02234a64753cdbf0c6ec096304a":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2106271e380c198349e0f6eac0395bb462913fab","cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","a71f63026529f3c1f03cfdd664910873ab2369ae"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["2106271e380c198349e0f6eac0395bb462913fab","cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2106271e380c198349e0f6eac0395bb462913fab"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["cc8534b0535c70bcda9dc5dd4d64d1f1e13bae7f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}