{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9908980d2f64869ccee264664b10836e2361bad2","date":1393106159,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (URISyntaxException use) {\n        // ignore + fall-through\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    try {\n      File file = new File(name);\n      if (!file.exists()) {\n        file = new File(Thread.currentThread().getContextClassLoader().getResource(name).toURI());\n      }\n      return file;\n    } catch (Exception e) {\n      /* more friendly than NPE */\n      throw new RuntimeException(\"Cannot find resource: \" + new File(name).getAbsolutePath());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579fe47a8598200b751449885b056cd5630fb864","date":1393108459,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (URISyntaxException use) {\n        // ignore + fall-through\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = SolrTestCaseJ4.class.getClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = SolrTestCaseJ4.class.getClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getFile(String).mjava","sourceNew":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = SolrTestCaseJ4.class.getClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","sourceOld":"  /** Gets a resource from the context classloader as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  public static File getFile(String name) {\n    final URL url = Thread.currentThread().getContextClassLoader().getResource(name.replace(File.separatorChar, '/'));\n    if (url != null) {\n      try {\n        return new File(url.toURI());\n      } catch (Exception e) {\n        throw new RuntimeException(\"Resource was found on classpath, but cannot be resolved to a \" + \n            \"normal file (maybe it is part of a JAR file): \" + name);\n      }\n    }\n    final File file = new File(name);\n    if (file.exists()) {\n      return file;\n    }\n    throw new RuntimeException(\"Cannot find resource in classpath or in file-system (relative to CWD): \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2c30e4c1cee08b3b229a77991882594fe7250b66","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["579fe47a8598200b751449885b056cd5630fb864","5a2748831fb25b0e9d5a4c315047bf877c887460"],"28288370235ed02234a64753cdbf0c6ec096304a":["579fe47a8598200b751449885b056cd5630fb864","5a2748831fb25b0e9d5a4c315047bf877c887460"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579fe47a8598200b751449885b056cd5630fb864":["9908980d2f64869ccee264664b10836e2361bad2"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["579fe47a8598200b751449885b056cd5630fb864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9908980d2f64869ccee264664b10836e2361bad2":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9908980d2f64869ccee264664b10836e2361bad2"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"579fe47a8598200b751449885b056cd5630fb864":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","5a2748831fb25b0e9d5a4c315047bf877c887460"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9908980d2f64869ccee264664b10836e2361bad2":["579fe47a8598200b751449885b056cd5630fb864"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}