{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da94fd5fcff99442877e118f00fb42094b59f497"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}