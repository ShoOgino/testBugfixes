{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n        (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n        (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n      (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c418b5fb43bf7b591b636df532dd1ac44296469a","date":1494834249,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.parseOP(params.get(QueryParsing.OP));\n    \n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n        (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.parseOP(params.get(QueryParsing.OP));\n    \n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n        (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#parseMinShouldMatch(IndexSchema,SolrParams).mjava","sourceNew":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.parseOP(params.get(QueryParsing.OP));\n    \n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","sourceOld":"  /**\n   * Applies the appropriate default rules for the \"mm\" param based on the \n   * effective value of the \"q.op\" param\n   *\n   * @see QueryParsing#getQueryParserDefaultOperator\n   * @see QueryParsing#OP\n   * @see DisMaxParams#MM\n   */\n  public static String parseMinShouldMatch(final IndexSchema schema, \n                                           final SolrParams params) {\n    org.apache.solr.parser.QueryParser.Operator op = QueryParsing.getQueryParserDefaultOperator\n        (schema, params.get(QueryParsing.OP));\n    return params.get(DisMaxParams.MM, \n                      op.equals(QueryParser.Operator.AND) ? \"100%\" : \"0%\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["3cdb67100dc016748799a77218aa409478372d79"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3cdb67100dc016748799a77218aa409478372d79","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"3cdb67100dc016748799a77218aa409478372d79":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["3cdb67100dc016748799a77218aa409478372d79","c418b5fb43bf7b591b636df532dd1ac44296469a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"]},"commit2Childs":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"3cdb67100dc016748799a77218aa409478372d79":["c418b5fb43bf7b591b636df532dd1ac44296469a","e9017cf144952056066919f1ebc7897ff9bd71b1","407687e67faf6e1f02a211ca078d8e3eed631027","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}