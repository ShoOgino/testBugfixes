{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","commits":[{"id":"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","date":1340946597,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64ffac52d9812c94cca5f3a3a980f074839c732f","date":1404849022,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","bugFix":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/query/SpatialArgsParserTest#testArgsParser().mjava","sourceNew":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParser() throws Exception {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(Envelope(-10, 10, 20, -20))\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (Envelope(-10,-20,20,10))\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    // spatial operations need args\n    expectThrows(Exception.class, () -> {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n    });\n\n    // unknown operation\n    expectThrows(Exception.class, () -> {\n      parser.parse(\"XXXX(Envelope(-10, 10, 20, -20))\", ctx);\n    });\n\n    assertAlias(SpatialOperation.IsWithin, \"CoveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"COVEREDBY\");\n    assertAlias(SpatialOperation.IsWithin, \"coveredBy\");\n    assertAlias(SpatialOperation.IsWithin, \"Within\");\n    assertAlias(SpatialOperation.IsEqualTo, \"Equals\");\n    assertAlias(SpatialOperation.IsDisjointTo, \"disjoint\");\n    assertAlias(SpatialOperation.Contains, \"Covers\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["05fe562aa248790944d43cdd478f512572835ba0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["64ffac52d9812c94cca5f3a3a980f074839c732f"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["05fe562aa248790944d43cdd478f512572835ba0"],"64ffac52d9812c94cca5f3a3a980f074839c732f":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd":["fe33227f6805edab2036cbb80645cc4e2d1fa424","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac9aaaaea7349fec4faf6eb1ad64d0f7ccd1f1fd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["64ffac52d9812c94cca5f3a3a980f074839c732f"],"05fe562aa248790944d43cdd478f512572835ba0":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"64ffac52d9812c94cca5f3a3a980f074839c732f":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}