{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) throws IOException {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkEqual(Query,ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkEqual(Query query, ScoreDoc[] hits1, ScoreDoc[] hits2) {\n     final float scoreTolerance = 1.0e-6f;\n     if (hits1.length != hits2.length) {\n       Assert.fail(\"Unequal lengths: hits1=\"+hits1.length+\",hits2=\"+hits2.length);\n     }\n    for (int i = 0; i < hits1.length; i++) {\n      if (hits1[i].doc != hits2[i].doc) {\n        Assert.fail(\"Hit \" + i + \" docnumbers don't match\\n\"\n                + hits2str(hits1, hits2,0,0)\n                + \"for query:\" + query.toString());\n      }\n\n      if ((hits1[i].doc != hits2[i].doc)\n          || Math.abs(hits1[i].score -  hits2[i].score) > scoreTolerance)\n      {\n        Assert.fail(\"Hit \" + i + \", doc nrs \" + hits1[i].doc + \" and \" + hits2[i].doc\n                      + \"\\nunequal       : \" + hits1[i].score\n                      + \"\\n           and: \" + hits2[i].score\n                      + \"\\nfor query:\" + query.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}