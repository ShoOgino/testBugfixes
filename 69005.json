{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParser.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}