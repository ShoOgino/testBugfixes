{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","commits":[{"id":"ad1168477e46f783205c6fb94c21c32307926814","date":1358297289,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"/dev/null","sourceNew":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (_theCores) {\n              _theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n\n      for (int idx = 0; idx < _theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", _theCores.get(idx), _theCores.get(idx + 1));\n      }\n\n      for (SolrCore core : _theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af069582c4ee2298b4329a210e75df262eb22b0e","date":1358312452,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","sourceNew":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> _theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (_theCores) {\n              _theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n\n      for (int idx = 0; idx < _theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", _theCores.get(idx), _theCores.get(idx + 1));\n      }\n\n      for (SolrCore core : _theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (_theCores) {\n              _theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n\n      for (int idx = 0; idx < _theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", _theCores.get(idx), _theCores.get(idx + 1));\n      }\n\n      for (SolrCore core : _theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"/dev/null","sourceNew":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> _theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (_theCores) {\n              _theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n\n      for (int idx = 0; idx < _theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", _theCores.get(idx), _theCores.get(idx + 1));\n      }\n\n      for (SolrCore core : _theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","sourceNew":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> _theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (_theCores) {\n              _theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n\n      for (int idx = 0; idx < _theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", _theCores.get(idx), _theCores.get(idx + 1));\n      }\n\n      for (SolrCore core : _theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","sourceNew":"  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test case for SOLR-4300\n  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["ad1168477e46f783205c6fb94c21c32307926814"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","sourceNew":"  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<SolrCore>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testRace().mjava","sourceNew":"  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collection3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRace() throws Exception {\n    final List<SolrCore> theCores = new ArrayList<>();\n    final CoreContainer cc = init();\n    try {\n\n      Thread[] threads = new Thread[15];\n      for (int idx = 0; idx < threads.length; idx++) {\n        threads[idx] = new Thread() {\n          @Override\n          public void run() {\n            SolrCore core = cc.getCore(\"collectionLazy3\");\n            synchronized (theCores) {\n              theCores.add(core);\n            }\n          }\n        };\n        threads[idx].start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      for (int idx = 0; idx < theCores.size() - 1; ++idx) {\n        assertEquals(\"Cores should be the same!\", theCores.get(idx), theCores.get(idx + 1));\n      }\n      for (SolrCore core : theCores) {\n        core.close();\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a837c064b67fa63a9394136e31218b908cdcf783"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af069582c4ee2298b4329a210e75df262eb22b0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad1168477e46f783205c6fb94c21c32307926814":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["af069582c4ee2298b4329a210e75df262eb22b0e"],"af069582c4ee2298b4329a210e75df262eb22b0e":["ad1168477e46f783205c6fb94c21c32307926814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","ad1168477e46f783205c6fb94c21c32307926814"],"ad1168477e46f783205c6fb94c21c32307926814":["af069582c4ee2298b4329a210e75df262eb22b0e"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"af069582c4ee2298b4329a210e75df262eb22b0e":["c4015cd39dff8d4dec562d909f9766debac53aa6","a837c064b67fa63a9394136e31218b908cdcf783"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}