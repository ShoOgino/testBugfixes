{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#CachingCollector(Collector,boolean,double).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#CachingCollector(Collector,boolean,double).mjava","pathOld":"/dev/null","sourceNew":"  public CachingCollector(Collector other, boolean cacheScores, double maxRAMMB) {\n    this.other = other;\n    if (cacheScores) {\n      cachedScorer = new Scorer(null) {\n          @Override\n          public float score() {\n            return score;\n          }\n\n          @Override\n          public int advance(int target) {\n            throw new UnsupportedOperationException();\n          }\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public float freq() {\n            throw new UnsupportedOperationException();\n          }\n\n          @Override\n          public int nextDoc() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      cachedScores = new ArrayList<float[]>();\n      curScores = new float[128];\n      cachedScores.add(curScores);\n    } else {\n      cachedScorer = null;\n      cachedScores = null;\n    }\n    cachedDocs = new ArrayList<int[]>();\n    curDocs = new int[128];\n    cachedDocs.add(curDocs);\n\n    final int bytesPerDoc;\n    if (curScores != null) {\n      bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT + RamUsageEstimator.NUM_BYTES_FLOAT;\n    } else {\n      bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    }\n    maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024)/bytesPerDoc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e77feb4ffb7321af961c838aeafdd07ef1f307d4","date":1305577750,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#CachingCollector(Collector,boolean,double).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#CachingCollector(Collector,boolean,double).mjava","sourceNew":"  public CachingCollector(Collector other, boolean cacheScores, double maxRAMMB) {\n    this.other = other;\n    this.cacheScores = cacheScores;\n    if (cacheScores) {\n      cachedScorer = new CachedScorer();\n      cachedScores = new ArrayList<float[]>();\n      curScores = new float[128];\n      cachedScores.add(curScores);\n    } else {\n      cachedScorer = null;\n      cachedScores = null;\n    }\n    cachedDocs = new ArrayList<int[]>();\n    curDocs = new int[INITIAL_ARRAY_SIZE];\n    cachedDocs.add(curDocs);\n\n    int bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    if (cacheScores) {\n      bytesPerDoc += RamUsageEstimator.NUM_BYTES_FLOAT;\n    }\n    maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024) / bytesPerDoc);\n  }\n\n","sourceOld":"  public CachingCollector(Collector other, boolean cacheScores, double maxRAMMB) {\n    this.other = other;\n    if (cacheScores) {\n      cachedScorer = new Scorer(null) {\n          @Override\n          public float score() {\n            return score;\n          }\n\n          @Override\n          public int advance(int target) {\n            throw new UnsupportedOperationException();\n          }\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public float freq() {\n            throw new UnsupportedOperationException();\n          }\n\n          @Override\n          public int nextDoc() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      cachedScores = new ArrayList<float[]>();\n      curScores = new float[128];\n      cachedScores.add(curScores);\n    } else {\n      cachedScorer = null;\n      cachedScores = null;\n    }\n    cachedDocs = new ArrayList<int[]>();\n    curDocs = new int[128];\n    cachedDocs.add(curDocs);\n\n    final int bytesPerDoc;\n    if (curScores != null) {\n      bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT + RamUsageEstimator.NUM_BYTES_FLOAT;\n    } else {\n      bytesPerDoc = RamUsageEstimator.NUM_BYTES_INT;\n    }\n    maxDocsToCache = (int) ((maxRAMMB * 1024 * 1024)/bytesPerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"]},"commit2Childs":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}