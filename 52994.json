{"path":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations are considerably more efficient than that.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c94e54141ef9104150bacf811d8281a933e158b0","date":1239886932,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","sourceNew":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations *could* be considerably more efficient than a linear scan.\n   * Check the implementation to be sure.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","sourceOld":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations are considerably more efficient than that.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9de44d6e82993dc64175613dd617a5baf60e0958","date":1244724401,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","sourceNew":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations *could* be considerably more efficient than a linear scan.\n   * Check the implementation to be sure.\n   * @deprecated This method is not performant and will be removed in Lucene 3.0.\n   * Use {@link IndexReader#terms(Term)} to create a new TermEnum positioned at a\n   * given term.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","sourceOld":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations *could* be considerably more efficient than a linear scan.\n   * Check the implementation to be sure.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermEnum#skipTo(Term).mjava","sourceNew":null,"sourceOld":"  /** Skips terms to the first beyond the current whose value is\n   * greater or equal to <i>target</i>. <p>Returns true iff there is such\n   * an entry.  <p>Behaves as if written: <pre>\n   *   public boolean skipTo(Term target) {\n   *     do {\n   *       if (!next())\n   * \t     return false;\n   *     } while (target > term());\n   *     return true;\n   *   }\n   * </pre>\n   * Some implementations *could* be considerably more efficient than a linear scan.\n   * Check the implementation to be sure.\n   * @deprecated This method is not performant and will be removed in Lucene 3.0.\n   * Use {@link IndexReader#terms(Term)} to create a new TermEnum positioned at a\n   * given term.\n   */\n  public boolean skipTo(Term target) throws IOException {\n     do {\n        if (!next())\n  \t        return false;\n     } while (target.compareTo(term()) > 0);\n     return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c94e54141ef9104150bacf811d8281a933e158b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9de44d6e82993dc64175613dd617a5baf60e0958":["c94e54141ef9104150bacf811d8281a933e158b0"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["9de44d6e82993dc64175613dd617a5baf60e0958"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["c94e54141ef9104150bacf811d8281a933e158b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"c94e54141ef9104150bacf811d8281a933e158b0":["9de44d6e82993dc64175613dd617a5baf60e0958"],"9de44d6e82993dc64175613dd617a5baf60e0958":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}