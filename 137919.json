{"path":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","commits":[{"id":"de01496176b31b9496ca92b2faebc31e16d91cc0","date":1237569222,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b58eb194a3df065f3d27136662e4ff0faefb6852","date":1237583412,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()), Field.Store.YES);\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed), Field.Store.YES);\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools()\n    throws Exception\n  {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","pathOld":"src/test/org/apache/lucene/document/TestBinaryDocument#testCompressionTools().mjava","sourceNew":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCompressionTools() throws Exception {\n    Fieldable binaryFldCompressed = new Field(\"binaryCompressed\", CompressionTools.compress(binaryValCompressed.getBytes()));\n    Fieldable stringFldCompressed = new Field(\"stringCompressed\", CompressionTools.compressString(binaryValCompressed));\n    \n    Document doc = new Document();\n    \n    doc.add(binaryFldCompressed);\n    doc.add(stringFldCompressed);\n    \n    /** add the doc to a ram index */\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n    \n    /** open a reader and fetch the document */ \n    IndexReader reader = IndexReader.open(dir, false);\n    Document docFromReader = reader.document(0);\n    assertTrue(docFromReader != null);\n    \n    /** fetch the binary compressed field and compare it's content with the original one */\n    String binaryFldCompressedTest = new String(CompressionTools.decompress(docFromReader.getBinaryValue(\"binaryCompressed\")));\n    assertTrue(binaryFldCompressedTest.equals(binaryValCompressed));\n    assertTrue(CompressionTools.decompressString(docFromReader.getBinaryValue(\"stringCompressed\")).equals(binaryValCompressed));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b58eb194a3df065f3d27136662e4ff0faefb6852","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b58eb194a3df065f3d27136662e4ff0faefb6852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b58eb194a3df065f3d27136662e4ff0faefb6852":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["b58eb194a3df065f3d27136662e4ff0faefb6852"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b58eb194a3df065f3d27136662e4ff0faefb6852":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}