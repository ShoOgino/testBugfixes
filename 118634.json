{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams\n    List<CategoryListParams> clps = fsp.indexingParams.getAllCategoryListParams();\n    if (clps.size() != 1) {\n      return \"this Collector supports only one CategoryListParams\";\n    }\n    \n    // verify DGapVInt decoder\n    CategoryListParams clp = clps.get(0);\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams\n    List<CategoryListParams> clps = fsp.indexingParams.getAllCategoryListParams();\n    if (clps.size() != 1) {\n      return \"this Collector supports only one CategoryListParams\";\n    }\n    \n    // verify DGapVInt decoder\n    CategoryListParams clp = clps.get(0);\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","date":1359020450,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams for all FacetRequests\n    CategoryListParams clp = null;\n    for (FacetRequest fr : fsp.facetRequests) {\n      CategoryListParams cpclp = fsp.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (clp == null) {\n        clp = cpclp;\n      } else if (clp != cpclp) {\n        return \"all FacetRequests must belong to the same CategoryListParams\";\n      }\n    }\n    if (clp == null) {\n      return \"at least one FacetRequest must be defined\";\n    }\n    \n    // verify DGapVInt decoder\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams\n    List<CategoryListParams> clps = fsp.indexingParams.getAllCategoryListParams();\n    if (clps.size() != 1) {\n      return \"this Collector supports only one CategoryListParams\";\n    }\n    \n    // verify DGapVInt decoder\n    CategoryListParams clp = clps.get(0);\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams for all FacetRequests\n    CategoryListParams clp = null;\n    for (FacetRequest fr : fsp.facetRequests) {\n      CategoryListParams cpclp = fsp.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (clp == null) {\n        clp = cpclp;\n      } else if (clp != cpclp) {\n        return \"all FacetRequests must belong to the same CategoryListParams\";\n      }\n    }\n    if (clp == null) {\n      return \"at least one FacetRequest must be defined\";\n    }\n    \n    // verify DGapVInt decoder\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","sourceOld":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams\n    List<CategoryListParams> clps = fsp.indexingParams.getAllCategoryListParams();\n    if (clps.size() != 1) {\n      return \"this Collector supports only one CategoryListParams\";\n    }\n    \n    // verify DGapVInt decoder\n    CategoryListParams clp = clps.get(0);\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#assertParams(FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Asserts that this {@link FacetsCollector} can handle the given\n   * {@link FacetSearchParams}. Returns {@code null} if true, otherwise an error\n   * message.\n   */\n  static String assertParams(FacetSearchParams fsp) {\n    // verify that all facet requests are CountFacetRequest\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return \"all FacetRequests must be CountFacetRequest\";\n      }\n      if (fr.getDepth() != 1) {\n        return \"all requests must be of depth 1\";\n      }\n      if (fr.getNumLabel() < fr.getNumResults()) {\n        return \"this Collector always labels all requested results\";\n      }\n      if (fr.getSortOrder() != SortOrder.DESCENDING) {\n        return \"this Collector always sorts results in descending order\";\n      }\n      if (fr.getSortBy() != SortBy.VALUE) {\n        return \"this Collector always sorts by results' values\";\n      }\n    }\n    \n    // verify that there's only one CategoryListParams for all FacetRequests\n    CategoryListParams clp = null;\n    for (FacetRequest fr : fsp.facetRequests) {\n      CategoryListParams cpclp = fsp.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (clp == null) {\n        clp = cpclp;\n      } else if (clp != cpclp) {\n        return \"all FacetRequests must belong to the same CategoryListParams\";\n      }\n    }\n    if (clp == null) {\n      return \"at least one FacetRequest must be defined\";\n    }\n    \n    // verify DGapVInt decoder\n    if (clp.createEncoder().createMatchingDecoder().getClass() != DGapVInt8IntDecoder.class) {\n      return \"this Collector supports only DGap + VInt encoding\";\n    }\n    \n    // verify that partitions are disabled\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return \"this Collector does not support partitions\";\n    }\n    \n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","07155cdd910937cdf6877e48884d5782845c8b8b"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["571abba77e55fea386a38c0024f72ffa5b37a9ad","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}