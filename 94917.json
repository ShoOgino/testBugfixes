{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1497255a2ce11dc672a80859c79fabe7efa51d2e","date":1369725708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":6,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase#Lucene43CompoundWordTokenFilterBase(TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected Lucene43CompoundWordTokenFilterBase(TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"1497255a2ce11dc672a80859c79fabe7efa51d2e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"1497255a2ce11dc672a80859c79fabe7efa51d2e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}