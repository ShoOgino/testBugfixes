{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","commits":[{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["781578ca5d3d2194bc55fc3457c62aef623db6f2","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e12a337a9a98e388c3a5bca9c8256d21c13781f9","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["b94236357aaa22b76c10629851fe4e376e0cea82","e9017cf144952056066919f1ebc7897ff9bd71b1","6146c07c0dee1ae1e42926167acd127fed5ef59d","e12a337a9a98e388c3a5bca9c8256d21c13781f9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}