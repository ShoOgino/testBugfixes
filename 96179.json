{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","commits":[{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n    this.query = query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","date":1383406909,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldNames = new String[]{textFieldName};\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":["ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca","date":1385108956,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    train(atomicReader, new String[]{textFieldName}, classFieldName, analyzer, query);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldNames = new String[]{textFieldName};\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n    this.query = query;\n  }\n\n","bugFix":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    train(atomicReader, new String[]{textFieldName}, classFieldName, analyzer, query);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldNames = new String[]{textFieldName};\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    train(atomicReader, new String[]{textFieldName}, classFieldName, analyzer, query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca"],"ad37b818aab34fe3bfb45adc5b9910ddf4fec2ca":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}