{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","commits":[{"id":"7faee6ec986350688488b9513ac66bb38e260cd3","date":1493189582,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","sourceNew":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(String,SolrZkClient,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createMockZkController(SolrZkClient,ZkStateReader).mjava","sourceNew":"  private MockZkController createMockZkController(String zkAddress, SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkAddress, zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","sourceOld":"  private MockZkController createMockZkController(SolrZkClient zkClient, ZkStateReader reader) {\n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    when(mockAlwaysUpCoreContainer.getResourceLoader()).thenReturn(new SolrResourceLoader());\n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n    when(zkController.getZkClient()).thenReturn(zkClient);\n    when(zkController.getZkStateReader()).thenReturn(reader);\n    doReturn(getCloudDataProvider(zkClient,reader))\n        .when(zkController).getSolrCloudManager();\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7faee6ec986350688488b9513ac66bb38e260cd3"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7faee6ec986350688488b9513ac66bb38e260cd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7faee6ec986350688488b9513ac66bb38e260cd3","560c18d71dad43d675158783c3840f8c80d6d39c"],"7faee6ec986350688488b9513ac66bb38e260cd3":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}