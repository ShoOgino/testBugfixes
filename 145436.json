{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer#crashJRE().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer#crashJRE().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n\n  // poached from TestIndexWriterOnJRECrash ... should we factor out to TestUtil?  seems dangerous to give it such \"publicity\"?\n  private static void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n    try {\n      if (supportsUnsafeNpeDereference) {\n        try {\n          Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n          java.lang.reflect.Field field = clazz.getDeclaredField(\"theUnsafe\");\n          field.setAccessible(true);\n          Object o = field.get(null);\n          Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n          m.invoke(o, 0L, 0L);\n        } catch (Throwable e) {\n          System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n          e.printStackTrace(System.out); \n        }\n      }\n\n      // Fallback attempt to Runtime.halt();\n      Runtime.getRuntime().halt(-1);\n    } catch (Exception e) {\n      System.out.println(\"Couldn't kill the JVM.\");\n      e.printStackTrace(System.out); \n    }\n\n    // We couldn't get the JVM to crash for some reason.\n    throw new RuntimeException(\"JVM refuses to die!\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleServer#crashJRE().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * currently, this only works/tested on Sun and IBM.\n   */\n\n  // poached from TestIndexWriterOnJRECrash ... should we factor out to TestUtil?  seems dangerous to give it such \"publicity\"?\n  private static void crashJRE() {\n    final String vendor = Constants.JAVA_VENDOR;\n    final boolean supportsUnsafeNpeDereference = \n        vendor.startsWith(\"Oracle\") || \n        vendor.startsWith(\"Sun\") || \n        vendor.startsWith(\"Apple\");\n\n    try {\n      if (supportsUnsafeNpeDereference) {\n        try {\n          Class<?> clazz = Class.forName(\"sun.misc.Unsafe\");\n          java.lang.reflect.Field field = clazz.getDeclaredField(\"theUnsafe\");\n          field.setAccessible(true);\n          Object o = field.get(null);\n          Method m = clazz.getMethod(\"putAddress\", long.class, long.class);\n          m.invoke(o, 0L, 0L);\n        } catch (Throwable e) {\n          System.out.println(\"Couldn't kill the JVM via Unsafe.\");\n          e.printStackTrace(System.out); \n        }\n      }\n\n      // Fallback attempt to Runtime.halt();\n      Runtime.getRuntime().halt(-1);\n    } catch (Exception e) {\n      System.out.println(\"Couldn't kill the JVM.\");\n      e.printStackTrace(System.out); \n    }\n\n    // We couldn't get the JVM to crash for some reason.\n    throw new RuntimeException(\"JVM refuses to die!\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}