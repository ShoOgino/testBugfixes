{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicIndexReader,Entry,Object).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicIndexReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(IndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicIndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(IndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicIndexReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicIndexReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}