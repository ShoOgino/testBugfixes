{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\r\n   */\r\n  //@Override\r\n  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {\r\n    // calculate the upper and lower bounds respecting the inclusive and null values.\r\n    long minBound=(this.min==null) ? Long.MIN_VALUE : (\r\n      minInclusive ? this.min.longValue() : (this.min.longValue()+1L)\r\n    );\r\n    long maxBound=(this.max==null) ? Long.MAX_VALUE : (\r\n      maxInclusive ? this.max.longValue() : (this.max.longValue()-1L)\r\n    );\r\n    \r\n    resetLastNumberOfTerms();\r\n    if (minBound > maxBound) {\r\n      // shortcut, no docs will match this\r\n      return DocIdSet.EMPTY_DOCIDSET;\r\n    } else {\r\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\r\n      final TermDocs termDocs = reader.termDocs();\r\n      try {\r\n        TrieUtils.splitLongRange(new TrieUtils.LongRangeBuilder() {\r\n        \r\n          //@Override\r\n          public final void addRange(String minPrefixCoded, String maxPrefixCoded, int level) {\r\n            try {\r\n              fillBits(\r\n                reader, bits, termDocs,\r\n                fields[Math.min(fields.length-1, level)],\r\n                minPrefixCoded, maxPrefixCoded\r\n              );\r\n            } catch (IOException ioe) {\r\n              // LongRangeBuilder is not allowed to throw checked exceptions:\r\n              // wrap as RuntimeException\r\n              throw new RuntimeException(ioe);\r\n            }\r\n          }\r\n        \r\n        }, precisionStep, minBound, maxBound);\r\n      } catch (RuntimeException e) {\r\n        if (e.getCause() instanceof IOException) throw (IOException)e.getCause();\r\n        throw e;\r\n      } finally {\r\n        termDocs.close();\r\n      }\r\n      return bits;\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\r\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\r\n   */\r\n  //@Override\r\n  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {\r\n    // calculate the upper and lower bounds respecting the inclusive and null values.\r\n    long minBound=(this.min==null) ? Long.MIN_VALUE : (\r\n      minInclusive ? this.min.longValue() : (this.min.longValue()+1L)\r\n    );\r\n    long maxBound=(this.max==null) ? Long.MAX_VALUE : (\r\n      maxInclusive ? this.max.longValue() : (this.max.longValue()-1L)\r\n    );\r\n    \r\n    resetLastNumberOfTerms();\r\n    if (minBound > maxBound) {\r\n      // shortcut, no docs will match this\r\n      return DocIdSet.EMPTY_DOCIDSET;\r\n    } else {\r\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\r\n      final TermDocs termDocs = reader.termDocs();\r\n      try {\r\n        TrieUtils.splitLongRange(new TrieUtils.LongRangeBuilder() {\r\n        \r\n          //@Override\r\n          public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\r\n            try {\r\n              fillBits(\r\n                reader, bits, termDocs,\r\n                minPrefixCoded, maxPrefixCoded\r\n              );\r\n            } catch (IOException ioe) {\r\n              // LongRangeBuilder is not allowed to throw checked exceptions:\r\n              // wrap as RuntimeException\r\n              throw new RuntimeException(ioe);\r\n            }\r\n          }\r\n        \r\n        }, precisionStep, minBound, maxBound);\r\n      } catch (RuntimeException e) {\r\n        if (e.getCause() instanceof IOException) throw (IOException)e.getCause();\r\n        throw e;\r\n      } finally {\r\n        termDocs.close();\r\n      }\r\n      return bits;\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\r\n   */\r\n  //@Override\r\n  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {\r\n    // calculate the upper and lower bounds respecting the inclusive and null values.\r\n    long minBound=(this.min==null) ? Long.MIN_VALUE : (\r\n      minInclusive ? this.min.longValue() : (this.min.longValue()+1L)\r\n    );\r\n    long maxBound=(this.max==null) ? Long.MAX_VALUE : (\r\n      maxInclusive ? this.max.longValue() : (this.max.longValue()-1L)\r\n    );\r\n    \r\n    resetLastNumberOfTerms();\r\n    if (minBound > maxBound) {\r\n      // shortcut, no docs will match this\r\n      return DocIdSet.EMPTY_DOCIDSET;\r\n    } else {\r\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\r\n      final TermDocs termDocs = reader.termDocs();\r\n      try {\r\n        TrieUtils.splitLongRange(new TrieUtils.LongRangeBuilder() {\r\n        \r\n          //@Override\r\n          public final void addRange(String minPrefixCoded, String maxPrefixCoded, int level) {\r\n            try {\r\n              fillBits(\r\n                reader, bits, termDocs,\r\n                fields[Math.min(fields.length-1, level)],\r\n                minPrefixCoded, maxPrefixCoded\r\n              );\r\n            } catch (IOException ioe) {\r\n              // LongRangeBuilder is not allowed to throw checked exceptions:\r\n              // wrap as RuntimeException\r\n              throw new RuntimeException(ioe);\r\n            }\r\n          }\r\n        \r\n        }, precisionStep, minBound, maxBound);\r\n      } catch (RuntimeException e) {\r\n        if (e.getCause() instanceof IOException) throw (IOException)e.getCause();\r\n        throw e;\r\n      } finally {\r\n        termDocs.close();\r\n      }\r\n      return bits;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\r\n   * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.\r\n   */\r\n  //@Override\r\n  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {\r\n    // calculate the upper and lower bounds respecting the inclusive and null values.\r\n    long minBound=(this.min==null) ? Long.MIN_VALUE : (\r\n      minInclusive ? this.min.longValue() : (this.min.longValue()+1L)\r\n    );\r\n    long maxBound=(this.max==null) ? Long.MAX_VALUE : (\r\n      maxInclusive ? this.max.longValue() : (this.max.longValue()-1L)\r\n    );\r\n    \r\n    resetLastNumberOfTerms();\r\n    if (minBound > maxBound) {\r\n      // shortcut, no docs will match this\r\n      return DocIdSet.EMPTY_DOCIDSET;\r\n    } else {\r\n      final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\r\n      final TermDocs termDocs = reader.termDocs();\r\n      try {\r\n        TrieUtils.splitLongRange(new TrieUtils.LongRangeBuilder() {\r\n        \r\n          //@Override\r\n          public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\r\n            try {\r\n              fillBits(\r\n                reader, bits, termDocs,\r\n                minPrefixCoded, maxPrefixCoded\r\n              );\r\n            } catch (IOException ioe) {\r\n              // LongRangeBuilder is not allowed to throw checked exceptions:\r\n              // wrap as RuntimeException\r\n              throw new RuntimeException(ioe);\r\n            }\r\n          }\r\n        \r\n        }, precisionStep, minBound, maxBound);\r\n      } catch (RuntimeException e) {\r\n        if (e.getCause() instanceof IOException) throw (IOException)e.getCause();\r\n        throw e;\r\n      } finally {\r\n        termDocs.close();\r\n      }\r\n      return bits;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}