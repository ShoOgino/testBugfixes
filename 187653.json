{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#BlendedInfixSuggester(Directory,Analyzer,Analyzer,int,BlenderType,int,boolean).mjava","commits":[{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#BlendedInfixSuggester(Directory,Analyzer,Analyzer,int,BlenderType,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance, loading from a previously built\n   * directory, if it exists.\n   *\n   * @param blenderType Type of blending strategy, see BlenderType for more precisions\n   * @param numFactor   Factor to multiply the number of searched elements before ponderate\n   * @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                      suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   * @throws IOException If there are problems opening the underlying Lucene index.\n   */\n  public BlendedInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer,\n                               int minPrefixChars, BlenderType blenderType, int numFactor, boolean commitOnBuild) throws IOException {\n    this(indexAnalyzer.getVersion(), dir, indexAnalyzer, queryAnalyzer, minPrefixChars, blenderType, numFactor, commitOnBuild);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#BlendedInfixSuggester(Directory,Analyzer,Analyzer,int,BlenderType,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#BlendedInfixSuggester(Directory,Analyzer,Analyzer,int,BlenderType,int,boolean).mjava","sourceNew":"  /**\n   * Create a new instance, loading from a previously built\n   * directory, if it exists.\n   *\n   * @param blenderType Type of blending strategy, see BlenderType for more precisions\n   * @param numFactor   Factor to multiply the number of searched elements before ponderate\n   * @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                      suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   * @throws IOException If there are problems opening the underlying Lucene index.\n   */\n  public BlendedInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer,\n                               int minPrefixChars, BlenderType blenderType, int numFactor, boolean commitOnBuild) throws IOException {\n    super(dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild);\n    this.blenderType = blenderType;\n    this.numFactor = numFactor;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance, loading from a previously built\n   * directory, if it exists.\n   *\n   * @param blenderType Type of blending strategy, see BlenderType for more precisions\n   * @param numFactor   Factor to multiply the number of searched elements before ponderate\n   * @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                      suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   * @throws IOException If there are problems opening the underlying Lucene index.\n   */\n  public BlendedInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer,\n                               int minPrefixChars, BlenderType blenderType, int numFactor, boolean commitOnBuild) throws IOException {\n    this(indexAnalyzer.getVersion(), dir, indexAnalyzer, queryAnalyzer, minPrefixChars, blenderType, numFactor, commitOnBuild);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["19e497fe4da591a79332da97681b8017d9c61165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"19e497fe4da591a79332da97681b8017d9c61165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19e497fe4da591a79332da97681b8017d9c61165"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19e497fe4da591a79332da97681b8017d9c61165":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}