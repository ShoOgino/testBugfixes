{"path":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new SolrRequest(SolrRequest.METHOD.GET, \"/select\");\n          // use generic request to avoid extra processing of queries\n          // QueryRequest req = new QueryRequest(sreq.params);\n          // srsp.rsp = server.request(req);\n          srsp.rsp = server.query(sreq.params);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(sreq.params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new SolrRequest(SolrRequest.METHOD.GET, \"/select\");\n          // use generic request to avoid extra processing of queries\n          // QueryRequest req = new QueryRequest(sreq.params);\n          // srsp.rsp = server.request(req);\n          srsp.rsp = server.query(sreq.params);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417d06fc27f3c58c757e1155fd885c870dc9139a","date":1213232025,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(sreq.params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6c6e4e06160d2ad231072e8743988a623ab14c9","date":1213500516,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (or should we explicitly set it?)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(\"wt\"); // use default (or should we explicitly set it?)\n          params.remove(\"version\");\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e69935771ba8cb2303a86bf8a42be7861eaf1da","date":1216694040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (or should we explicitly set it?)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.req = sreq;\n        srsp.shard = shard;\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.rsp = ssr;\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (or should we explicitly set it?)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.exception = th;\n          if (th instanceof SolrException) {\n            srsp.rspCode = ((SolrException)th).code();\n          } else {\n            srsp.rspCode = -1;\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132","5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b75a2c66ba762cf6d5e32feba524d263b0daa70f","date":1225895575,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (currently javabin)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n\n          // no need to set the response parser as binary is the default\n          // req.setResponseParser(new BinaryResponseParser());\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (or should we explicitly set it?)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n          req.setResponseParser(new BinaryResponseParser());  // this sets the wt param\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#submit(ShardRequest,String,ModifiableSolrParams).mjava","sourceNew":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (currently javabin)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n\n          // no need to set the response parser as binary is the default\n          // req.setResponseParser(new BinaryResponseParser());\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","sourceOld":"  void submit(final ShardRequest sreq, final String shard, final ModifiableSolrParams params) {\n    Callable<ShardResponse> task = new Callable<ShardResponse>() {\n      public ShardResponse call() throws Exception {\n\n        ShardResponse srsp = new ShardResponse();\n        srsp.setShardRequest(sreq);\n        srsp.setShard(shard);\n        SimpleSolrResponse ssr = new SimpleSolrResponse();\n        srsp.setSolrResponse(ssr);\n        long startTime = System.currentTimeMillis();\n\n        try {\n          // String url = \"http://\" + shard + \"/select\";\n          String url = \"http://\" + shard;\n\n          params.remove(CommonParams.WT); // use default (currently javabin)\n          params.remove(CommonParams.VERSION);\n\n          SolrServer server = new CommonsHttpSolrServer(url, client);\n          // SolrRequest req = new QueryRequest(SolrRequest.METHOD.POST, \"/select\");\n          // use generic request to avoid extra processing of queries\n          QueryRequest req = new QueryRequest(params);\n          req.setMethod(SolrRequest.METHOD.POST);\n\n          // no need to set the response parser as binary is the default\n          // req.setResponseParser(new BinaryResponseParser());\n          // srsp.rsp = server.request(req);\n          // srsp.rsp = server.query(sreq.params);\n\n          ssr.nl = server.request(req);\n        } catch (Throwable th) {\n          srsp.setException(th);\n          if (th instanceof SolrException) {\n            srsp.setResponseCode(((SolrException)th).code());\n          } else {\n            srsp.setResponseCode(-1);\n          }\n        }\n\n        ssr.elapsedTime = System.currentTimeMillis() - startTime;\n\n        return srsp;\n      }\n    };\n\n    pending.add( completionService.submit(task) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["417d06fc27f3c58c757e1155fd885c870dc9139a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"ad94625fb8d088209f46650c8097196fec67f00c":["b75a2c66ba762cf6d5e32feba524d263b0daa70f"],"417d06fc27f3c58c757e1155fd885c870dc9139a":["da0acfe5ceed804451d76c8f887855b3d060e132"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"b75a2c66ba762cf6d5e32feba524d263b0daa70f":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["417d06fc27f3c58c757e1155fd885c870dc9139a"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["b75a2c66ba762cf6d5e32feba524d263b0daa70f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"417d06fc27f3c58c757e1155fd885c870dc9139a":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["da0acfe5ceed804451d76c8f887855b3d060e132"],"b75a2c66ba762cf6d5e32feba524d263b0daa70f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}