{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexReader#deleteDocuments(Term).mjava","sourceNew":null,"sourceOld":"  /** Deletes all documents that have a given <code>term</code> indexed.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #deleteDocument(int)} for information about when this deletion will \n   * become effective.\n   *\n   * @return the number of documents deleted\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public int deleteDocuments(Term term) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        deleteDocument(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}