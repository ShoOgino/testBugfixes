{"path":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78c4193e9cdb55c470990e3b32f3a02c446812b","date":1294090250,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = (value instanceof Date)\n          ? ((Date)value).getTime()\n          : dateField.parseMath(null, value.toString()).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["f78c4193e9cdb55c470990e3b32f3a02c446812b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1da8d55113b689b06716246649de6f62430f15c0","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"f78c4193e9cdb55c470990e3b32f3a02c446812b":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"f78c4193e9cdb55c470990e3b32f3a02c446812b":["70ad682703b8585f5d0a637efec044d57ec05efb","292ece8c0acfbfc6126153b17f0c3ca809add4f0","868da859b43505d9d2a023bfeae6dd0c795f5295"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","f78c4193e9cdb55c470990e3b32f3a02c446812b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}