{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76e769a8863037082ce292c260151d588e6724e","date":1337253730,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config,ContentSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config, ContentSource source) {\n    this.config = config;\n    this.source = source;\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config,ContentSource).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#setConfig(Config).mjava","sourceNew":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config, ContentSource source) {\n    this.config = config;\n    this.source = source;\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","sourceOld":"  /** Set the configuration parameters of this doc maker. */\n  public void setConfig(Config config) {\n    this.config = config;\n    try {\n        if (source != null) {\n          source.close();\n        }\n      String sourceClass = config.get(\"content.source\", \"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\");\n      source = Class.forName(sourceClass).asSubclass(ContentSource.class).newInstance();\n      source.setConfig(config);\n    } catch (Exception e) {\n      // Should not get here. Throw runtime exception.\n      throw new RuntimeException(e);\n    }\n\n    boolean stored = config.get(\"doc.stored\", false);\n    boolean bodyStored = config.get(\"doc.body.stored\", stored);\n    boolean tokenized = config.get(\"doc.tokenized\", true);\n    boolean bodyTokenized = config.get(\"doc.body.tokenized\", tokenized);\n    boolean norms = config.get(\"doc.tokenized.norms\", false);\n    boolean bodyNorms = config.get(\"doc.body.tokenized.norms\", true);\n    boolean termVec = config.get(\"doc.term.vector\", false);\n    boolean termVecPositions = config.get(\"doc.term.vector.positions\", false);\n    boolean termVecOffsets = config.get(\"doc.term.vector.offsets\", false);\n    \n    valType = new FieldType(TextField.TYPE_UNSTORED);\n    valType.setStored(stored);\n    valType.setTokenized(tokenized);\n    valType.setOmitNorms(!norms);\n    valType.setStoreTermVectors(termVec);\n    valType.setStoreTermVectorPositions(termVecPositions);\n    valType.setStoreTermVectorOffsets(termVecOffsets);\n    valType.freeze();\n\n    bodyValType = new FieldType(TextField.TYPE_UNSTORED);\n    bodyValType.setStored(bodyStored);\n    bodyValType.setTokenized(bodyTokenized);\n    bodyValType.setOmitNorms(!bodyNorms);\n    bodyValType.setStoreTermVectors(termVec);\n    bodyValType.setStoreTermVectorPositions(termVecPositions);\n    bodyValType.setStoreTermVectorOffsets(termVecOffsets);\n    bodyValType.freeze();\n\n    storeBytes = config.get(\"doc.store.body.bytes\", false);\n    \n    reuseFields = config.get(\"doc.reuse.fields\", true);\n\n    // In a multi-rounds run, it is important to reset DocState since settings\n    // of fields may change between rounds, and this is the only way to reset\n    // the cache of all threads.\n    docState = new ThreadLocal<DocState>();\n    \n    indexProperties = config.get(\"doc.index.props\", false);\n\n    updateDocIDLimit = config.get(\"doc.random.id.limit\", -1);\n    if (updateDocIDLimit != -1) {\n      r = new Random(179);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e76e769a8863037082ce292c260151d588e6724e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e76e769a8863037082ce292c260151d588e6724e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e76e769a8863037082ce292c260151d588e6724e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e76e769a8863037082ce292c260151d588e6724e","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e76e769a8863037082ce292c260151d588e6724e":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}