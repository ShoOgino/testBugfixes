{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoMBean.Group,String...).mjava","sourceNew":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = REGISTRY_NAME_PREFIX + group.toString() + \".\";\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","sourceOld":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoMBean.Group group, String... names) {\n    String fullName;\n    String prefix = REGISTRY_NAME_PREFIX + group.toString() + \".\";\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = REGISTRY_NAME_PREFIX + group.toString() + \".\";\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","sourceNew":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","sourceOld":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = REGISTRY_NAME_PREFIX + group.toString() + \".\";\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","sourceNew":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return enforcePrefix(fullName);\n  }\n\n","sourceOld":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return overridableRegistryName(fullName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#getRegistryName(SolrInfoBean.Group,String...).mjava","sourceNew":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   *\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return enforcePrefix(fullName);\n  }\n\n","sourceOld":"  /**\n   * Helper method to construct a properly prefixed registry name based on the group.\n   * @param group reporting group\n   * @param names optional child elements of the registry name. If exactly one element is provided\n   *              and it already contains the required prefix and group name then this value will be used,\n   *              and the group parameter will be ignored.\n   * @return fully-qualified and prefixed registry name, with overrides applied.\n   */\n  public static String getRegistryName(SolrInfoBean.Group group, String... names) {\n    String fullName;\n    String prefix = new StringBuilder(REGISTRY_NAME_PREFIX).append(group.name()).append('.').toString();\n    // check for existing prefix and group\n    if (names != null && names.length > 0 && names[0] != null && names[0].startsWith(prefix)) {\n      // assume the first segment already was expanded\n      if (names.length > 1) {\n        String[] newNames = new String[names.length - 1];\n        System.arraycopy(names, 1, newNames, 0, newNames.length);\n        fullName = MetricRegistry.name(names[0], newNames);\n      } else {\n        fullName = MetricRegistry.name(names[0]);\n      }\n    } else {\n      fullName = MetricRegistry.name(group.toString(), names);\n    }\n    return enforcePrefix(fullName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["816521ebaad5add9cb96bb88c577394e2938c40b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}