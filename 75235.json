{"path":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","commits":[{"id":"991e6851f11a09864684fd54c6aa1a86b9b32c7e","date":1004753547,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","pathOld":"/dev/null","sourceNew":"  public static void testPQ(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int sum = 0, sum2 = 0;\n    \n    Date start = new Date();\n\n    for (int i = 0; i < count; i++) {\n      int next = gen.nextInt();\n      sum += next;\n      pq.put(new Integer(next));\n    }\n\n//      Date end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/put\");\n\n//      start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      assert(next.intValue() >= last);\n      last = next.intValue();\n      sum2 += last;\n    }\n\n    assert(sum == sum2); \n//      end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/pop\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea","date":1012249521,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","sourceNew":"  public static void testPQ(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int sum = 0, sum2 = 0;\n    \n    Date start = new Date();\n\n    for (int i = 0; i < count; i++) {\n      int next = gen.nextInt();\n      sum += next;\n      pq.put(new Integer(next));\n    }\n\n//      Date end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/put\");\n\n//      start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      assertTrue(next.intValue() >= last);\n      last = next.intValue();\n      sum2 += last;\n    }\n\n    assertEquals(sum, sum2); \n//      end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/pop\");\n\n  }\n\n","sourceOld":"  public static void testPQ(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int sum = 0, sum2 = 0;\n    \n    Date start = new Date();\n\n    for (int i = 0; i < count; i++) {\n      int next = gen.nextInt();\n      sum += next;\n      pq.put(new Integer(next));\n    }\n\n//      Date end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/put\");\n\n//      start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      assert(next.intValue() >= last);\n      last = next.intValue();\n      sum2 += last;\n    }\n\n    assert(sum == sum2); \n//      end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/pop\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc5406dd8a53f64f017be0e17b46dd3d9b8e9ca6","date":1023241854,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","sourceNew":"    public static void testPQ(int count)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tRandom gen = new Random();\n\tint sum = 0, sum2 = 0;\n\n\tDate start = new Date();\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"  public static void testPQ(int count) {\n    PriorityQueue pq = new IntegerQueue(count);\n    Random gen = new Random();\n    int sum = 0, sum2 = 0;\n    \n    Date start = new Date();\n\n    for (int i = 0; i < count; i++) {\n      int next = gen.nextInt();\n      sum += next;\n      pq.put(new Integer(next));\n    }\n\n//      Date end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/put\");\n\n//      start = new Date();\n\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n      Integer next = (Integer)pq.pop();\n      assertTrue(next.intValue() >= last);\n      last = next.intValue();\n      sum2 += last;\n    }\n\n    assertEquals(sum, sum2); \n//      end = new Date();\n\n//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n//      System.out.println(\" microseconds/pop\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd5b727678c6ebce3b83525b6d7aa9ce4e6caf4","date":1091994042,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","sourceNew":"    public static void testPQ(int count)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tRandom gen = new Random();\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tRandom gen = new Random();\n\tint sum = 0, sum2 = 0;\n\n\tDate start = new Date();\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","sourceNew":"  public static void testPQ(int count, Random gen)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tRandom gen = new Random();\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["9fd5b727678c6ebce3b83525b6d7aa9ce4e6caf4"],"991e6851f11a09864684fd54c6aa1a86b9b32c7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fd5b727678c6ebce3b83525b6d7aa9ce4e6caf4":["fc5406dd8a53f64f017be0e17b46dd3d9b8e9ca6"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["991e6851f11a09864684fd54c6aa1a86b9b32c7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb1066f2afe9450585d0d10063ea4450085236f1"],"fc5406dd8a53f64f017be0e17b46dd3d9b8e9ca6":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"991e6851f11a09864684fd54c6aa1a86b9b32c7e":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["991e6851f11a09864684fd54c6aa1a86b9b32c7e"],"9fd5b727678c6ebce3b83525b6d7aa9ce4e6caf4":["cb1066f2afe9450585d0d10063ea4450085236f1"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["fc5406dd8a53f64f017be0e17b46dd3d9b8e9ca6"],"fc5406dd8a53f64f017be0e17b46dd3d9b8e9ca6":["9fd5b727678c6ebce3b83525b6d7aa9ce4e6caf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}