{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#accept(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#accept(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || term.endsWith(commonSuffixRef)) {\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n      if (runAutomaton.run(utf16.result, 0, utf16.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || term.endsWith(commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || term.endsWith(commonSuffixRef)) {\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n      if (runAutomaton.run(utf16.result, 0, utf16.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#accept(BytesRef).mjava","sourceNew":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || term.endsWith(commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the term matches the automaton. Also stashes away the term\n   * to assist with smart enumeration.\n   */\n  @Override\n  protected AcceptStatus accept(final BytesRef term) {\n    if (commonSuffixRef == null || term.endsWith(commonSuffixRef)) {\n      if (runAutomaton.run(term.bytes, term.offset, term.length))\n        return linear ? AcceptStatus.YES : AcceptStatus.YES_AND_SEEK;\n      else\n        return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n            AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    } else {\n      return (linear && termComp.compare(term, linearUpperBound) < 0) ? \n          AcceptStatus.NO : AcceptStatus.NO_AND_SEEK;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}