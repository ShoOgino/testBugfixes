{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","commits":[{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParentArray().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParentArray().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3d58d08788c3fd51172ba34474cca42499d6391b","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}