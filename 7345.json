{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          if (copyFieldsMap.containsKey(name) || isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Can't delete '\" + name\n                + \"' because it's referred to by at least one copy field directive.\");\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7a7509102c58cf4f57c425a621aaa20575804b2","date":1427264724,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          String message = \"Can't delete field '\" + name\n              + \"' because it's referred to by at least one copy field directive.\";\n          if (newSchema.copyFieldsMap.containsKey(name) || newSchema.isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          }\n          for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n            DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n            if (name.equals(dynamicCopy.getRegex())) {\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            }\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          if (copyFieldsMap.containsKey(name) || isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Can't delete '\" + name\n                + \"' because it's referred to by at least one copy field directive.\");\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          String message = \"Can't delete field '\" + name\n              + \"' because it's referred to by at least one copy field directive.\";\n          if (newSchema.copyFieldsMap.containsKey(name) || newSchema.isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          }\n          for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n            DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n            if (name.equals(dynamicCopy.getRegex())) {\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            }\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d62f72d1c60d2be239222de52d5e7b516da5f6f","date":1428554550,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteFields(Collection[String]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          String message = \"Can't delete field '\" + name\n              + \"' because it's referred to by at least one copy field directive.\";\n          if (newSchema.copyFieldsMap.containsKey(name) || newSchema.isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          }\n          for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n            DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n            if (name.equals(dynamicCopy.getRegex())) {\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            }\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteFields(Collection<String> names) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n      for (String name : names) {\n        SchemaField field = getFieldOrNull(name); \n        if (null != field) {\n          String message = \"Can't delete field '\" + name\n              + \"' because it's referred to by at least one copy field directive.\";\n          if (newSchema.copyFieldsMap.containsKey(name) || newSchema.isCopyFieldTarget(field)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          }\n          for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n            DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n            if (name.equals(dynamicCopy.getRegex())) {\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            }\n          }\n          newSchema.fields.remove(name);\n          newSchema.fieldsWithDefaultValue.remove(field);\n          newSchema.requiredFields.remove(field);\n        } else {\n          String msg = \"The field '\" + name + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n      }\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7a7509102c58cf4f57c425a621aaa20575804b2"],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7a7509102c58cf4f57c425a621aaa20575804b2":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"a7a7509102c58cf4f57c425a621aaa20575804b2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}