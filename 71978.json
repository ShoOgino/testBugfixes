{"path":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","commits":[{"id":"9c706ea4648df3cdef242f9dd43da00db226b1a6","date":1184375011,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"/dev/null","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( solrConfig, args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( solrConfig, args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( solrConfig, args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( solrConfig, args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = true;\n\n    termBuffer = \"and\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced\n\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length)); //first is not forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = true;\n    termBuffer = \"big\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Big\",  new String(termBuffer, 0, termBuffer.length));\n    termBuffer = \"BIG\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"BIG\",  new String(termBuffer, 0, termBuffer.length));\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The the\" ) ) );\n    assertEquals( \"The The the\", out );\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n\n    assertEquals( \"Kitten\", factory.processWord( \"kiTTEN\", 0 ) );\n    factory.forceFirstLetter = true;\n    assertEquals( \"And\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = false;\n    assertEquals( \"and\", factory.processWord( \"AnD\", 0 ) ); // first is forced\n    factory.forceFirstLetter = true;\n    assertEquals( \"BIG\", factory.processWord( \"big\", 0 ) );\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The\" ) ) );\n    assertEquals( \"The the\", out );\n  }\n\n","bugFix":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = true;\n\n    termBuffer = \"and\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced\n\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length)); //first is not forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = true;\n    termBuffer = \"big\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Big\",  new String(termBuffer, 0, termBuffer.length));\n    termBuffer = \"BIG\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"BIG\",  new String(termBuffer, 0, termBuffer.length));\n    \n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello there my name is ryan\" });\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"1st 2nd third\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;  \n    tokenizer = new KeywordTokenizer(new StringReader(\"the The the\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = true;\n\n    termBuffer = \"and\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced\n\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length)); //first is not forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = true;\n    termBuffer = \"big\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Big\",  new String(termBuffer, 0, termBuffer.length));\n    termBuffer = \"BIG\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"BIG\",  new String(termBuffer, 0, termBuffer.length));\n    \n    String out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello there my name is ryan\", out );\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There My Name Is Ryan\", out );\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    out = tsToString( factory.create( new IterTokenStream( \"Hello thEre my Name is Ryan\" ) ) );\n    assertEquals( \"Hello There my Name is Ryan\", out );\n    \n    // without prefix\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"Mckinley\", out );\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    out = tsToString( factory.create( new IterTokenStream( \"McKinley\" ) ) );\n    assertEquals( \"McKinley\", out );\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    out = tsToString( factory.create( new IterTokenStream( \"1st 2nd third\" ) ) );\n    assertEquals( \"1st 2nd Third\", out );\n    \n    factory.forceFirstLetter = true;\n    out = tsToString( factory.create( new IterTokenStream( \"the The the\" ) ) );\n    assertEquals( \"The The the\", out );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = true;\n\n    termBuffer = \"and\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced\n\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length)); //first is not forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = true;\n    termBuffer = \"big\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Big\",  new String(termBuffer, 0, termBuffer.length));\n    termBuffer = \"BIG\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"BIG\",  new String(termBuffer, 0, termBuffer.length));\n    \n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello there my name is ryan\" });\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"1st 2nd third\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;  \n    tokenizer = new KeywordTokenizer(new StringReader(\"the The the\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"The The the\" });\n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception \n  {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"and the it BIG\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );  \n    \n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = true;\n\n    termBuffer = \"and\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced\n\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length));//first is forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"AnD\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"And\",  new String(termBuffer, 0, termBuffer.length)); //first is not forced, but it's not a keep word, either\n\n    factory.forceFirstLetter = true;\n    termBuffer = \"big\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Big\",  new String(termBuffer, 0, termBuffer.length));\n    termBuffer = \"BIG\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"BIG\",  new String(termBuffer, 0, termBuffer.length));\n    \n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello there my name is ryan\" });\n    \n    // now each token\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\"));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" });\n    \n    // now only the long words\n    factory.minWordLength = 3;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"Hello thEre my Name is Ryan\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" });\n    \n    // without prefix\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Mckinley\" });\n    \n    // Now try some prefixes\n    factory = new CapitalizationFilterFactory();\n    args.put( \"okPrefix\", \"McK\" );  // all words\n    factory.init( args );\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"McKinley\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"McKinley\" });\n    \n    // now try some stuff with numbers\n    factory.forceFirstLetter = false;\n    factory.onlyFirstWord = false;\n    tokenizer = new WhitespaceTokenizer(new StringReader(\"1st 2nd third\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"1st\", \"2nd\", \"Third\" });\n    \n    factory.forceFirstLetter = true;  \n    tokenizer = new KeywordTokenizer(new StringReader(\"the The the\" ));\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"The The the\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c706ea4648df3cdef242f9dd43da00db226b1a6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"9c706ea4648df3cdef242f9dd43da00db226b1a6":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}