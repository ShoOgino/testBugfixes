{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","commits":[{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"/dev/null","sourceNew":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 2, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(2, 3));\n\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<3\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(600, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(2, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":null,"sourceOld":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 2, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(2, 3));\n\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<3\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(600, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(2, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"/dev/null","sourceNew":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d9856d88ae05e85b3023146e33a76fcd10c4e4d","date":1520103436,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11066\")\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e","date":1520240230,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11066\")\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab2f54aa3920f7b4a9b92e45334237f6427b20d3","date":1522384863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":"  @Test\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerIntegrationTest#testScheduledTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testScheduledTrigger().mjava","sourceNew":"  @Test\n  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n        \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","sourceOld":"  public void testScheduledTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // this collection will place 2 cores on 1st node and 1 core on 2nd node\n    String collectionName = \"testScheduledTrigger\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setMaxShardsPerNode(5).process(solrClient);\n    waitForState(\"\", collectionName, clusterShape(1, 3));\n\n    // create a policy which allows only 1 core per node thereby creating a violation for the above collection\n    String setClusterPolicy = \"{\\n\" +\n        \"  \\\"set-cluster-policy\\\" : [\\n\" +\n        \"    {\\\"cores\\\" : \\\"<2\\\", \\\"node\\\" : \\\"#EACH\\\"}\\n\" +\n        \"  ]\\n\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicy);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a new node which can be used to balance the cluster as per policy\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(10);\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'sched_trigger_integration1',\" +\n        \"'event' : 'scheduled',\" +\n        \"'startTime' : '\" + new Date().toInstant().toString() + \"'\" +\n        \"'every' : '+3SECONDS'\" +\n        \"'actions' : [\" +\n          \"{'name' : 'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n          \"{'name' : 'recorder', 'class': '\" + ContextPropertiesRecorderAction.class.getName() + \"'}\" +\n        \"]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"ScheduledTrigger did not fire within 20 seconds\", triggerFiredLatch.await(20, TimeUnit.SECONDS));\n    assertEquals(1, events.size());\n    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();\n    assertNotNull(actionContextProps);\n    TriggerEvent event = events.iterator().next();\n    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get(\"operations\");\n    assertNotNull(operations);\n    assertEquals(1, operations.size());\n    for (SolrRequest operation : operations) {\n      SolrParams params = operation.getParams();\n      assertEquals(newNode.getNodeName(), params.get(\"targetNode\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"9d9856d88ae05e85b3023146e33a76fcd10c4e4d":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e":["9d9856d88ae05e85b3023146e33a76fcd10c4e4d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e"]},"commit2Childs":{"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"9d9856d88ae05e85b3023146e33a76fcd10c4e4d":["bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"bdd2a8e3062fc9c4b2cd4c34403648d0e622a08e":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["9d9856d88ae05e85b3023146e33a76fcd10c4e4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}