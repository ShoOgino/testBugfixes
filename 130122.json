{"path":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"/dev/null","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: c1 }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected type\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertEquals(toJSONString(errs), 2, errs.size());\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Missing field\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected elements of type\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"value of enum\"));\n    \n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n    \n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"/dev/null","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: c1 }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected type\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertEquals(toJSONString(errs), 2, errs.size());\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Missing field\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected elements of type\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"value of enum\"));\n    \n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n    \n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7434d2a8c9efb18776e173b86f766ecee9d06663","date":1495081490,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: c1 }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected type\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertEquals(toJSONString(errs), 2, errs.size());\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Missing field\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected elements of type\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"value of enum\"));\n    \n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n    \n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: c1 }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected type\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertEquals(toJSONString(errs), 2, errs.size());\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Missing field\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Expected elements of type\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"value of enum\"));\n    \n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n    \n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d7467475e194bd1143ba662a0717e6345137f","date":1496984366,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/JsonValidatorTest#testSchemaValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = Utils.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/JsonValidatorTest#testSchemaValidation().mjava","sourceNew":null,"sourceOld":"  public void testSchemaValidation() {\n    ValidatingJsonMap spec = ApiBag.getSpec(\"collections.Commands\").getSpec();\n    Map createSchema = spec.getMap(\"commands\", NOT_NULL).getMap(\"create-alias\", NOT_NULL);\n    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);\n    List<String> errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ c1 , c2]}\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [c1] }\"));\n    assertNull(toJSONString(errs), errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, x:y, collections: [ c1 , c2]}\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : 123, collections: c1 }\"));\n    assertNotNull(toJSONString(errs), errs);\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{x:y, collections: [ c1 , c2]}\"));\n    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains(\"Unknown\"));\n    errs = validator.validateJson(Utils.fromJSONString(\"{name : x, collections: [ 1 , 2]}\"));\n    assertFalse(toJSONString(errs), errs.isEmpty());\n    assertTrue(toJSONString(errs), errs.get(0).contains(\"expected\"));\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:21, adult:true}\"));\n    assertNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'21', adult:'true'}\"));\n    assertNotNull(errs);\n\n    errs = validator.validateJson(Utils.fromJSONString(\"{name:x, age:'x21', adult:'true'}\"));\n    assertEquals(1, errs.size());\n    try {\n      validator = new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  properties: {\" +\n          \"   age : {type: int},\" +\n          \"   adult : {type: Boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown type\"));\n    }\n\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"   x : y,\" +\n          \"  properties: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key\"));\n    }\n    try {\n      new JsonSchemaValidator(\"{\" +\n          \"  type:object,\" +\n          \"  propertes: {\" +\n          \"   age : {type: number},\" +\n          \"   adult : {type: boolean},\" +\n          \"   name: {type: string}}}\");\n      fail(\"should have failed\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Unknown key : propertes\"));\n    }\n\n    validator = new JsonSchemaValidator(\"{\" +\n        \"  type:object,\" +\n        \"  properties: {\" +\n        \"   age : {type: number},\" +\n        \"   sex: {type: string, enum:[M, F]},\" +\n        \"   adult : {type: boolean},\" +\n        \"   name: {type: string}}}\");\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:M}\"));\n    assertNull(\"errs are \" + errs, errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"{name: 'Joe Average' , sex:m}\"));\n    assertEquals(1, errs.size());\n    assertTrue(errs.get(0).contains(\"Value of enum\"));\n\n    String schema = \"{\\n\" +\n        \"  'type': 'object',\\n\" +\n        \"  'properties': {\\n\" +\n        \"    'links': {\\n\" +\n        \"      'type': 'array',\\n\" +\n        \"      'items':{\" +\n        \"          'type': 'object',\\n\" +\n        \"          'properties': {\\n\" +\n        \"            'rel': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            },\\n\" +\n        \"            'href': {\\n\" +\n        \"              'type': 'string'\\n\" +\n        \"            }\\n\" +\n        \"          }\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    validator.validateJson(Utils.fromJSONString(\"{\\n\" +\n        \"  'links': [\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    },\\n\" +\n        \"    {\\n\" +\n        \"        'rel': 'x',\\n\" +\n        \"        'href': 'x'\\n\" +\n        \"    }\\n\" +\n        \"  ]\\n\" +\n        \"}\"));\n\n    schema = \"{\\n\" +\n        \"'type' : 'object',\\n\" +\n        \"'oneOf' : ['a', 'b']\\n\" +\n        \"}\";\n    validator = new JsonSchemaValidator(schema);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'c':'val'}\"));\n    assertNotNull(errs);\n    errs = validator.validateJson(Utils.fromJSONString(\"\" +\n        \"{'a':'val'}\"));\n    assertNull(errs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7434d2a8c9efb18776e173b86f766ecee9d06663":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7434d2a8c9efb18776e173b86f766ecee9d06663"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"520d7467475e194bd1143ba662a0717e6345137f":["5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"28288370235ed02234a64753cdbf0c6ec096304a":["7434d2a8c9efb18776e173b86f766ecee9d06663","520d7467475e194bd1143ba662a0717e6345137f"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["7434d2a8c9efb18776e173b86f766ecee9d06663"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","520d7467475e194bd1143ba662a0717e6345137f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7434d2a8c9efb18776e173b86f766ecee9d06663":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7434d2a8c9efb18776e173b86f766ecee9d06663","e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"520d7467475e194bd1143ba662a0717e6345137f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["520d7467475e194bd1143ba662a0717e6345137f"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}