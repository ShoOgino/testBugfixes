{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","commits":[{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49109a3cf63b2c0c1d9f3d12712821ea0f147883","date":1344351619,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ab99a2487a34179af579c58aee0f6954a54173b","date":1370025444,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efcb86f82b536ffcefcc27adbfa39b603342af1","date":1492147023,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testBufferingFlags().mjava","sourceNew":"    @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core does not replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"    @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v114 = getNextVersion();\n      String v115 = getNextVersion();\n      String v116 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",v114)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",v115)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",v116)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["6ab99a2487a34179af579c58aee0f6954a54173b"],"1455c941cc4ce652efc776fc23471b0e499246f6":["9efcb86f82b536ffcefcc27adbfa39b603342af1"],"9efcb86f82b536ffcefcc27adbfa39b603342af1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e2fe35ac47f8f51356d6c1724455d18f31c94fae","49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"6ab99a2487a34179af579c58aee0f6954a54173b":["49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"49109a3cf63b2c0c1d9f3d12712821ea0f147883":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9efcb86f82b536ffcefcc27adbfa39b603342af1","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e99829242bceda4cf974ec0eb5d82d713615b3da"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e2fe35ac47f8f51356d6c1724455d18f31c94fae","49109a3cf63b2c0c1d9f3d12712821ea0f147883"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["9efcb86f82b536ffcefcc27adbfa39b603342af1","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["e99829242bceda4cf974ec0eb5d82d713615b3da"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3a0c04b71951333291abc7f317109a6a5957bd28":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9efcb86f82b536ffcefcc27adbfa39b603342af1"],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9efcb86f82b536ffcefcc27adbfa39b603342af1":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"6ab99a2487a34179af579c58aee0f6954a54173b":["3a0c04b71951333291abc7f317109a6a5957bd28"],"49109a3cf63b2c0c1d9f3d12712821ea0f147883":["c7869f64c874ebf7f317d22c00baf2b6857797a6","6ab99a2487a34179af579c58aee0f6954a54173b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e99829242bceda4cf974ec0eb5d82d713615b3da":["3599646b4d4c346cf74d334813488b8b337b5bf5","e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"f592209545c71895260367152601e9200399776d":[],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["c7869f64c874ebf7f317d22c00baf2b6857797a6","49109a3cf63b2c0c1d9f3d12712821ea0f147883","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c7869f64c874ebf7f317d22c00baf2b6857797a6","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","d6f074e73200c07d54f242d3880a8da5a35ff97b","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}