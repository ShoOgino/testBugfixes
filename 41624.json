{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","commits":[{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n    if (deleteVersionParamNames.length == 0) {\n      // not suppose to look at deletes at all\n      super.processDelete(cmd);\n      return;\n    }\n\n    if ( ! cmd.isDeleteById() ) {\n      // nothing to do\n      super.processDelete(cmd);\n      return;\n    }\n\n    String[] deleteParamValues = getDeleteParamValuesFromRequest(cmd);\n    validateDeleteParamValues(deleteParamValues);\n\n\n    if (isNotLeader(cmd)) {\n      // transform delete to add earlier rather than later\n\n      SolrInputDocument newDoc = new SolrInputDocument();\n      newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n          cmd.getId());\n      setDeleteParamValues(newDoc, deleteParamValues);\n\n      AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n      newCmd.solrDoc = newDoc;\n      newCmd.commitWithin = cmd.commitWithin;\n      super.processAdd(newCmd);\n      return;\n    }\n\n\n    for (int i=0; ;i++) {\n\n      logOverlyFailedRetries(i, cmd);\n\n      if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValues)) {\n        // drop this older update\n        return;\n      }\n\n      // :TODO: should this logic be split and driven by two params?\n      //   - deleteVersionParam to do a version check\n      //   - some new boolean param to determine if a stub document gets added in place?\n      try {\n        // drop the delete, and instead propagate an AddDoc that\n        // replaces the doc with a new \"empty\" one that records the deleted version\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        setDeleteParamValues(newDoc, deleteParamValues);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n\n        newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n        super.processAdd(newCmd);\n        return;\n      } catch (SolrException e) {\n        if (e.code() == 409) {\n          continue;  // if a version conflict, retry\n        }\n        throw e;  // rethrow\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#processDelete(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n    if (deleteVersionParamNames.length == 0) {\n      // not suppose to look at deletes at all\n      super.processDelete(cmd);\n      return;\n    }\n\n    if ( ! cmd.isDeleteById() ) {\n      // nothing to do\n      super.processDelete(cmd);\n      return;\n    }\n\n    String[] deleteParamValues = getDeleteParamValuesFromRequest(cmd);\n    validateDeleteParamValues(deleteParamValues);\n\n\n    if (isNotLeader(cmd)) {\n      // transform delete to add earlier rather than later\n\n      SolrInputDocument newDoc = createTombstoneDocument(core.getLatestSchema(), cmd.getId(), versionFieldNames, deleteParamValues, this.tombstoneConfig);\n\n      AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n      newCmd.solrDoc = newDoc;\n      newCmd.commitWithin = cmd.commitWithin;\n      super.processAdd(newCmd);\n      return;\n    }\n\n\n    for (int i=0; ;i++) {\n\n      logOverlyFailedRetries(i, cmd);\n\n      if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValues)) {\n        // drop this older update\n        return;\n      }\n\n      // :TODO: should this logic be split and driven by two params?\n      //   - deleteVersionParam to do a version check\n      //   - some new boolean param to determine if a stub document gets added in place?\n      try {\n        // drop the delete, and instead propagate an AddDoc that\n        // replaces the doc with a new \"empty\" one that records the deleted version\n\n        SolrInputDocument newDoc = createTombstoneDocument(core.getLatestSchema(), cmd.getId(), versionFieldNames, deleteParamValues, this.tombstoneConfig);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n\n        newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n        super.processAdd(newCmd);\n        return;\n      } catch (SolrException e) {\n        if (e.code() == 409) {\n          continue;  // if a version conflict, retry\n        }\n        throw e;  // rethrow\n      }\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processDelete(DeleteUpdateCommand cmd) throws IOException {\n    if (deleteVersionParamNames.length == 0) {\n      // not suppose to look at deletes at all\n      super.processDelete(cmd);\n      return;\n    }\n\n    if ( ! cmd.isDeleteById() ) {\n      // nothing to do\n      super.processDelete(cmd);\n      return;\n    }\n\n    String[] deleteParamValues = getDeleteParamValuesFromRequest(cmd);\n    validateDeleteParamValues(deleteParamValues);\n\n\n    if (isNotLeader(cmd)) {\n      // transform delete to add earlier rather than later\n\n      SolrInputDocument newDoc = new SolrInputDocument();\n      newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n          cmd.getId());\n      setDeleteParamValues(newDoc, deleteParamValues);\n\n      AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n      newCmd.solrDoc = newDoc;\n      newCmd.commitWithin = cmd.commitWithin;\n      super.processAdd(newCmd);\n      return;\n    }\n\n\n    for (int i=0; ;i++) {\n\n      logOverlyFailedRetries(i, cmd);\n\n      if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValues)) {\n        // drop this older update\n        return;\n      }\n\n      // :TODO: should this logic be split and driven by two params?\n      //   - deleteVersionParam to do a version check\n      //   - some new boolean param to determine if a stub document gets added in place?\n      try {\n        // drop the delete, and instead propagate an AddDoc that\n        // replaces the doc with a new \"empty\" one that records the deleted version\n\n        SolrInputDocument newDoc = new SolrInputDocument();\n        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),\n            cmd.getId());\n        setDeleteParamValues(newDoc, deleteParamValues);\n\n        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());\n        newCmd.solrDoc = newDoc;\n        newCmd.commitWithin = cmd.commitWithin;\n\n        newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n        super.processAdd(newCmd);\n        return;\n      } catch (SolrException e) {\n        if (e.code() == 409) {\n          continue;  // if a version conflict, retry\n        }\n        throw e;  // rethrow\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"667eea18b7ca87af38d05d81d479f943a717a6b1":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667eea18b7ca87af38d05d81d479f943a717a6b1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}