{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  // nocommit a must be det?  we should document if so?\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  // nocommit a must be det?  we should document if so?\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonPrefix(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefix(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.  The automaton must be deterministic.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    StringBuilder b = new StringBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    do {\n      done = true;\n      visited.add(s);\n      if (a.isAccept(s) == false && a.getNumTransitions(s) == 1) {\n        a.getTransition(s, 0, t);\n        if (t.min == t.max && !visited.contains(t.dest)) {\n          b.appendCodePoint(t.min);\n          s = t.dest;\n          done = false;\n        }\n      }\n    } while (!done);\n\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the longest string that is a prefix of all accepted strings and\n   * visits each state at most once.\n   * \n   * @return common prefix\n   */\n  public static String getCommonPrefix(Automaton a) {\n    if (a.isSingleton()) return a.singleton;\n    StringBuilder b = new StringBuilder();\n    HashSet<State> visited = new HashSet<>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          b.appendCodePoint(t.min);\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}