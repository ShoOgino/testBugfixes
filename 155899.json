{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkNoOldClusterstate(SolrZkClient).mjava","commits":[{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":0,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkNoOldClusterstate(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Verifies if /clusterstate.json exists in Zookeepeer, and if it does and is not empty, refuses to start and outputs\n   * a helpful message regarding collection migration.</p>\n   *\n   * <p>If /clusterstate.json exists and is empty, it is removed.</p>\n   */\n  private void checkNoOldClusterstate(final SolrZkClient zkClient) throws InterruptedException {\n    try {\n      if (!zkClient.exists(ZkStateReader.UNSUPPORTED_CLUSTER_STATE, true)) {\n        return;\n      }\n\n      final byte[] data = zkClient.getData(ZkStateReader.UNSUPPORTED_CLUSTER_STATE, null, null, true);\n\n      if (Arrays.equals(\"{}\".getBytes(StandardCharsets.UTF_8), data)) {\n        // Empty json. This log will only occur once.\n        log.warn(\"{} no longer supported starting with Solr 9. Found empty file on Zookeeper, deleting it.\", ZkStateReader.UNSUPPORTED_CLUSTER_STATE);\n        zkClient.delete(ZkStateReader.UNSUPPORTED_CLUSTER_STATE, -1, true);\n      } else {\n        // /clusterstate.json not empty: refuse to start but do not automatically delete. A bit of a pain but user shouldn't\n        // have older collections at this stage anyway.\n        String message = ZkStateReader.UNSUPPORTED_CLUSTER_STATE + \" no longer supported starting with Solr 9. \"\n            + \"It is present and not empty. Cannot start Solr. Please first migrate collections to stateFormat=2 using an \"\n            + \"older version of Solr or if you don't care about the data then delete the file from \"\n            + \"Zookeeper using a command line tool, for example: bin/solr zk rm /clusterstate.json -z host:port\";\n        log.error(message);\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, message);\n      }\n    } catch (KeeperException e) {\n      // Convert checked exception to one acceptable by the caller (see also init() further down)\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}