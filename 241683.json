{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = termsIndex.getOrd(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","date":1279015205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = termsIndex.getOrd(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = termsIndex.getOrd(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85dda036bb5a8f3a7207746dd1e4f97b39efa1be","date":1283593758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        ords[slot] = 0;\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        ords[slot] = 0;\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final int ord = (int) currentDocToOrd.get(doc);\n      if (ord == 0) {\n        values[slot] = null;\n      } else {\n        ords[slot] = ord;\n        assert ord >= 0;\n        if (values[slot] == null) {\n          values[slot] = new BytesRef();\n        }\n        termsIndex.lookup(ord, values[slot]);\n      }\n      readerGen[slot] = currentReaderGen;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85dda036bb5a8f3a7207746dd1e4f97b39efa1be":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"85dda036bb5a8f3a7207746dd1e4f97b39efa1be":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","5f4e87790277826a2aea119328600dfb07761f32"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["85dda036bb5a8f3a7207746dd1e4f97b39efa1be","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}