{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0451c421afa567194fd4312af9389e07003a7941","date":1331317047,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f24f21e70a092329fc6f920115592dc9529d379","date":1349391034,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3491d1030513020096bfb21ebca26fd57070ff8","date":1401733016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      getOutput(this.context);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, this.context);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    IndexOutput entryTableOut = null;\n    // TODO this code should clean up after itself\n    // (remove partial .cfs/.cfe)\n    boolean success = false;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream; we can safely use IOContext.DEFAULT\n      // here because this will only open the output if no file was\n      // added to the CFS\n      getOutput(IOContext.DEFAULT);\n      assert dataOut != null;\n      CodecUtil.writeFooter(dataOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(dataOut);\n      } else {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n    success = false;\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(entryTableOut);\n      } else {\n        IOUtils.closeWhileHandlingException(entryTableOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7530de27b87b961b51f01bd1299b7004d46e8823","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5f24f21e70a092329fc6f920115592dc9529d379","7530de27b87b961b51f01bd1299b7004d46e8823"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0451c421afa567194fd4312af9389e07003a7941"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["7530de27b87b961b51f01bd1299b7004d46e8823"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3491d1030513020096bfb21ebca26fd57070ff8":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"989d940c4bf402188f4f0ae13736836885227383":["a3491d1030513020096bfb21ebca26fd57070ff8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a3491d1030513020096bfb21ebca26fd57070ff8","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f24f21e70a092329fc6f920115592dc9529d379":["0451c421afa567194fd4312af9389e07003a7941"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5f24f21e70a092329fc6f920115592dc9529d379"],"0451c421afa567194fd4312af9389e07003a7941":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","0451c421afa567194fd4312af9389e07003a7941"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["a3491d1030513020096bfb21ebca26fd57070ff8"],"a3491d1030513020096bfb21ebca26fd57070ff8":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f24f21e70a092329fc6f920115592dc9529d379":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"0451c421afa567194fd4312af9389e07003a7941":["38e3b736c7ca086d61b7dbb841c905ee115490da","5f24f21e70a092329fc6f920115592dc9529d379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}