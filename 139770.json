{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","commits":[{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, IntArrayAllocator intArrayAllocator,\n      FloatArrayAllocator floatArrayAllocator) {\n    \n    super(searchParams,indexReader,taxonomyReader);\n    int realPartitionSize = intArrayAllocator == null || floatArrayAllocator == null \n              ? PartitionsUtils.partitionSize(searchParams, taxonomyReader) : -1; // -1 if not needed.\n    this.intArrayAllocator = intArrayAllocator != null \n        ? intArrayAllocator\n        // create a default one if null was provided\n        : new IntArrayAllocator(realPartitionSize, 1);\n    this.floatArrayAllocator = floatArrayAllocator != null \n        ? floatArrayAllocator\n        // create a default one if null provided\n        : new FloatArrayAllocator(realPartitionSize, 1);\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.getFacetIndexingParams(), taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.getFacetIndexingParams(), taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.getFacetIndexingParams(), taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.getFacetIndexingParams(), taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays == null ? createFacetArrays(searchParams, taxonomyReader) : facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#OldFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public OldFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays == null ? createFacetArrays(searchParams, taxonomyReader) : facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays == null ? createFacetArrays(searchParams, taxonomyReader) : facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#OldFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  public OldFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays == null ? createFacetArrays(searchParams, taxonomyReader) : facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams, indexReader, taxonomyReader, facetArrays);\n    \n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams.indexingParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}