{"path":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}