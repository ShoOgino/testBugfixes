{"path":"backwards/src/java/org/apache/lucene/util/SimpleStringInterner#intern(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/SimpleStringInterner#intern(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String intern(String s) {\n    int h = s.hashCode();\n    // In the future, it may be worth augmenting the string hash\n    // if the lower bits need better distribution.\n    int slot = h & (cache.length-1);\n\n    Entry first = this.cache[slot];\n    Entry nextToLast = null;\n\n    int chainLength = 0;\n\n    for(Entry e=first; e!=null; e=e.next) {\n      if (e.hash == h && (e.str == s || e.str.compareTo(s)==0)) {\n      // if (e.str == s || (e.hash == h && e.str.compareTo(s)==0)) {\n        return e.str;\n      }\n\n      chainLength++;\n      if (e.next != null) {\n        nextToLast = e;\n      }\n    }\n\n    // insertion-order cache: add new entry at head\n    s = s.intern();\n    this.cache[slot] = new Entry(s, h, first);\n    if (chainLength >= maxChainLength) {\n      // prune last entry\n      nextToLast.next = null;\n    }\n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/SimpleStringInterner#intern(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/SimpleStringInterner#intern(String).mjava","sourceNew":"  @Override\n  public String intern(String s) {\n    int h = s.hashCode();\n    // In the future, it may be worth augmenting the string hash\n    // if the lower bits need better distribution.\n    int slot = h & (cache.length-1);\n\n    Entry first = this.cache[slot];\n    Entry nextToLast = null;\n\n    int chainLength = 0;\n\n    for(Entry e=first; e!=null; e=e.next) {\n      if (e.hash == h && (e.str == s || e.str.compareTo(s)==0)) {\n      // if (e.str == s || (e.hash == h && e.str.compareTo(s)==0)) {\n        return e.str;\n      }\n\n      chainLength++;\n      if (e.next != null) {\n        nextToLast = e;\n      }\n    }\n\n    // insertion-order cache: add new entry at head\n    s = s.intern();\n    this.cache[slot] = new Entry(s, h, first);\n    if (chainLength >= maxChainLength) {\n      // prune last entry\n      nextToLast.next = null;\n    }\n    return s;\n  }\n\n","sourceOld":"  @Override\n  public String intern(String s) {\n    int h = s.hashCode();\n    // In the future, it may be worth augmenting the string hash\n    // if the lower bits need better distribution.\n    int slot = h & (cache.length-1);\n\n    Entry first = this.cache[slot];\n    Entry nextToLast = null;\n\n    int chainLength = 0;\n\n    for(Entry e=first; e!=null; e=e.next) {\n      if (e.hash == h && (e.str == s || e.str.compareTo(s)==0)) {\n      // if (e.str == s || (e.hash == h && e.str.compareTo(s)==0)) {\n        return e.str;\n      }\n\n      chainLength++;\n      if (e.next != null) {\n        nextToLast = e;\n      }\n    }\n\n    // insertion-order cache: add new entry at head\n    s = s.intern();\n    this.cache[slot] = new Entry(s, h, first);\n    if (chainLength >= maxChainLength) {\n      // prune last entry\n      nextToLast.next = null;\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}