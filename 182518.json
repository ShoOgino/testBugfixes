{"path":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertFullWalkNoDups(boolean,int,SolrParams).mjava","commits":[{"id":"cbd6d2ce12ab9b3bef6559744b54e95242cf5747","date":1390347163,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertFullWalkNoDups(boolean,int,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /** :TODO: refactor method into two arg version once SOLR-5652 is resolved */\n  private SentinelIntSet assertFullWalkNoDups(final boolean verbose, \n                                              final int maxSize, \n                                              final SolrParams params) throws Exception {\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      final SolrParams p = p(params, CURSOR_MARK_PARAM, cursorMark);\n      QueryResponse rsp = cloudClient.query(p);\n      String nextCursorMark = assertHashNextCursorMark(rsp);\n      SolrDocumentList docs = extractDocList(rsp);\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n\n      if (verbose) { // SOLR-5652\n        // SolrDocument is a bit more verbose then we need\n        StringBuilder s = new StringBuilder();\n        for (SolrDocument doc : docs) {\n          s.append(doc.getFieldValuesMap().toString());\n          s.append(\"; \");\n        }\n        log.info(\"SOLR-5652: ({}) gave us these docs: {}\", p, s);\n      }\n\n      for (SolrDocument doc : docs) {\n        int id = ((Integer)doc.get(\"id\")).intValue();\n        if (ids.exists(id)) {\n          String msg = \"(\" + p + \") walk already seen: \" + id;\n          try {\n            queryAndCompareShards(params(\"distrib\",\"false\",\n                                         \"q\",\"id:\"+id));\n          } catch (AssertionError ae) {\n            throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n          }\n          rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n          throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df168f752ac3120a6e38cebfc8fc77722d6b2d20","date":1392501538,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#assertFullWalkNoDups(boolean,int,SolrParams).mjava","sourceNew":null,"sourceOld":"  /** :TODO: refactor method into two arg version once SOLR-5652 is resolved */\n  private SentinelIntSet assertFullWalkNoDups(final boolean verbose, \n                                              final int maxSize, \n                                              final SolrParams params) throws Exception {\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      final SolrParams p = p(params, CURSOR_MARK_PARAM, cursorMark);\n      QueryResponse rsp = cloudClient.query(p);\n      String nextCursorMark = assertHashNextCursorMark(rsp);\n      SolrDocumentList docs = extractDocList(rsp);\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n\n      if (verbose) { // SOLR-5652\n        // SolrDocument is a bit more verbose then we need\n        StringBuilder s = new StringBuilder();\n        for (SolrDocument doc : docs) {\n          s.append(doc.getFieldValuesMap().toString());\n          s.append(\"; \");\n        }\n        log.info(\"SOLR-5652: ({}) gave us these docs: {}\", p, s);\n      }\n\n      for (SolrDocument doc : docs) {\n        int id = ((Integer)doc.get(\"id\")).intValue();\n        if (ids.exists(id)) {\n          String msg = \"(\" + p + \") walk already seen: \" + id;\n          try {\n            queryAndCompareShards(params(\"distrib\",\"false\",\n                                         \"q\",\"id:\"+id));\n          } catch (AssertionError ae) {\n            throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n          }\n          rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n          throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      }\n      cursorMark = nextCursorMark;\n    }\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df168f752ac3120a6e38cebfc8fc77722d6b2d20":["cbd6d2ce12ab9b3bef6559744b54e95242cf5747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df168f752ac3120a6e38cebfc8fc77722d6b2d20"],"cbd6d2ce12ab9b3bef6559744b54e95242cf5747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbd6d2ce12ab9b3bef6559744b54e95242cf5747"],"df168f752ac3120a6e38cebfc8fc77722d6b2d20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbd6d2ce12ab9b3bef6559744b54e95242cf5747":["df168f752ac3120a6e38cebfc8fc77722d6b2d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}