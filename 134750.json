{"path":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getFiniteStrings(int,int).mjava","commits":[{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getFiniteStrings(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get all finite strings that start at {@code startState} and end at {@code endState}.\n   */\n  public Iterator<TokenStream> getFiniteStrings(int startState, int endState) throws IOException {\n    final FiniteStringsIterator it = new FiniteStringsIterator(det, startState, endState);\n    return new Iterator<TokenStream> () {\n      IntsRef current;\n      boolean finished = false;\n\n      @Override\n      public boolean hasNext() {\n        if (finished == false && current == null) {\n          current = it.next();\n          if (current == null) {\n            finished = true;\n          }\n        }\n        return current != null;\n      }\n\n      @Override\n      public TokenStream next() {\n        if (current == null) {\n          hasNext();\n        }\n        TokenStream next =  new FiniteStringsTokenStream(current);\n        current = null;\n        return next;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1183e4d02ec8307ffca25b9879752bea1822f1","date":1563533185,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getFiniteStrings(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings#getFiniteStrings(int,int).mjava","sourceNew":"  /**\n   * Get all finite strings that start at {@code startState} and end at {@code endState}.\n   */\n  public Iterator<TokenStream> getFiniteStrings(int startState, int endState) {\n    final FiniteStringsIterator it = new FiniteStringsIterator(det, startState, endState);\n    return new Iterator<> () {\n      IntsRef current;\n      boolean finished = false;\n\n      @Override\n      public boolean hasNext() {\n        if (finished == false && current == null) {\n          current = it.next();\n          if (current == null) {\n            finished = true;\n          }\n        }\n        return current != null;\n      }\n\n      @Override\n      public TokenStream next() {\n        if (current == null) {\n          hasNext();\n        }\n        TokenStream next =  new FiniteStringsTokenStream(current);\n        current = null;\n        return next;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get all finite strings that start at {@code startState} and end at {@code endState}.\n   */\n  public Iterator<TokenStream> getFiniteStrings(int startState, int endState) throws IOException {\n    final FiniteStringsIterator it = new FiniteStringsIterator(det, startState, endState);\n    return new Iterator<TokenStream> () {\n      IntsRef current;\n      boolean finished = false;\n\n      @Override\n      public boolean hasNext() {\n        if (finished == false && current == null) {\n          current = it.next();\n          if (current == null) {\n            finished = true;\n          }\n        }\n        return current != null;\n      }\n\n      @Override\n      public TokenStream next() {\n        if (current == null) {\n          hasNext();\n        }\n        TokenStream next =  new FiniteStringsTokenStream(current);\n        current = null;\n        return next;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a1183e4d02ec8307ffca25b9879752bea1822f1":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1183e4d02ec8307ffca25b9879752bea1822f1"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"2a1183e4d02ec8307ffca25b9879752bea1822f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["2a1183e4d02ec8307ffca25b9879752bea1822f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}