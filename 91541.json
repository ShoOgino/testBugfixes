{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","commits":[{"id":"c307d500c43658a83e788edf36022a20fa30c15b","date":1394481241,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","sourceNew":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","sourceNew":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","sourceNew":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7","date":1421315622,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testInOrderWithMinShouldMatch().mjava","sourceNew":null,"sourceOld":"  // LUCENE-5487\n  public void testInOrderWithMinShouldMatch() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"some text here\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r) {\n        @Override\n        protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n          assertEquals(-1, collector.getClass().getSimpleName().indexOf(\"OutOfOrder\"));\n          super.search(leaves, weight, collector);\n        }\n      };\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"field\", \"some\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"text\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"here\")), BooleanClause.Occur.SHOULD);\n    bq.setMinimumNumberShouldMatch(2);\n    s.search(bq, 10);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c307d500c43658a83e788edf36022a20fa30c15b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c307d500c43658a83e788edf36022a20fa30c15b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"]},"commit2Childs":{"c307d500c43658a83e788edf36022a20fa30c15b":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c307d500c43658a83e788edf36022a20fa30c15b","acf00221f44c5f08ccea014f2492b53af15ecd66"],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}