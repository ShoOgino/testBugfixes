{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          if (scoreMode != ScoreMode.None) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          if (scoreMode != ScoreMode.None) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          if (scoreMode != ScoreMode.None) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n        }\n        if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n          pendingChildScores = ArrayUtil.grow(pendingChildScores);\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          if (scoreMode != ScoreMode.None) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["6bd4a7478aca8c3880512b730b28bf3239340635","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}