{"path":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1PhraseAnother().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1PhraseAnother().mjava","pathOld":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1PhraseAnother().mjava","sourceNew":"  public void testQueryPhraseMap1PhraseAnother() throws Exception {\n    Query query = pqF( \"search\", \"engines\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"search\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"search\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"engines\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"engines\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1PhraseAnother() throws Exception {\n    Query query = pqF( \"search\", \"engines\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"search\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"search\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"engines\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"engines\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1PhraseAnother().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1PhraseAnother().mjava","sourceNew":"  public void testQueryPhraseMap1PhraseAnother() throws Exception {\n    Query query = pqF( \"search\", \"engines\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"search\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"search\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"engines\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"engines\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1PhraseAnother() throws Exception {\n    Query query = pqF( \"search\", \"engines\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"search\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"search\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"engines\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"engines\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}