{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed668b5109069e64432d8e4492ac9063e364ebd8","date":1344113411,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dc4a03b3903f7ba6e5bae5b38482674d6796a33","date":1356770513,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    // Mimetype to extension map for detecting file type and show icon\n    // List of types match the icons in /solr/img/filetypes\n    Map<String, String> mimeToExt = new HashMap<String, String>() {{\n      put(\"application/x-7z-compressed\", \"7z\");\n      put(\"application/postscript\", \"ai\");\n      put(\"application/pgp-signature\", \"asc\");\n      put(\"application/octet-stream\", \"bin\");\n      put(\"application/x-bzip2\", \"bz2\");\n      put(\"text/x-c\", \"c\");\n      put(\"application/vnd.ms-htmlhelp\", \"chm\");\n      put(\"application/java-vm\", \"class\");\n      put(\"text/css\", \"css\");\n      put(\"text/csv\", \"csv\");\n      put(\"application/x-debian-package\", \"deb\");\n      put(\"application/msword\", \"doc\");\n      put(\"message/rfc822\", \"eml\");\n      put(\"image/gif\", \"gif\");\n      put(\"application/winhlp\", \"hlp\");\n      put(\"text/html\", \"html\");\n      put(\"application/java-archive\", \"jar\");\n      put(\"text/x-java-source\", \"java\");\n      put(\"image/jpeg\", \"jpeg\");\n      put(\"application/javascript\", \"js\");\n      put(\"application/vnd.oasis.opendocument.chart\", \"odc\");\n      put(\"application/vnd.oasis.opendocument.formula\", \"odf\");\n      put(\"application/vnd.oasis.opendocument.graphics\", \"odg\");\n      put(\"application/vnd.oasis.opendocument.image\", \"odi\");\n      put(\"application/vnd.oasis.opendocument.presentation\", \"odp\");\n      put(\"application/vnd.oasis.opendocument.spreadsheet\", \"ods\");\n      put(\"application/vnd.oasis.opendocument.text\", \"odt\");\n      put(\"application/pdf\", \"pdf\");\n      put(\"application/pgp-encrypted\", \"pgp\");\n      put(\"image/png\", \"png\");\n      put(\"application/vnd.ms-powerpoint\", \"ppt\");\n      put(\"audio/x-pn-realaudio\", \"ram\");\n      put(\"application/x-rar-compressed\", \"rar\");\n      put(\"application/vnd.rn-realmedia\", \"rm\");\n      put(\"application/rtf\", \"rtf\");\n      put(\"application/x-shockwave-flash\", \"swf\");\n      put(\"application/vnd.sun.xml.calc\", \"sxc\");\n      put(\"application/vnd.sun.xml.draw\", \"sxd\");\n      put(\"application/vnd.sun.xml.impress\", \"sxi\");\n      put(\"application/vnd.sun.xml.writer\", \"sxw\");\n      put(\"application/x-tar\", \"tar\");\n      put(\"application/x-tex\", \"tex\");\n      put(\"text/plain\", \"txt\");\n      put(\"text/x-vcard\", \"vcf\");\n      put(\"application/vnd.visio\", \"vsd\");\n      put(\"audio/x-wav\", \"wav\");\n      put(\"audio/x-ms-wma\", \"wma\");\n      put(\"video/x-ms-wmv\", \"wmv\");\n      put(\"application/vnd.ms-excel\", \"xls\");\n      put(\"application/xml\", \"xml\");\n      put(\"application/x-xpinstall\", \"xpi\");\n      put(\"application/zip\", \"zip\");\n    }};\n    context.put(\"mimeToExt\", mimeToExt);\n    \n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      e.printStackTrace();\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d592c0ac8e385941c70532a97c23470770bbd25b","date":1419675066,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    // Velocity context tools - TODO: make these pluggable\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layout_template = request.getParams().get(\"v.layout\");\n    String json_wrapper = request.getParams().get(\"v.json\");\n    boolean wrap_response = (layout_template != null) || (json_wrapper != null);\n\n    // create output, optionally wrap it into a json object\n    if (wrap_response) {\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layout_template != null) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layout_template + \".vm\").merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (json_wrapper != null) {\n        writer.write(request.getParams().get(\"v.json\") + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    } else {\n      template.merge(context, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461700e207a328fd8b164d3ab5342866009a361a","date":1527689709,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0eba829d8047c176db6cee2c2c2e6f37e2925d","date":1575525998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    // run doWrite() with the velocity sandbox\n    try {\n      AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n        @Override\n        public Void run() throws IOException {\n          doWrite(writer, request, response);\n          return null;\n        }\n      }, VELOCITY_SANDBOX);\n    } catch (PrivilegedActionException e) {\n      throw (IOException) e.getException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    // run doWrite() with the velocity sandbox\n    try {\n      AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n        @Override\n        public Void run() throws IOException {\n          doWrite(writer, request, response);\n          return null;\n        }\n      }, VELOCITY_SANDBOX);\n    } catch (PrivilegedActionException e) {\n      throw (IOException) e.getException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    // run doWrite() with the velocity sandbox\n    try {\n      AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n        @Override\n        public Void run() throws IOException {\n          doWrite(writer, request, response);\n          return null;\n        }\n      }, VELOCITY_SANDBOX);\n    } catch (PrivilegedActionException e) {\n      throw (IOException) e.getException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["d592c0ac8e385941c70532a97c23470770bbd25b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ed668b5109069e64432d8e4492ac9063e364ebd8","0dc4a03b3903f7ba6e5bae5b38482674d6796a33"],"461700e207a328fd8b164d3ab5342866009a361a":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"ed668b5109069e64432d8e4492ac9063e364ebd8":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["461700e207a328fd8b164d3ab5342866009a361a","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"d592c0ac8e385941c70532a97c23470770bbd25b":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["0dc4a03b3903f7ba6e5bae5b38482674d6796a33"],"0dc4a03b3903f7ba6e5bae5b38482674d6796a33":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["71946974c05b5dc4d3201f8abf4ecd2609bba400","ed668b5109069e64432d8e4492ac9063e364ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["71946974c05b5dc4d3201f8abf4ecd2609bba400","ed668b5109069e64432d8e4492ac9063e364ebd8"],"7530de27b87b961b51f01bd1299b7004d46e8823":["ed668b5109069e64432d8e4492ac9063e364ebd8"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["461700e207a328fd8b164d3ab5342866009a361a"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["461700e207a328fd8b164d3ab5342866009a361a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"461700e207a328fd8b164d3ab5342866009a361a":["a90f561fc609ec007ba18b10dea9191dbbd71831","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"ed668b5109069e64432d8e4492ac9063e364ebd8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","7530de27b87b961b51f01bd1299b7004d46e8823"],"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"d592c0ac8e385941c70532a97c23470770bbd25b":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["d592c0ac8e385941c70532a97c23470770bbd25b"],"0dc4a03b3903f7ba6e5bae5b38482674d6796a33":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","824d674c7c80eeddb2c2e429f92d3b15688d8393"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["0dc4a03b3903f7ba6e5bae5b38482674d6796a33"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["ed668b5109069e64432d8e4492ac9063e364ebd8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["a90f561fc609ec007ba18b10dea9191dbbd71831","b659435fdb2401d91fa87bb3df798ae41a8046cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a90f561fc609ec007ba18b10dea9191dbbd71831","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}