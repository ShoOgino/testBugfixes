{"path":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap.SegmentMap#map(long[]).mjava","commits":[{"id":"957c610636f393a85a38f1af670540028db13e6b","date":1500044517,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap.SegmentMap#map(long[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Build a map from an index into a sorted view of `weights` to an index into `weights`. */\n    private static int[] map(final long[] weights) {\n      final int[] newToOld = new int[weights.length];\n      for (int i = 0; i < weights.length; ++i) {\n        newToOld[i] = i;\n      }\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          final int tmp = newToOld[i];\n          newToOld[i] = newToOld[j];\n          newToOld[j] = tmp;\n        }\n        @Override\n        protected int compare(int i, int j) {\n          // j first since we actually want higher weights first\n          return Long.compare(weights[newToOld[j]], weights[newToOld[i]]);\n        }\n      }.sort(0, weights.length);\n      return newToOld;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/OrdinalMap.SegmentMap#map(long[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Build a map from an index into a sorted view of `weights` to an index into `weights`. */\n    private static int[] map(final long[] weights) {\n      final int[] newToOld = new int[weights.length];\n      for (int i = 0; i < weights.length; ++i) {\n        newToOld[i] = i;\n      }\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          final int tmp = newToOld[i];\n          newToOld[i] = newToOld[j];\n          newToOld[j] = tmp;\n        }\n        @Override\n        protected int compare(int i, int j) {\n          // j first since we actually want higher weights first\n          return Long.compare(weights[newToOld[j]], weights[newToOld[i]]);\n        }\n      }.sort(0, weights.length);\n      return newToOld;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"957c610636f393a85a38f1af670540028db13e6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","957c610636f393a85a38f1af670540028db13e6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["957c610636f393a85a38f1af670540028db13e6b"]},"commit2Childs":{"957c610636f393a85a38f1af670540028db13e6b":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["957c610636f393a85a38f1af670540028db13e6b","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}