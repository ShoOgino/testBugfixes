{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support the Oracle/Sun extensions (Hotspot diagnostics, sun.misc.Unsafe),\");\n      System.err.println(\"so the memory estimates may be inprecise.\");\n      System.err.println(\"Please report this to the Lucene mailing list, noting your JVM version: \" +\n        Constants.JAVA_VENDOR + \" \" + Constants.JAVA_VERSION);\n    }\n    if (VERBOSE) {\n      System.out.println(\"This JVM is 64bit: \" + Constants.JRE_IS_64BIT);    \n      System.out.println(\"Reference size in this JVM: \" + NUM_BYTES_OBJECT_REF);\n      System.out.println(\"Object header size in this JVM: \" + NUM_BYTES_OBJECT_HEADER);\n      System.out.println(\"Array header size in this JVM: \" + NUM_BYTES_ARRAY_HEADER);\n      System.out.println(\"Object alignment in this JVM: \" + NUM_BYTES_OBJECT_ALIGNMENT);\n    }\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9139c54cd548a746e88dfa944497dccef7629321"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","sourceNew":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support certain Oracle/Sun extensions.\");\n      System.err.println(\"      Memory estimates may be inaccurate.\");\n      System.err.println(\"      Please report this to the Lucene mailing list. JVM version: \" + RamUsageEstimator.JVM_INFO_STRING);\n      for (JvmFeature f : RamUsageEstimator.getUnsupportedFeatures()) {\n        System.err.println(\"      - \" + f.toString());\n      }\n    }\n\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4?\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","sourceOld":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support the Oracle/Sun extensions (Hotspot diagnostics, sun.misc.Unsafe),\");\n      System.err.println(\"so the memory estimates may be inprecise.\");\n      System.err.println(\"Please report this to the Lucene mailing list, noting your JVM version: \" +\n        Constants.JAVA_VENDOR + \" \" + Constants.JAVA_VERSION);\n    }\n    if (VERBOSE) {\n      System.out.println(\"This JVM is 64bit: \" + Constants.JRE_IS_64BIT);    \n      System.out.println(\"Reference size in this JVM: \" + NUM_BYTES_OBJECT_REF);\n      System.out.println(\"Object header size in this JVM: \" + NUM_BYTES_OBJECT_HEADER);\n      System.out.println(\"Array header size in this JVM: \" + NUM_BYTES_ARRAY_HEADER);\n      System.out.println(\"Object alignment in this JVM: \" + NUM_BYTES_OBJECT_ALIGNMENT);\n    }\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f83c815263c282f2c0ac176c0c5fd91c43a49d12","9139c54cd548a746e88dfa944497dccef7629321"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f83c815263c282f2c0ac176c0c5fd91c43a49d12","date":1332529891,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","sourceNew":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support certain Oracle/Sun extensions.\");\n      System.err.println(\" Memory estimates may be inaccurate.\");\n      System.err.println(\" Please report this to the Lucene mailing list.\");\n      System.err.println(\"JVM version: \" + RamUsageEstimator.JVM_INFO_STRING);\n      System.err.println(\"UnsupportedFeatures:\");\n      for (JvmFeature f : RamUsageEstimator.getUnsupportedFeatures()) {\n        System.err.print(\" - \" + f.toString());\n        if (f == RamUsageEstimator.JvmFeature.OBJECT_ALIGNMENT) {\n          System.err.print(\"; Please note: 32bit Oracle/Sun VMs don't allow exact OBJECT_ALIGNMENT retrieval, this is a known issue.\");\n        }\n        System.err.println();\n      }\n    }\n\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4?\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","sourceOld":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support certain Oracle/Sun extensions.\");\n      System.err.println(\"      Memory estimates may be inaccurate.\");\n      System.err.println(\"      Please report this to the Lucene mailing list. JVM version: \" + RamUsageEstimator.JVM_INFO_STRING);\n      for (JvmFeature f : RamUsageEstimator.getUnsupportedFeatures()) {\n        System.err.println(\"      - \" + f.toString());\n      }\n    }\n\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4?\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","bugFix":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"bugIntro":["9139c54cd548a746e88dfa944497dccef7629321"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9139c54cd548a746e88dfa944497dccef7629321","date":1423758024,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testReferenceSize().mjava","sourceNew":"  public void testReferenceSize() {\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 64 bit JVMs, reference size must be 8, unless compressed references are enabled\",\n          COMPRESSED_REFS_ENABLED ? 4 : 8, NUM_BYTES_OBJECT_REF);\n    } else {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4\", 4, NUM_BYTES_OBJECT_REF);\n      assertFalse(\"For 32bit JVMs, compressed references can never be enabled\", COMPRESSED_REFS_ENABLED);\n    }\n  }\n\n","sourceOld":"  public void testReferenceSize() {\n    if (!isSupportedJVM()) {\n      System.err.println(\"WARN: Your JVM does not support certain Oracle/Sun extensions.\");\n      System.err.println(\" Memory estimates may be inaccurate.\");\n      System.err.println(\" Please report this to the Lucene mailing list.\");\n      System.err.println(\"JVM version: \" + RamUsageEstimator.JVM_INFO_STRING);\n      System.err.println(\"UnsupportedFeatures:\");\n      for (JvmFeature f : RamUsageEstimator.getUnsupportedFeatures()) {\n        System.err.print(\" - \" + f.toString());\n        if (f == RamUsageEstimator.JvmFeature.OBJECT_ALIGNMENT) {\n          System.err.print(\"; Please note: 32bit Oracle/Sun VMs don't allow exact OBJECT_ALIGNMENT retrieval, this is a known issue.\");\n        }\n        System.err.println();\n      }\n    }\n\n    assertTrue(NUM_BYTES_OBJECT_REF == 4 || NUM_BYTES_OBJECT_REF == 8);\n    if (!Constants.JRE_IS_64BIT) {\n      assertEquals(\"For 32bit JVMs, reference size must always be 4?\", 4, NUM_BYTES_OBJECT_REF);\n    }\n  }\n\n","bugFix":["f83c815263c282f2c0ac176c0c5fd91c43a49d12","10cd47aac3c4e8c583740a750335f8aab14555b3","dd6c9e9b1251473f465b0443b56046b2658402da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9139c54cd548a746e88dfa944497dccef7629321":["f83c815263c282f2c0ac176c0c5fd91c43a49d12"],"f83c815263c282f2c0ac176c0c5fd91c43a49d12":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9139c54cd548a746e88dfa944497dccef7629321"]},"commit2Childs":{"9139c54cd548a746e88dfa944497dccef7629321":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f83c815263c282f2c0ac176c0c5fd91c43a49d12":["9139c54cd548a746e88dfa944497dccef7629321"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["f83c815263c282f2c0ac176c0c5fd91c43a49d12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}