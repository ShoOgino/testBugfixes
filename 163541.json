{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","commits":[{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["9ee663728a95682ffb5dee37517ac9e863cd0820"]},"commit2Childs":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}