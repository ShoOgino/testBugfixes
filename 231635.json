{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":["c9ba41efd3b52721fdd028e8b8985602f4dad4b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException, CorruptIndexException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Populate the test index+taxonomy for this test.\n   * <p>Subclasses can override this to test different scenarios\n   */\n  protected void populateIndex(RandomIndexWriter iw, TaxonomyWriter taxo, FacetIndexingParams iParams)\n      throws IOException {\n    // add test documents \n    int numDocsToIndex = numDocsToIndex();\n    for (int doc=0; doc<numDocsToIndex; doc++) {\n      indexDoc(iParams, iw, taxo, getContent(doc), getCategories(doc));\n    }\n    \n    // also add a document that would be deleted, so that all tests are also working against deletions in the index\n    String content4del = \"ContentOfDocToDelete\";\n    indexDoc(iParams, iw, taxo, content4del, getCategories(0));\n    iw.commit(); // commit it\n    iw.deleteDocuments(new Term(CONTENT_FIELD,content4del)); // now delete the committed doc \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d33e19a97046248623a7591aeaa6547233fd15e2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d33e19a97046248623a7591aeaa6547233fd15e2","fe33227f6805edab2036cbb80645cc4e2d1fa424","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}