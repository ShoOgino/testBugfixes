{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int).mjava","sourceNew":"    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores);\n        readerMap.put(info, sr);\n      } else if (doOpenStores) {\n        sr.openDocStores();\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @return\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6b36d4f0afdb006498f433653ee214a61be4fa","date":1251387263,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @return\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = (SegmentReader) readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29","date":1268046506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooledd (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n        readerMap.put(info, sr);\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      sr.incRef();\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,int,int).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooledd (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * \n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @param readBufferSize\n     * @param termsIndexDivisor\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (poolReaders) {\n        readBufferSize = BufferedIndexInput.BUFFER_SIZE;\n      }\n\n      SegmentReader sr = readerMap.get(info);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, readBufferSize, doOpenStores, termsIndexDivisor);\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(info, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n        if (termsIndexDivisor != -1 && !sr.termsIndexLoaded()) {\n          // If this reader was originally opened because we\n          // needed to merge it, we didn't load the terms\n          // index.  But now, if the caller wants the terms\n          // index (eg because it's doing deletes, or an NRT\n          // reader is being opened) we ask the reader to\n          // load its terms index.\n          sr.loadTermsIndex(termsIndexDivisor);\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooledd (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["961159f13aece73fbb30aea720e77a2237e8bafd"],"aa6b36d4f0afdb006498f433653ee214a61be4fa":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a5ce3c493909869d0de7bae1bd67d7b96a4f6f29"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"aa6b36d4f0afdb006498f433653ee214a61be4fa":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["a5ce3c493909869d0de7bae1bd67d7b96a4f6f29"],"961159f13aece73fbb30aea720e77a2237e8bafd":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}