{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#parseComp(String,String).mjava","commits":[{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#parseComp(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    HashSet fieldSet = null;\n\n    if(fl != null) {\n      fieldSet = new HashSet();\n      String[] fls = fl.split(\",\");\n      for (String f : fls) {\n        fieldSet.add(f.trim()); //Handle spaces in the field list.\n      }\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(fieldSet != null && !fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream#parseComp(String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    HashSet fieldSet = null;\n\n    if(fl != null) {\n      fieldSet = new HashSet();\n      String[] fls = fl.split(\",\");\n      for (String f : fls) {\n        fieldSet.add(f.trim()); //Handle spaces in the field list.\n      }\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(fieldSet != null && !fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private StreamComparator parseComp(String sort, String fl) throws IOException {\n\n    HashSet fieldSet = null;\n\n    if(fl != null) {\n      fieldSet = new HashSet();\n      String[] fls = fl.split(\",\");\n      for (String f : fls) {\n        fieldSet.add(f.trim()); //Handle spaces in the field list.\n      }\n    }\n\n    String[] sorts = sort.split(\",\");\n    StreamComparator[] comps = new StreamComparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if (spec.length != 2) {\n        throw new IOException(\"Invalid sort spec:\" + s);\n      }\n\n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n\n      if(fieldSet != null && !fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultipleFieldComparator(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}