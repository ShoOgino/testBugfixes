{"path":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              Payload p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length() > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.getData(), p.getOffset(), p.length()));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              Payload p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length() > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.getData(), p.getOffset(), p.length()));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"405e23686bd2f85f8f41e3abb2773b00f6b1a43f","date":1341179606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<String,Object>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<Map<String,Object>>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<String,Object>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    Map<String,Object> map = new LinkedHashMap<>();\n    map.put(VERSION_KEY, VERSION);\n    if (f.fieldType().stored()) {\n      String stringValue = f.stringValue();\n      if (stringValue != null) {\n        map.put(STRING_KEY, stringValue);\n      }\n      BytesRef binaryValue = f.binaryValue();\n      if (binaryValue != null) {\n        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      List<Map<String,Object>> tokens = new LinkedList<>();\n      while (ts.incrementToken()) {\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        Map<String,Object> tok = new TreeMap<>();\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = new String(catt.buffer(), 0, catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            tTerm = tatt.getBytesRef().utf8ToString();\n          } else {\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.put(FLAGS_KEY, Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.put(OFFSET_START_KEY, ((OffsetAttribute)att).startOffset());\n              tok.put(OFFSET_END_KEY, ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.put(TYPE_KEY, ((TypeAttribute)att).type());\n            } else {\n              tok.put(cl.getName(), att.toString());\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          tok.put(TOKEN_KEY, term);\n        }\n        tokens.add(tok);\n      }\n      map.put(TOKENS_KEY, tokens);\n    }\n    return JSONUtil.toJSON(map, -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","63241596de245e96a0a3c36c7b03eb92130b81db"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["405e23686bd2f85f8f41e3abb2773b00f6b1a43f"],"405e23686bd2f85f8f41e3abb2773b00f6b1a43f":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3394716f52b34ab259ad5247e7595d9f9db6e935"],"63241596de245e96a0a3c36c7b03eb92130b81db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","405e23686bd2f85f8f41e3abb2773b00f6b1a43f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","63241596de245e96a0a3c36c7b03eb92130b81db"],"405e23686bd2f85f8f41e3abb2773b00f6b1a43f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"63241596de245e96a0a3c36c7b03eb92130b81db":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["405e23686bd2f85f8f41e3abb2773b00f6b1a43f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}