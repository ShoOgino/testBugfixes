{"path":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","commits":[{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","pathOld":"/dev/null","sourceNew":"    public PackagePluginHolder(PluginInfo info, SolrCore core, SolrConfig.SolrPluginInfo pluginMeta) {\n      super(info);\n      this.core = core;\n      this.pluginMeta = pluginMeta;\n      this.pkg = info.attributes.get(CommonParams.PACKAGE);\n      this.core.addPackageListener(pkg, (lib) -> {\n        if(lib.getZnodeVersion() > znodeVersion) reload();\n      });\n      this.packageManager = core.getCoreContainer().getPackageManager();\n      reload();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","sourceNew":"    public PackagePluginHolder(PluginInfo info, SolrCore core, SolrConfig.SolrPluginInfo pluginMeta) {\n      super(info);\n      this.core = core;\n      this.pluginMeta = pluginMeta;\n      this.pkg = info.attributes.get(CommonParams.PACKAGE);\n      this.core.addPackageListener(new SolrCore.PkgListener() {\n        @Override\n        public String packageName() {\n          return pkg;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return info;\n        }\n\n        @Override\n        public MapWriter lib() {\n          return runtimeLib;\n        }\n\n        @Override\n        public void changed(RuntimeLib lib) {\n          int myVersion = runtimeLib == null? -1 : runtimeLib.znodeVersion;\n          if(lib.getZnodeVersion() > myVersion) reload();\n        }\n      });\n      this.packageManager = core.getCoreContainer().getPackageManager();\n      reload();\n    }\n\n","sourceOld":"    public PackagePluginHolder(PluginInfo info, SolrCore core, SolrConfig.SolrPluginInfo pluginMeta) {\n      super(info);\n      this.core = core;\n      this.pluginMeta = pluginMeta;\n      this.pkg = info.attributes.get(CommonParams.PACKAGE);\n      this.core.addPackageListener(pkg, (lib) -> {\n        if(lib.getZnodeVersion() > znodeVersion) reload();\n      });\n      this.packageManager = core.getCoreContainer().getPackageManager();\n      reload();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","sourceNew":null,"sourceOld":"    public PackagePluginHolder(PluginInfo info, SolrCore core, SolrConfig.SolrPluginInfo pluginMeta) {\n      super(info);\n      this.core = core;\n      this.pluginMeta = pluginMeta;\n      this.pkg = info.attributes.get(CommonParams.PACKAGE);\n      this.core.addPackageListener(new SolrCore.PkgListener() {\n        @Override\n        public String packageName() {\n          return pkg;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return info;\n        }\n\n        @Override\n        public MapWriter lib() {\n          return runtimeLib;\n        }\n\n        @Override\n        public void changed(RuntimeLib lib) {\n          int myVersion = runtimeLib == null? -1 : runtimeLib.znodeVersion;\n          if(lib.getZnodeVersion() > myVersion) reload();\n        }\n      });\n      this.packageManager = core.getCoreContainer().getPackageManager();\n      reload();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.PackagePluginHolder#PackagePluginHolder(PluginInfo,SolrCore,SolrConfig.SolrPluginInfo).mjava","sourceNew":null,"sourceOld":"    public PackagePluginHolder(PluginInfo info, SolrCore core, SolrConfig.SolrPluginInfo pluginMeta) {\n      super(info);\n      this.core = core;\n      this.pluginMeta = pluginMeta;\n      this.pkg = info.attributes.get(CommonParams.PACKAGE);\n      this.core.addPackageListener(new SolrCore.PkgListener() {\n        @Override\n        public String packageName() {\n          return pkg;\n        }\n\n        @Override\n        public PluginInfo pluginInfo() {\n          return info;\n        }\n\n        @Override\n        public MapWriter lib() {\n          return runtimeLib;\n        }\n\n        @Override\n        public void changed(RuntimeLib lib) {\n          int myVersion = runtimeLib == null? -1 : runtimeLib.znodeVersion;\n          if(lib.getZnodeVersion() > myVersion) reload();\n        }\n      });\n      this.packageManager = core.getCoreContainer().getPackageManager();\n      reload();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}