{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","commits":[{"id":"fd152d7a93506b8b937e483676fe721e3cb857a9","date":1429913980,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a304297921591645a4f3b7beee9503fe92a8352","date":1429956986,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","sourceNew":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = DirectoryReader.open(iw.w, true);\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","sourceNew":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = DirectoryReader.open(iw.w);\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = DirectoryReader.open(iw.w, true);\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","sourceNew":null,"sourceOld":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = DirectoryReader.open(iw.w);\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFieldSometimesMissingFromSegment().mjava","sourceNew":null,"sourceOld":"  public void testFieldSometimesMissingFromSegment() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"foo\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    iw.addDocument(doc);\n\n    // Make a 2nd segment where body is only stored:\n    iw.commit();\n    doc = new Document();\n    doc.add(new StoredField(\"body\", \"foo\"));\n    iw.addDocument(doc);\n    \n    IndexReader ir = DirectoryReader.open(iw.w);\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter();\n    Query query = new MatchAllDocsQuery();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(2, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    assertEquals(2, snippets.length);\n    assertEquals(\"foo\", snippets[0]);\n    assertNull(snippets[1]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["2a1862266772deb28cdcb7d996b64d2177022687"],"7a304297921591645a4f3b7beee9503fe92a8352":["fd152d7a93506b8b937e483676fe721e3cb857a9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a1862266772deb28cdcb7d996b64d2177022687","381618eac2691bb34ab9a3fca76ad55c6274517e"],"2a1862266772deb28cdcb7d996b64d2177022687":["7a304297921591645a4f3b7beee9503fe92a8352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd152d7a93506b8b937e483676fe721e3cb857a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a304297921591645a4f3b7beee9503fe92a8352":["2a1862266772deb28cdcb7d996b64d2177022687"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2a1862266772deb28cdcb7d996b64d2177022687":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd152d7a93506b8b937e483676fe721e3cb857a9"],"fd152d7a93506b8b937e483676fe721e3cb857a9":["7a304297921591645a4f3b7beee9503fe92a8352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}